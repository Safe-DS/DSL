grammar com.larsreimann.safeds.SafeDS hidden (
    WS,
    SL_COMMENT,
    ML_COMMENT,
    TEST_MARKER
)
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore
import 'https://larsreimann.com/safeds/SafeDS'



/**********************************************************************************************************************
 * Declarations
 **********************************************************************************************************************/

// Compilations Units --------------------------------------------------------------------------------------------------

SdsCompilationUnit
    : {SdsCompilationUnit}
      =>annotationCalls+=SdsAnnotationCall* // Annotation calls before a package declaration belong to the compilation unit
      ('package' name=QualifiedName)?
      imports+=SdsImport*
      members+=SdsCompilationUnitMember*
    ;

SdsCompilationUnitMember returns SdsAbstractAnnotatedObject
    : {SdsAnnotationCallList} annotationCalls+=SdsAnnotationCall*

    ( {SdsAnnotation.annotationCallList=current}
          'annotation' name=ID
          parameterList=SdsParameterList?
          constraint=SdsConstraint?

    | {SdsClass.annotationCallList=current}
          'class' name=ID
          typeParameterList=SdsTypeParameterList?
          parameterList=SdsParameterList?
          parentTypeList=SdsParentTypeList?
          body=SdsClassBody?

    | {SdsEnum.annotationCallList=current}
          'enum' name=ID
          body=SdsEnumBody?

    | {SdsFunction.annotationCallList=current}
          'fun' name=ID
          typeParameterList=SdsTypeParameterList?
          parameterList=SdsParameterList
          resultList=SdsResultList?
          body=SdsFunctionBody?

    | {SdsPredicate.annotationCallList=current}
        'predicate' name=ID
        typeParameterList=SdsTypeParameterList?
        parameterList=SdsParameterList
        resultList=SdsResultList?
        goalList=SdsGoalList

    | {SdsPredicate.annotationCallList=current}
        'abstract' 'predicate' name=ID
        typeParameterList=SdsTypeParameterList?
        parameterList=SdsParameterList
        resultList=SdsResultList?

    | {SdsSchema.annotationCallList=current}
        'schema' name=ID
        columnList=SdsColumnList

    | {SdsStep.annotationCallList=current}
          visibility=('internal'|'private')?
          'step' name=ID
          parameterList=SdsParameterList
          resultList=SdsResultList?
          body=SdsBlock

    | {SdsWorkflow.annotationCallList=current}
          'workflow' name=ID
          body=SdsBlock
    )
    ;

SdsImport
    : 'import' importedNamespace=QualifiedNameWithWildcard alias=SdsImportAlias?
    ;

SdsImportAlias
    : 'as' name=ID
    ;


// Annotations ---------------------------------------------------------------------------------------------------------

SdsAnnotationCall
    : '@' annotation=[SdsAnnotation] argumentList=SdsAnnotationCallArgumentList?
    ;

SdsAnnotationCallArgumentList returns SdsArgumentList
    : {SdsArgumentList} '(' (arguments+=SdsAnnotationCallArgument (',' arguments+=SdsAnnotationCallArgument)* ','?)? ')'
    ;

SdsAnnotationCallArgument returns SdsArgument
    : (parameter=[SdsParameter] '=')? value=SdsExpression
    ;


// Classes -------------------------------------------------------------------------------------------------------------

SdsParentTypeList
    : 'sub' parentTypes+=SdsParentType (',' parentTypes+=SdsParentType)* ','?
    ;

SdsParentType returns SdsAbstractType
    : SdsParentPrimaryType =>({SdsMemberType.receiver=current} '.' member=SdsNamedType)*
    ;

SdsParentPrimaryType returns SdsAbstractType
    : SdsNamedType
    | SdsParentParenthesizedType
    ;

SdsParentParenthesizedType returns SdsParenthesizedType
    : '(' type=SdsParentType ')'
    ;

SdsClassBody
    : {SdsClassBody} '{' members+=SdsClassMember* '}'
    ;

SdsClassMember returns SdsAbstractObject
    : SdsAnnotatedClassMember
    | SdsProtocol
    | SdsConstraint
    ;

SdsAnnotatedClassMember returns SdsAbstractAnnotatedObject
    : {SdsAnnotationCallList} annotationCalls+=SdsAnnotationCall*

    ( {SdsAttribute.annotationCallList=current}
          static?='static'?
          'attr' name=ID (':' type=SdsType)?

    | {SdsClass.annotationCallList=current}
          'class' name=ID
          typeParameterList=SdsTypeParameterList?
          parameterList=SdsParameterList?
          parentTypeList=SdsParentTypeList?
          body=SdsClassBody?

    | {SdsEnum.annotationCallList=current}
          'enum' name=ID
          body=SdsEnumBody?

    | {SdsFunction.annotationCallList=current}
          static?='static'?
          'fun' name=ID
          typeParameterList=SdsTypeParameterList?
          parameterList=SdsParameterList
          resultList=SdsResultList?
          body=SdsFunctionBody?
    )
    ;

SdsConstraint
    : 'constraint' constraintList=SdsGoalList
    ;

SdsProtocol
    : 'protocol' body=SdsProtocolBody
    ;

SdsProtocolBody
    : {SdsProtocolBody}
      '{'
      subtermList=SdsProtocolSubtermList?
      term=SdsProtocolTerm?
      '}'
    ;

SdsProtocolSubtermList
    : subterms+=SdsProtocolSubterm+
    ;

SdsProtocolSubterm
    : 'subterm' name=ID '=' term=SdsProtocolTerm ';'
    ;

SdsProtocolTerm returns SdsAbstractProtocolTerm
    : SdsProtocolAlternative
    ;

SdsProtocolAlternative returns SdsAbstractProtocolTerm
    : SdsProtocolSequence
    (
        {SdsProtocolAlternative.terms+=current} '|' terms+=SdsProtocolSequence
        ('|' terms+=SdsProtocolSequence)*
    )?
    ;

SdsProtocolSequence returns SdsAbstractProtocolTerm
    : SdsProtocolQuantifiedTerm
    (
        {SdsProtocolSequence.terms+=current} terms+=SdsProtocolQuantifiedTerm
        (terms+=SdsProtocolQuantifiedTerm)*
    )?
    ;

SdsProtocolQuantifiedTerm returns SdsAbstractProtocolTerm
    : SdsProtocolPrimaryElement
      ({SdsProtocolQuantifiedTerm.term=current} quantifier=SdsProtocolQuantifier)?
    ;

SdsProtocolQuantifier
    : '?'
    | '*'
    | '+'
    ;

SdsProtocolPrimaryElement returns SdsAbstractProtocolTerm
    : SdsProtocolComplement
    | SdsProtocolReference
    | SdsProtocolTokenClass
    | SdsProtocolParenthesizedTerm
    ;

SdsProtocolComplement
    : {SdsProtocolComplement}
      '['
      universe=SdsProtocolTokenClass?
      '^'
      referenceList=SdsProtocolReferenceList?
      ']'
    ;

SdsProtocolReferenceList
    : references+=SdsProtocolReference+
    ;

SdsProtocolReference
    : token=[SdsAbstractProtocolToken]
    ;

SdsProtocolTokenClass
    : value=SdsProtocolTokenClassValue
    ;

SdsProtocolTokenClassValue
    : '.'
    | '\\a'
    | '\\f'
    ;

SdsProtocolParenthesizedTerm
    : '(' term=SdsProtocolTerm ')'
    ;


// Enums ---------------------------------------------------------------------------------------------------------------

SdsEnumBody
    : {SdsEnumBody} '{' variants+=SdsEnumVariant* '}'
    ;

SdsEnumVariant
    : annotationCalls+=SdsAnnotationCall*
      name=ID
      typeParameterList=SdsTypeParameterList?
      parameterList=SdsParameterList?
      constraint=SdsConstraint?
    ;


// Parameters ----------------------------------------------------------------------------------------------------------

SdsParameterList
    : {SdsParameterList} '(' (parameters+=SdsParameter (',' parameters+=SdsParameter)* ','?)? ')'
    ;

// Used while parsing lambdas to avoid left-recursion. Can be treated like a normal parameter list.
SdsLambdaParameterList
    : {SdsLambdaParameterList} '(' (parameters+=SdsParameter (',' parameters+=SdsParameter)* ','?)? ')'
    ;

SdsParameter
    : annotationCalls+=SdsAnnotationCall*
      variadic?='vararg'?
      name=ID (':' type=SdsType)?
      ('=' defaultValue=SdsExpression)?
    ;


// Results -------------------------------------------------------------------------------------------------------------

SdsResultList
    : {SdsResultList} '->' results+=SdsResult // If there is exactly one result we need no parentheses
    | {SdsResultList} '->' '(' (results+=SdsResult (',' results+=SdsResult)* ','?)? ')'
    ;

SdsResult
    : annotationCalls+=SdsAnnotationCall*
      name=ID (':' type=SdsType)?
    ;

// Function -------------------------------------------------------------------------------------------------------------

SdsFunctionBody
    : {SdsFunctionBody} '{' statements+=SdsFunctionStatement* '}'
    ;

SdsFunctionStatement returns SdsAbstractObject
    : SdsConstraint
    ;

/**********************************************************************************************************************
 * Statements
 **********************************************************************************************************************/

// Functions and workflows --------------------------------------------------------------------------------------------

SdsBlock
    : {SdsBlock} '{' statements+=SdsStatement* '}'
    ;

SdsStatement returns SdsAbstractStatement
    : SdsAssignment
    | SdsExpressionStatement
    ;

SdsAssignment
    : assigneeList=SdsAssigneeList '=' expression=SdsExpression ';'
    ;

SdsAssigneeList
    : assignees+=SdsAssignee (',' assignees+=SdsAssignee)* ','?
    ;

SdsAssignee returns SdsAbstractAssignee
    : {SdsPlaceholder} 'val' name=ID
    | {SdsWildcard}    '_'
    | {SdsYield}       'yield' result=[SdsResult]
    ;

SdsExpressionStatement
    : expression=SdsExpression ';'
    ;

/**********************************************************************************************************************
 * Expressions
 **********************************************************************************************************************/

SdsExpression returns SdsAbstractExpression
    : SdsLambda
    | SdsOrExpression
    ;

SdsLambda returns SdsAbstractExpression
    : SdsLambdaParameterList
    ( {SdsBlockLambda.parameterList=current}      body=SdsBlockLambdaBlock
    | {SdsExpressionLambda.parameterList=current} '->' result=SdsExpression
    )
    ;

SdsBlockLambdaBlock returns SdsBlock
    : {SdsBlock} '{' statements+=SdsBlockLambdaStatement* '}'
    ;

SdsBlockLambdaStatement returns SdsAbstractStatement
    : SdsBlockLambdaAssignment
    | SdsExpressionStatement
    ;

SdsBlockLambdaAssignment returns SdsAssignment
    : assigneeList=SdsBlockLambdaAssigneeList '=' expression=SdsExpression ';'
    ;

SdsBlockLambdaAssigneeList returns SdsAssigneeList
    : assignees+=SdsBlockLambdaAssignee (',' assignees+=SdsBlockLambdaAssignee)* ','?
    ;

SdsBlockLambdaAssignee returns SdsAbstractAssignee
    : {SdsWildcard} '_'
    | {SdsPlaceholder} 'val' name=ID
    | {SdsBlockLambdaResult} 'yield' name=ID
    ;

SdsOrExpression returns SdsAbstractExpression
    : SdsAndExpression ({SdsInfixOperation.leftOperand=current} operator='or' rightOperand=SdsAndExpression)*
    ;

SdsAndExpression returns SdsAbstractExpression
    : SdsNotExpression ({SdsInfixOperation.leftOperand=current} operator='and' rightOperand=SdsNotExpression)*
    ;

SdsNotExpression returns SdsAbstractExpression
    : {SdsPrefixOperation} operator='not' operand=SdsNotExpression
    | SdsEqualityExpression
    ;

SdsEqualityExpression returns SdsAbstractExpression
    : SdsComparisonExpression ({SdsInfixOperation.leftOperand=current} operator=SdsEqualityOperator rightOperand=SdsComparisonExpression)?
    ;

SdsEqualityOperator
    : '=='
    | '!='
    | '==='
    | '!=='
    ;

SdsComparisonExpression returns SdsAbstractExpression
    : SdsAdditiveExpression ({SdsInfixOperation.leftOperand=current} operator=SdsComparisonOperator rightOperand=SdsAdditiveExpression)?
    ;

SdsComparisonOperator
    : '<'
    | '<='
    | '>='
    | '>'
    ;

SdsAdditiveExpression returns SdsAbstractExpression
    : SdsMultiplicativeExpression ({SdsInfixOperation.leftOperand=current} operator=SdsAdditiveOperator rightOperand=SdsMultiplicativeExpression)*
    ;

SdsAdditiveOperator
    : '+'
    | '-'
    ;

SdsMultiplicativeExpression returns SdsAbstractExpression
    : SdsElvisExpression ({SdsInfixOperation.leftOperand=current} operator=SdsMultiplicativeOperator rightOperand=SdsElvisExpression)*
    ;

SdsMultiplicativeOperator
    : '*'
    | '/'
    ;

SdsElvisExpression returns SdsAbstractExpression
    : SdsUnaryOperation ({SdsInfixOperation.leftOperand=current} operator='?:' rightOperand=SdsUnaryOperation)*
    ;

SdsUnaryOperation returns SdsAbstractExpression
    : {SdsPrefixOperation} operator='-' operand=SdsUnaryOperation
    | SdsChainedExpression
    ;

SdsChainedExpression returns SdsAbstractExpression
    : SdsPrimaryExpression =>(
          {SdsCall.receiver=current}          typeArgumentList=SdsTypeArgumentList? argumentList=SdsCallArgumentList
        | {SdsIndexedAccess.receiver=current} '[' index=SdsExpression ']'
        | {SdsMemberAccess.receiver=current}  (nullSafe?='?')? '.' member=SdsReference
    )*
    ;

SdsCallArgumentList returns SdsArgumentList
    : {SdsArgumentList} '(' (arguments+=SdsCallArgument (',' arguments+=SdsCallArgument)* ','?)? ')'
    ;

SdsCallArgument returns SdsArgument
    : (parameter=[SdsParameter] '=')? value=SdsExpression
    ;

SdsPrimaryExpression returns SdsAbstractExpression
    : SdsLiteral
    | SdsParenthesizedExpression
    | SdsReference
    | SdsTemplateString
    ;

SdsLiteral returns SdsAbstractLiteral
    : SdsBoolean
    | SdsFloat
    | SdsInt
    | SdsNull
    | SdsString
    ;

SdsBoolean
    : true?='true'
    | {SdsBoolean} 'false'
    ;

SdsFloat
    : value=FLOAT
    ;

SdsInt
    : value=INT
    ;

SdsNull
    : {SdsNull} 'null'
    ;

SdsString
    : value=STRING
    ;

SdsReference
    : declaration=[SdsAbstractDeclaration]
    ;

SdsParenthesizedExpression
    : '(' expression=SdsExpression ')'
    ;


// Template strings ----------------------------------------------------------------------------------------------------

SdsTemplateString
    : expressions+=SdsTemplateStringStart expressions+=SdsExpression?
      (expressions+=SdsTemplateStringInner expressions+=SdsExpression?)*
      expressions+=SdsTemplateStringEnd
    ;

SdsTemplateStringStart
    : value=TEMPLATE_STRING_START
    ;

SdsTemplateStringInner
    : value=TEMPLATE_STRING_INNER
    ;

SdsTemplateStringEnd
    : value=TEMPLATE_STRING_END
    ;


/**********************************************************************************************************************
 * Predicates / Goals
 **********************************************************************************************************************/

SdsGoalList
    : {SdsGoalList} '{' ( goals+=SdsGoal (',' goals+=SdsGoal)* )? '}'
    ;

SdsGoal returns SdsAbstractGoal
    : SdsExpressionGoal
    | SdsAssignmentGoal
    | SdsAbstractConstraintGoal
    ;

SdsAssignmentGoal
    : placeholder=SdsGoalPlaceholder "=" expression=SdsGoalExpression
    ;

SdsGoalPlaceholder
    : 'val' name=ID
    ;

SdsExpressionGoal
    : expression=SdsGoalExpression
    ;

SdsGoalExpression returns SdsAbstractGoalExpression
    : SdsChainedGoalExpression
    ;

SdsChainedGoalExpression returns SdsAbstractGoalExpression
    : SdsPrimaryGoalExpression ( {SdsGoalCall.receiver=current}'(' (argumentList=SdsGoalArgumentList)? ')' )?
    ;

SdsGoalArgumentList
    : {SdsGoalArgumentList} arguments+=SdsGoalArgument (',' arguments+=SdsGoalArgument)*
    ;

SdsGoalArgument
    : (parameter=[SdsParameter] "=")? value=SdsGoalExpression
    ;

SdsPrimaryGoalExpression returns SdsAbstractGoalExpression
    : SdsGoalReference
    | SdsParenthesizedGoalExpression
    | SdsLiteral
    ;

SdsGoalReference
    : declaration=[SdsAbstractDeclaration]
    ;

SdsParenthesizedGoalExpression
    : '(' expressions+=SdsGoalExpression  (',' expressions+=SdsGoalExpression)* ')'
    ;


/**********************************************************************************************************************
 * Schemas
 **********************************************************************************************************************/

SdsColumnList
: {SdsColumnList} '{' ( columns+=SdsColumn (',' columns+=SdsColumn)* ','?)? '}'
;

SdsColumn
: columnName=SdsString ":" columnType=SdsType
;


/**********************************************************************************************************************
 * Names
 **********************************************************************************************************************/

QualifiedName
    : ID ('.' ID)*
    ;

QualifiedNameWithWildcard
    : QualifiedName ('.' '*')?
    ;



/**********************************************************************************************************************
 * Types
 **********************************************************************************************************************/

SdsType returns SdsAbstractType
    : SdsPrimaryType =>({SdsMemberType.receiver=current} '.' member=SdsNamedType)*
    ;

SdsPrimaryType returns SdsAbstractType
    : SdsCallableType
    | SdsNamedType
    | SdsUnionType
    | SdsParenthesizedType
    ;

SdsParenthesizedType
    : '(' type=SdsType ')'
    ;

// Callable Types ------------------------------------------------------------------------------------------------------

SdsCallableType
    : parameterList=SdsParameterList
      resultList=SdsResultList
    ;


// Named Types ---------------------------------------------------------------------------------------------------------

SdsNamedType
    : declaration=[SdsAbstractNamedTypeDeclaration]
      typeArgumentList=SdsTypeArgumentList?
      (nullable?='?')?
    ;


// Union Types ---------------------------------------------------------------------------------------------------------

SdsUnionType
    : 'union' typeArgumentList=SdsUnionTypeArgumentList
    ;

SdsUnionTypeArgumentList returns SdsTypeArgumentList
    : {SdsTypeArgumentList} ('<' (typeArguments+=SdsUnionTypeArgument (',' typeArguments+=SdsUnionTypeArgument)* ','?)? '>')
    ;

SdsUnionTypeArgument returns SdsTypeArgument
    : value=SdsUnionTypeArgumentValue
    ;

SdsUnionTypeArgumentValue returns SdsAbstractTypeArgumentValue
    : {SdsTypeProjection} type=SdsType
    ;


// Generics ------------------------------------------------------------------------------------------------------------

SdsTypeParameterList
    : {SdsTypeParameterList} ('<' (typeParameters+=SdsTypeParameter (',' typeParameters+=SdsTypeParameter)* ','?)? '>')
    ;

SdsTypeParameter
    : annotationCalls+=SdsAnnotationCall*
      variance=SdsTypeParameterVariance?
      name=ID
      ('::' kind=SdsTypeParameterKind)?
    ;

SdsTypeParameterVariance
    : 'in'
    | 'out'
    ;

SdsTypeParameterKind
    : '$SchemaType'
    | '$ExpressionType'
    | '$IntType'
    | '$FloatType'
    | '$BooleanType'
    | '$StringType'
    | '$NamedType'
    ;

SdsAbstractConstraintGoal
    : SdsTypeParameterConstraintGoal
    ;

SdsTypeParameterConstraintGoal
    : leftOperand=[SdsTypeParameter] operator=SdsTypeParameterConstraintOperator rightOperand=SdsType
    ;

SdsTypeParameterConstraintOperator
    : 'sub'
    | 'super'
    ;

SdsTypeArgumentList
    : {SdsTypeArgumentList} '<' (typeArguments+=SdsTypeArgument (',' typeArguments+=SdsTypeArgument)* ','?)? '>'
    ;

SdsTypeArgument
    : (typeParameter=[SdsTypeParameter] '=')? value=SdsTypeArgumentValue
    ;

SdsTypeArgumentValue returns SdsAbstractTypeArgumentValue
    : {SdsStarProjection} '*'
    | {SdsTypeProjection} variance=SdsTypeParameterVariance? type=SdsType
    ;



/**********************************************************************************************************************
 * Terminals
 **********************************************************************************************************************/

terminal FLOAT returns ecore::EDouble
    : DECIMAL_DIGIT+ '.' DECIMAL_DIGIT+ FLOAT_EXPONENT?
    | DECIMAL_DIGIT+ FLOAT_EXPONENT
    ;

terminal fragment DECIMAL_DIGIT
    : '0'..'9'
    ;

terminal fragment FLOAT_EXPONENT
    : ('e'|'E') ('+'|'-')? DECIMAL_DIGIT+
    ;

terminal ID
    : IDENTIFIER
    | '`' IDENTIFIER '`'
    ;

terminal fragment IDENTIFIER
    : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
    | SCHEMA_EFFECT
    ;

terminal fragment SCHEMA_EFFECT
    : '$ReadSchema'
    | '$CheckColumn'
    ;

terminal INT returns ecore::EInt
    : DECIMAL_DIGIT+
    ;

terminal ML_COMMENT
    : '/*' -> '*/'
    ;

terminal SL_COMMENT
    : '//' !('\r'|'\n')* ('\r'? '\n')?
    ;

terminal STRING returns ecore::EString
    : STRING_START
      STRING_TEXT*
      STRING_END
    ;

terminal fragment STRING_START
    : STRING_DELIMITER
    ;

terminal fragment STRING_END
    : '{'? STRING_DELIMITER
    ;

terminal fragment STRING_DELIMITER
    : '"'
    ;

terminal fragment STRING_TEXT
    : '{'? ESCAPE_SEQUENCE
    | '{'? !('\\'|STRING_DELIMITER|'{')
    ;

terminal fragment ESCAPE_SEQUENCE
    : '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\'|'{' */
    ;

terminal fragment TEMPLATE_EXPRESSION_START
    : '{{'
    ;

terminal fragment TEMPLATE_EXPRESSION_END
    : '}}'
    ;

terminal TEMPLATE_STRING_START
    : STRING_START
      STRING_TEXT*
      TEMPLATE_EXPRESSION_START
    ;

terminal TEMPLATE_STRING_INNER
    : TEMPLATE_EXPRESSION_END
      STRING_TEXT*
      TEMPLATE_EXPRESSION_START
    ;

terminal TEMPLATE_STRING_END
    : TEMPLATE_EXPRESSION_END
      STRING_TEXT*
      STRING_END
    ;

terminal TEST_MARKER
    : '»'
    | '«'
    ;

terminal WS
    : (' '|'\t'|'\r'|'\n')+
    ;
