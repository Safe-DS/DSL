package tests.typeComputer.expressions.blockLambdas

fun f(
    parameter: (a: String, b: Int) -> (r: String, s: Int)
)

step lambdasWithExplicitParameterTypes() -> (
    result: (a: String, b: Int) -> (r: String, s: Int)
) {
    val myLambda = (a: Int, b: String) {
        yield r = 1;
        yield s = "";
    };
    yield result = (a: Int, b: String) {
        yield r = 1;
        yield s = "";
    };
    f(
        (a: Int, b: String) {
            yield r = 1;
            yield s = "";
        }
    );
}

step lambdasWithExplicitVariadicType() {
    val myLambda = (a: Int, vararg b: String) {
        yield r = 1;
        yield s = "";
    };
}

step yieldedLambda() -> (
    result: (a: String, b: Int) -> (r: String, s: Int)
) {
    yield result = (a, b) {
        yield r = 1;
        yield s = "";
    };
}

step argumentLambda() {
    f(
        (a, b) {
            yield r = 1;
            yield s = "";
        }
    );
}
