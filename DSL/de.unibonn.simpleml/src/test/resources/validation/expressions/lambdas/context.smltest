package tests.validation.expressions.lambdas.context

workflow invalidCases {
    // semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    »() {}«;
    // semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    »() -> 1«;
    // semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    (»() {}«)();
    // semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    (»() -> 1«)();
    // semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    val a = »() {}«;
    // semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    val b = »() -> 1«;
}

step yieldBlockLambdaInStep() -> f: () -> res: Int {
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    yield f = »() { 
        yield res = 1;
    }«;
}

step yieldExpressionLambdaInStep() -> f: () -> res: Int {
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    yield f = »() -> 1«;
}

step passLambdasAsArgumentToCallableType(f: (g: () -> res: Int) -> ()) {
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    f(»() { yield res = 1; }«);
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    f(»() -> 1«);
}

class TestClass(f: () -> res: Int)
enum TestEnum {
    Variant(f: () -> res: Int)
}
fun testFunction(f: () -> res: Int)
step testStep1(f: () -> res: Int) {}

workflow passLambdasAsArguments {
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    TestClass(»() { yield res = 1; }«);
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    TestClass(»() -> 1«);
    
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    TestEnum.Variant(»() { yield res = 1; }«);
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    TestEnum.Variant(»() -> 1«);
    
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    testFunction(»() { yield res = 1; }«);
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    testFunction(»() -> 1«);
    
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    testStep1(»() { yield res = 1; }«);
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    testStep1(»() -> 1«);
}

/* Special cases */

workflow wrappedInParentheses {
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    testFunction((»() -> 1«));
}

step testStep2(param) {}

step testStep3() {}

workflow parameterHasNoType {
    // semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    testStep2(»() -> 1«);       
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    testStep2(param2 = »() -> 1«);    
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    testStep3(»() -> 1«);    
    // no_semantic_error "A lambda must either be yielded in a step or assigned to a typed parameter."
    unresolved(»() -> 1«);
}
