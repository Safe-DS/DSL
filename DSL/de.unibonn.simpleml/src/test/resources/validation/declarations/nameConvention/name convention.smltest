
package tests.validation.declarations.nameCasing

// no_semantic_warning "Names of annotations should be UpperCamelCase."
annotation »AnnotationUppercase1«
// semantic_warning "Names of annotations should be UpperCamelCase."
annotation »annotationLowercase«
// semantic_warning "Names of annotations should be UpperCamelCase."
annotation »_annotationUnderscore«
// semantic_warning "Names of annotations should be UpperCamelCase."
annotation »Annotation_Snake_Case«

// no_semantic_warning "Names of classes should be UpperCamelCase."
class »ClassUppercase1«
// semantic_warning "Names of classes should be UpperCamelCase."
class »classLowercase«
// semantic_warning "Names of classes should be UpperCamelCase."
class »_classUnderscore«
// semantic_warning "Names of classes should be UpperCamelCase."
class »Class_Snake_Case« {
    // semantic_warning "Names of attributes should be lowerCamelCase."
    attr »AttributeUppercase«: Int
    // no_semantic_warning "Names of attributes should be lowerCamelCase."
    attr »attributeLowercase1«: Int
    // semantic_warning "Names of attributes should be lowerCamelCase."
    attr »_attributeUnderscore«: Int    
    // semantic_warning "Names of attributes should be lowerCamelCase."
    attr »attribute_snake_case«: Int

    protocol {
        // semantic_warning "Names of protocol subterms should be lowerCamelCase."
        subterm »SubtermUppercase« = .;
        // no_semantic_warning "Names of protocol subterms should be lowerCamelCase."
        subterm »subtermLowercase1« = .;
        // semantic_warning "Names of protocol subterms should be lowerCamelCase."
        subterm »_subtermUnderscore« = .;    
        // semantic_warning "Names of protocol subterms should be lowerCamelCase."
        subterm »subterm_snake_case« = .;
    }
}

// no_semantic_warning "Names of enums should be UpperCamelCase."
enum »EnumUppercase1«
// semantic_warning "Names of enums should be UpperCamelCase."
enum »enumLowercase«
// semantic_warning "Names of enums should be UpperCamelCase."
enum »_enumUnderscore«
// semantic_warning "Names of enums should be UpperCamelCase."
enum »Enum_Snake_Case« {
    // no_semantic_warning "Names of enum variants should be UpperCamelCase."
    »EnumVariantUppercase1«
    // semantic_warning "Names of enum variants should be UpperCamelCase."
    »enumVariantLowercase«
    // semantic_warning "Names of enum variants should be UpperCamelCase."
    »_enumVariantUnderscore«
    // semantic_warning "Names of enum variants should be UpperCamelCase."
    »Enum_Variant_Snake_Case«<
        // no_semantic_warning "Names of type parameters should be UpperCamelCase."
        »TypeParameterUppercase«,
        // semantic_warning "Names of type parameters should be UpperCamelCase."
        »typeParameterLowercase1«,
        // semantic_warning "Names of type parameters should be UpperCamelCase."
        »_typeParameterUnderscore«,    
        // semantic_warning "Names of type parameters should be UpperCamelCase."
        »typeParameter_snake_case«
    >
}

// semantic_warning "Names of functions should be lowerCamelCase."
fun »FunctionUppercase«()
// no_semantic_warning "Names of functions should be lowerCamelCase."
fun »functionLowercase1«()
// semantic_warning "Names of functions should be lowerCamelCase."
fun »_functionUnderscore«()
// semantic_warning "Names of functions should be lowerCamelCase."
fun »function_snake_case«(
    // semantic_warning "Names of parameters should be lowerCamelCase."
    »ParameterUppercase«: Int,
    // no_semantic_warning "Names of parameters should be lowerCamelCase."
    »parameterLowercase1«: Int,
    // semantic_warning "Names of parameters should be lowerCamelCase."
    »_parameterUnderscore«: Int,
    // semantic_warning "Names of parameters should be lowerCamelCase."
    »parameter_snake_case«: Int
) -> (
    // semantic_warning "Names of results should be lowerCamelCase."
    »ResultUppercase«: Int,
    // no_semantic_warning "Names of results should be lowerCamelCase."
    »resultLowercase1«: Int,
    // semantic_warning "Names of results should be lowerCamelCase."
    »_resultUnderscore«: Int,
    // semantic_warning "Names of results should be lowerCamelCase."
    »result_snake_case«: Int
)

// semantic_warning "Names of steps should be lowerCamelCase."
step »StepUppercase«() {}
// no_semantic_warning "Names of steps should be lowerCamelCase."
step »stepLowercase1«() {}
// semantic_warning "Names of steps should be lowerCamelCase."
step »_stepUnderscore«() {}
// semantic_warning "Names of steps should be lowerCamelCase."
step »step_snake_case«() {}

// semantic_warning "Names of workflows should be lowerCamelCase."
workflow »WorkflowUppercase« {}
// no_semantic_warning "Names of workflows should be lowerCamelCase."
workflow »workflowLowercase1« {}
// semantic_warning "Names of workflows should be lowerCamelCase."
workflow »_workflowUnderscore« {}
// semantic_warning "Names of workflows should be lowerCamelCase."
workflow »workflow_snake_case« {
    () {
        // semantic_warning "Names of lambda results should be lowerCamelCase."
        yield »LambdaResultUppercase« = 1;
        // no_semantic_warning "Names of lambda results should be lowerCamelCase."
        yield »lambdaResultLowercase1« = 1;
        // semantic_warning "Names of lambda results should be lowerCamelCase."
        yield »_lambdaResultUnderscore« = 1;    
        // semantic_warning "Names of lambda results should be lowerCamelCase."
        yield »lambdaResult_snake_case« = 1;
    };

    // semantic_warning "Names of placeholders should be lowerCamelCase."
    val »PlaceholderUppercase« = 1;
    // no_semantic_warning "Names of placeholders should be lowerCamelCase."
    val »placeholderLowercase1« = 1;
    // semantic_warning "Names of placeholders should be lowerCamelCase."
    val »_placeholderUnderscore« = 1;    
    // semantic_warning "Names of placeholders should be lowerCamelCase."
    val »placeholder_snake_case« = 1;
}
