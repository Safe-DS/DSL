package tests.validation.expressions.typeArgumentList.isUnnecessaryNamedType

class ClassWithoutTypeParameters()
class ClassWithTypeParameters<T>()

enum Enum {
    VariantWithoutTypeParameters
    VariantWithTypeParameters<T>
}

fun functionWithoutTypeParameters()
fun functionWithTypeParameters<T>()

fun myFunction(
    // semantic_info "Unnecessary type argument list."
    a: ClassWithoutTypeParameters»<>«,
    // semantic_info "Unnecessary type argument list."
    b: ClassWithoutTypeParameters»<Int>«,
    // no_semantic_info "Unnecessary type argument list."
    c: ClassWithTypeParameters»<>«,
    // no_semantic_info "Unnecessary type argument list."
    d: ClassWithTypeParameters»<Int>«,

    // semantic_info "Unnecessary type argument list."
    e: Enum.VariantWithoutTypeParameters»<>«,
    // semantic_info "Unnecessary type argument list."
    f: Enum.VariantWithoutTypeParameters»<Int>«,
    // no_semantic_info "Unnecessary type argument list."
    g: Enum.VariantWithTypeParameters»<>«,
    // no_semantic_info "Unnecessary type argument list."
    h: Enum.VariantWithTypeParameters»<Int>«,

    // no_semantic_info "Unnecessary type argument list."
    i: functionWithoutTypeParameters»<>«,
    // no_semantic_info "Unnecessary type argument list."
    j: functionWithoutTypeParameters»<Int>«,
    // no_semantic_info "Unnecessary type argument list."
    k: functionWithTypeParameters»<>«,
    // no_semantic_info "Unnecessary type argument list."
    l: functionWithTypeParameters»<Int>«,

    // no_semantic_info "Unnecessary type argument list."
    m: Unresolved»<>«,
    // no_semantic_info "Unnecessary type argument list."
    n: Unresolved»<Int>«,
)
