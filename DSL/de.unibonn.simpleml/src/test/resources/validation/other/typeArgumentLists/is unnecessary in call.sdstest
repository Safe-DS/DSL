package tests.validation.expressions.typeArgumentList.isUnnecessaryInCall

class ClassWithoutTypeParameters()
class ClassWithTypeParameters<T>()

enum Enum {
    VariantWithoutTypeParameters
    VariantWithTypeParameters<T>
}

fun functionWithoutTypeParameters()
fun functionWithTypeParameters<T>()

workflow myWorkflow {
    // semantic_info "Unnecessary type argument list."
    ClassWithoutTypeParameters»<>«();
    // semantic_info "Unnecessary type argument list."
    ClassWithoutTypeParameters»<Int>«();
    // no_semantic_info "Unnecessary type argument list."
    ClassWithTypeParameters»<>«();
    // no_semantic_info "Unnecessary type argument list."
    ClassWithTypeParameters»<Int>«();

    // semantic_info "Unnecessary type argument list."
    Enum.VariantWithoutTypeParameters»<>«();
    // semantic_info "Unnecessary type argument list."
    Enum.VariantWithoutTypeParameters»<Int>«();
    // no_semantic_info "Unnecessary type argument list."
    Enum.VariantWithTypeParameters»<>«();
    // no_semantic_info "Unnecessary type argument list."
    Enum.VariantWithTypeParameters»<Int>«();

    // semantic_info "Unnecessary type argument list."
    functionWithoutTypeParameters»<>«();
    // semantic_info "Unnecessary type argument list."
    functionWithoutTypeParameters»<Int>«();
    // no_semantic_info "Unnecessary type argument list."
    functionWithTypeParameters»<>«();
    // no_semantic_info "Unnecessary type argument list."
    functionWithTypeParameters»<Int>«();

    // no_semantic_info "Unnecessary type argument list."
    unresolved»<>«();
    // no_semantic_info "Unnecessary type argument list."
    unresolved»<Int>«();
}
