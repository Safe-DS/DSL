package tests.validation.typeChecking.prefixOperations

step f(vararg a: Int) {

    // no_semantic_error "The operand of a logical negation must be an instance of the class 'Boolean'."
    not »true«;    
    // no_semantic_error "The operand of a logical negation must be an instance of the class 'Boolean'."
    not »false«;
    // semantic_error "The operand of a logical negation must be an instance of the class 'Boolean'."
    not »i()«;
    // semantic_error "The operand of a logical negation must be an instance of the class 'Boolean'."
    not »0«;    
    // semantic_error "The operand of a logical negation must be an instance of the class 'Boolean'."
    not »a«;
    // no_semantic_error "The operand of a logical negation must be an instance of the class 'Boolean'."
    not »unresolved«;    
    // no_semantic_error "The operand of a logical negation must be an instance of the class 'Boolean'."
    not »C.unresolved«;

    // no_semantic_error "The operand of an arithmetic negation must be an instance of the class 'Float' or the class 'Int'."
    -»0.0«;
    // no_semantic_error "The operand of an arithmetic negation must be an instance of the class 'Float' or the class 'Int'."
    -»0«;
    // semantic_error "The operand of an arithmetic negation must be an instance of the class 'Float' or the class 'Int'."
    -»h()«;
    // semantic_error "The operand of an arithmetic negation must be an instance of the class 'Float' or the class 'Int'."
    -»""«;    
    // semantic_error "The operand of an arithmetic negation must be an instance of the class 'Float' or the class 'Int'."
    -»a«;
    // no_semantic_error "The operand of an arithmetic negation must be an instance of the class 'Float' or the class 'Int'."
    -»unresolved«;    
    // no_semantic_error "The operand of an arithmetic negation must be an instance of the class 'Float' or the class 'Int'."
    -»C.unresolved«;
}

fun g()
fun h() -> index: Int?
fun i() -> isTrue: Boolean?
