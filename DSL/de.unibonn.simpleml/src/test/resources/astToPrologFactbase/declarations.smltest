package tests.astToPrologFactbase.declarations

import myPackage.MyClass
import myPackage.MyOtherClass as Class
import myPackage.*


// Annotations ---------------------------------------------------------------------------------------------------------
annotation MySimpleAnnotation

@MySimpleAnnotation
annotation MyComplexAnnotation(
    a: Int,
    b: Int
) where T1 super Number, T2 sub Number


// Classes, Attributes & Type parameters -------------------------------------------------------------------------------
class MySimpleClass

@MySimpleAnnotation
class MyComplexClass
    <MY_SIMPLE_TYPE_PARAMETER, @AnnotationUse out MY_COMPLEX_TYPE_PARAMETER>
    (a, b)
    sub SuperClass1, SuperClass2
    where T1 super Number, T2 sub Number
{
    attr mySimpleAttribute
    @AnnotationUse static attr myComplexAttribute: Int

    class MyClass
    enum MyEnum
    static fun myStaticMethod()
}


// Enums & Enum variants -----------------------------------------------------------------------------------------------
enum MySimpleEnum

@MySimpleAnnotation
enum MyComplexEnum {
    MySimpleVariant
    @AnnotationUse MyComplexVariant<T1, T2>(a, b) where T1 super Number, T2 sub Number
}


// Functions, Parameters & Results -------------------------------------------------------------------------------------
fun mySimpleFunction()

@MySimpleAnnotation
fun myComplexFunction
    <T1, T2>
    (mySimpleParameter, @AnnotationUse vararg myComplexParameter: Int = 3)
    -> (mySimpleResult, @AnnotationUse myComplexResult: Int)
    where T1 super Number, T2 sub Number


// Steps ---------------------------------------------------------------------------------------------------------------
step mySimpleStep() {}

@MySimpleAnnotation
private step myComplexStep (a, b) -> (a, b) {
    val a = 1;
}


// Workflows -----------------------------------------------------------------------------------------------------------
workflow mySimpleWorkflow {}

@MySimpleAnnotation
workflow myComplexWorkflow {
    val a = 1;
}
