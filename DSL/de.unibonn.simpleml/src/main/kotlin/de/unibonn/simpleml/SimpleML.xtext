grammar de.unibonn.simpleml.SimpleML hidden (
    WS,
    SL_COMMENT,
    ML_COMMENT,
    TEST_MARKER
)
import 'http://www.eclipse.org/emf/2002/Ecore' as ecore
import 'http://www.unibonn.de/simpleml/SimpleML'



/**********************************************************************************************************************
 * Declarations
 **********************************************************************************************************************/

// Compilations Units --------------------------------------------------------------------------------------------------

SmlCompilationUnit
    : {SmlCompilationUnit}
      =>annotationCalls+=SmlAnnotationCall* // Annotation calls before a package declaration belong to the compilation unit
      ('package' name=QualifiedName)?
      imports+=SmlImport*
      members+=SmlCompilationUnitMember*
    ;

SmlCompilationUnitMember returns SmlAbstractAnnotatedObject
    : {SmlAnnotationCallList} annotationCalls+=SmlAnnotationCall*

    ( {SmlAnnotation.annotationCallList=current}
          'annotation' name=ID
          parameterList=SmlParameterList?
          constraintList=SmlConstraintList?

    | {SmlClass.annotationCallList=current}
          'class' name=ID
          typeParameterList=SmlTypeParameterList?
          parameterList=SmlParameterList?
          parentTypeList=SmlParentTypeList?
          constraintList=SmlConstraintList?
          body=SmlClassBody?

    | {SmlEnum.annotationCallList=current}
          'enum' name=ID
          body=SmlEnumBody?

    | {SmlFunction.annotationCallList=current}
          'fun' name=ID
          typeParameterList=SmlTypeParameterList?
          parameterList=SmlParameterList
          resultList=SmlResultList?
          constraintList=SmlConstraintList?

    | {SmlStep.annotationCallList=current}
          visibility=('internal'|'private')?
          'step' name=ID
          parameterList=SmlParameterList
          resultList=SmlResultList?
          body=SmlBlock

    | {SmlWorkflow.annotationCallList=current}
          'workflow' name=ID
          body=SmlBlock
    )
    ;

SmlImport
    : 'import' importedNamespace=QualifiedNameWithWildcard alias=SmlImportAlias?
    ;

SmlImportAlias
    : 'as' name=ID
    ;


// Annotations ---------------------------------------------------------------------------------------------------------

SmlAnnotationCall
    : '@' annotation=[SmlAnnotation] argumentList=SmlAnnotationCallArgumentList?
    ;

SmlAnnotationCallArgumentList returns SmlArgumentList
    : {SmlArgumentList} '(' (arguments+=SmlAnnotationCallArgument (',' arguments+=SmlAnnotationCallArgument)* ','?)? ')'
    ;

SmlAnnotationCallArgument returns SmlArgument
    : (parameter=[SmlParameter] '=')? value=SmlExpression
    ;


// Classes -------------------------------------------------------------------------------------------------------------

SmlParentTypeList
    : 'sub' parentTypes+=SmlParentType (',' parentTypes+=SmlParentType)* ','?
    ;

SmlParentType returns SmlAbstractType
    : SmlParentPrimaryType =>({SmlMemberType.receiver=current} '.' member=SmlNamedType)*
    ;

SmlParentPrimaryType returns SmlAbstractType
    : SmlNamedType
    | SmlParentParenthesizedType
    ;

SmlParentParenthesizedType returns SmlParenthesizedType
    : '(' type=SmlParentType ')'
    ;

SmlClassBody
    : {SmlClassBody} '{' members+=SmlClassMember* '}'
    ;

SmlClassMember returns SmlAbstractObject
    : SmlAnnotatedClassMember
    | SmlProtocol
    ;

SmlAnnotatedClassMember returns SmlAbstractAnnotatedObject
    : {SmlAnnotationCallList} annotationCalls+=SmlAnnotationCall*

    ( {SmlAttribute.annotationCallList=current}
          static?='static'?
          'attr' name=ID (':' type=SmlType)?

    | {SmlClass.annotationCallList=current}
          'class' name=ID
          typeParameterList=SmlTypeParameterList?
          parameterList=SmlParameterList?
          parentTypeList=SmlParentTypeList?
          constraintList=SmlConstraintList?
          body=SmlClassBody?

    | {SmlEnum.annotationCallList=current}
          'enum' name=ID
          body=SmlEnumBody?

    | {SmlFunction.annotationCallList=current}
          static?='static'?
          'fun' name=ID
          typeParameterList=SmlTypeParameterList?
          parameterList=SmlParameterList
          resultList=SmlResultList?
          constraintList=SmlConstraintList?
    )
    ;

SmlProtocol
    : 'protocol' body=SmlProtocolBody
    ;

SmlProtocolBody
    : {SmlProtocolBody}
      '{'
      subtermList=SmlProtocolSubtermList?
      term=SmlProtocolTerm?
      '}'
    ;

SmlProtocolSubtermList
    : subterms+=SmlProtocolSubterm+
    ;

SmlProtocolSubterm
    : 'subterm' name=ID '=' term=SmlProtocolTerm ';'
    ;

SmlProtocolTerm returns SmlAbstractProtocolTerm
    : SmlProtocolAlternative
    ;

SmlProtocolAlternative returns SmlAbstractProtocolTerm
    : SmlProtocolSequence
    (
        {SmlProtocolAlternative.terms+=current} '|' terms+=SmlProtocolSequence
        ('|' terms+=SmlProtocolSequence)*
    )?
    ;

SmlProtocolSequence returns SmlAbstractProtocolTerm
    : SmlProtocolQuantifiedTerm
    (
        {SmlProtocolSequence.terms+=current} terms+=SmlProtocolQuantifiedTerm
        (terms+=SmlProtocolQuantifiedTerm)*
    )?
    ;

SmlProtocolQuantifiedTerm returns SmlAbstractProtocolTerm
    : SmlProtocolPrimaryElement
      ({SmlProtocolQuantifiedTerm.term=current} quantifier=SmlProtocolQuantifier)?
    ;

SmlProtocolQuantifier
    : '?'
    | '*'
    | '+'
    ;

SmlProtocolPrimaryElement returns SmlAbstractProtocolTerm
    : SmlProtocolComplement
    | SmlProtocolReference
    | SmlProtocolTokenClass
    | SmlProtocolParenthesizedTerm
    ;

SmlProtocolComplement
    : {SmlProtocolComplement}
      '['
      universe=SmlProtocolTokenClass?
      '^'
      referenceList=SmlProtocolReferenceList?
      ']'
    ;

SmlProtocolReferenceList
    : references+=SmlProtocolReference+
    ;

SmlProtocolReference
    : token=[SmlAbstractProtocolToken]
    ;

SmlProtocolTokenClass
    : value=SmlProtocolTokenClassValue
    ;

SmlProtocolTokenClassValue
    : '.'
    | '\\a'
    | '\\f'
    ;

SmlProtocolParenthesizedTerm
    : '(' term=SmlProtocolTerm ')'
    ;


// Enums ---------------------------------------------------------------------------------------------------------------

SmlEnumBody
    : {SmlEnumBody} '{' variants+=SmlEnumVariant* '}'
    ;

SmlEnumVariant
    : annotationCalls+=SmlAnnotationCall*
      name=ID
      typeParameterList=SmlTypeParameterList?
      parameterList=SmlParameterList?
      constraintList=SmlConstraintList?
    ;


// Parameters ----------------------------------------------------------------------------------------------------------

SmlParameterList
    : {SmlParameterList} '(' (parameters+=SmlParameter (',' parameters+=SmlParameter)* ','?)? ')'
    ;

// Used while parsing lambdas to avoid left-recursion. Can be treated like a normal parameter list.
SmlLambdaParameterList
    : {SmlLambdaParameterList} '(' (parameters+=SmlParameter (',' parameters+=SmlParameter)* ','?)? ')'
    ;

SmlParameter
    : annotationCalls+=SmlAnnotationCall*
      variadic?='vararg'?
      name=ID (':' type=SmlType)?
      ('=' defaultValue=SmlExpression)?
    ;


// Results -------------------------------------------------------------------------------------------------------------

SmlResultList
    : {SmlResultList} '->' results+=SmlResult // If there is exactly one result we need no parentheses
    | {SmlResultList} '->' '(' (results+=SmlResult (',' results+=SmlResult)* ','?)? ')'
    ;

SmlResult
    : annotationCalls+=SmlAnnotationCall*
      name=ID (':' type=SmlType)?
    ;



/**********************************************************************************************************************
 * Statements
 **********************************************************************************************************************/

// Functions and workflows --------------------------------------------------------------------------------------------

SmlBlock
    : {SmlBlock} '{' statements+=SmlStatement* '}'
    ;

SmlStatement returns SmlAbstractStatement
    : SmlAssignment
    | SmlExpressionStatement
    ;

SmlAssignment
    : assigneeList=SmlAssigneeList '=' expression=SmlExpression ';'
    ;

SmlAssigneeList
    : assignees+=SmlAssignee (',' assignees+=SmlAssignee)* ','?
    ;

SmlAssignee returns SmlAbstractAssignee
    : {SmlPlaceholder} 'val' name=ID
    | {SmlWildcard}    '_'
    | {SmlYield}       'yield' result=[SmlResult]
    ;

SmlExpressionStatement
    : expression=SmlExpression ';'
    ;

/**********************************************************************************************************************
 * Expressions
 **********************************************************************************************************************/

SmlExpression returns SmlAbstractExpression
    : SmlLambda
    | SmlOrExpression
    ;

SmlLambda returns SmlAbstractExpression
    : SmlLambdaParameterList
    ( {SmlBlockLambda.parameterList=current}      body=SmlBlockLambdaBlock
    | {SmlExpressionLambda.parameterList=current} '->' result=SmlExpression
    )
    ;

SmlBlockLambdaBlock returns SmlBlock
    : {SmlBlock} '{' statements+=SmlBlockLambdaStatement* '}'
    ;

SmlBlockLambdaStatement returns SmlAbstractStatement
    : SmlBlockLambdaAssignment
    | SmlExpressionStatement
    ;

SmlBlockLambdaAssignment returns SmlAssignment
    : assigneeList=SmlBlockLambdaAssigneeList '=' expression=SmlExpression ';'
    ;

SmlBlockLambdaAssigneeList returns SmlAssigneeList
    : assignees+=SmlBlockLambdaAssignee (',' assignees+=SmlBlockLambdaAssignee)* ','?
    ;

SmlBlockLambdaAssignee returns SmlAbstractAssignee
    : {SmlWildcard} '_'
    | {SmlPlaceholder} 'val' name=ID
    | {SmlBlockLambdaResult} 'yield' name=ID
    ;

SmlOrExpression returns SmlAbstractExpression
    : SmlAndExpression ({SmlInfixOperation.leftOperand=current} operator='or' rightOperand=SmlAndExpression)*
    ;

SmlAndExpression returns SmlAbstractExpression
    : SmlNotExpression ({SmlInfixOperation.leftOperand=current} operator='and' rightOperand=SmlNotExpression)*
    ;

SmlNotExpression returns SmlAbstractExpression
    : {SmlPrefixOperation} operator='not' operand=SmlNotExpression
    | SmlEqualityExpression
    ;

SmlEqualityExpression returns SmlAbstractExpression
    : SmlComparisonExpression ({SmlInfixOperation.leftOperand=current} operator=SmlEqualityOperator rightOperand=SmlComparisonExpression)?
    ;

SmlEqualityOperator
    : '=='
    | '!='
    | '==='
    | '!=='
    ;

SmlComparisonExpression returns SmlAbstractExpression
    : SmlAdditiveExpression ({SmlInfixOperation.leftOperand=current} operator=SmlComparisonOperator rightOperand=SmlAdditiveExpression)?
    ;

SmlComparisonOperator
    : '<'
    | '<=' 
    | '>='
    | '>'
    ;

SmlAdditiveExpression returns SmlAbstractExpression
    : SmlMultiplicativeExpression ({SmlInfixOperation.leftOperand=current} operator=SmlAdditiveOperator rightOperand=SmlMultiplicativeExpression)*
    ;

SmlAdditiveOperator
    : '+'
    | '-'
    ;

SmlMultiplicativeExpression returns SmlAbstractExpression
    : SmlElvisExpression ({SmlInfixOperation.leftOperand=current} operator=SmlMultiplicativeOperator rightOperand=SmlElvisExpression)*
    ;

SmlMultiplicativeOperator
    : '*'
    | '/'
    ;

SmlElvisExpression returns SmlAbstractExpression
    : SmlUnaryOperation ({SmlInfixOperation.leftOperand=current} operator='?:' rightOperand=SmlUnaryOperation)*
    ;

SmlUnaryOperation returns SmlAbstractExpression
    : {SmlPrefixOperation} operator='-' operand=SmlUnaryOperation
    | SmlChainedExpression
    ;

SmlChainedExpression returns SmlAbstractExpression
    : SmlPrimaryExpression =>(
          {SmlCall.receiver=current}          typeArgumentList=SmlTypeArgumentList? argumentList=SmlCallArgumentList
        | {SmlIndexedAccess.receiver=current} '[' index=SmlExpression ']'
        | {SmlMemberAccess.receiver=current}  (nullSafe?='?')? '.' member=SmlReference
    )*
    ;

SmlCallArgumentList returns SmlArgumentList
    : {SmlArgumentList} '(' (arguments+=SmlCallArgument (',' arguments+=SmlCallArgument)* ','?)? ')'
    ;

SmlCallArgument returns SmlArgument
    : (parameter=[SmlParameter] '=')? value=SmlExpression
    ;

SmlPrimaryExpression returns SmlAbstractExpression
    : SmlLiteral
    | SmlParenthesizedExpression
    | SmlReference
    | SmlTemplateString
    ;

SmlLiteral returns SmlAbstractLiteral
    : SmlBoolean
    | SmlFloat
    | SmlInt
    | SmlNull
    | SmlString
    ;    

SmlBoolean
    : true?='true'
    | {SmlBoolean} 'false'
    ;

SmlFloat
    : value=FLOAT
    ;

SmlInt
    : value=INT
    ;

SmlNull
    : {SmlNull} 'null'
    ;

SmlString
    : value=STRING
    ;

SmlReference
    : declaration=[SmlAbstractDeclaration]
    ;

SmlParenthesizedExpression
    : '(' expression=SmlExpression ')'
    ;


// Template strings ----------------------------------------------------------------------------------------------------

SmlTemplateString
    : expressions+=SmlTemplateStringStart expressions+=SmlExpression?
      (expressions+=SmlTemplateStringInner expressions+=SmlExpression?)*
      expressions+=SmlTemplateStringEnd
    ;

SmlTemplateStringStart
    : value=TEMPLATE_STRING_START
    ;

SmlTemplateStringInner
    : value=TEMPLATE_STRING_INNER
    ;

SmlTemplateStringEnd
    : value=TEMPLATE_STRING_END
    ;



/**********************************************************************************************************************
 * Names
 **********************************************************************************************************************/

QualifiedName
    : ID ('.' ID)*
    ;

QualifiedNameWithWildcard
    : QualifiedName ('.' '*')?
    ;



/**********************************************************************************************************************
 * Types
 **********************************************************************************************************************/

SmlType returns SmlAbstractType
    : SmlPrimaryType =>({SmlMemberType.receiver=current} '.' member=SmlNamedType)*
    ;

SmlPrimaryType returns SmlAbstractType
    : SmlCallableType
    | SmlNamedType
    | SmlUnionType
    | SmlParenthesizedType
    ;

SmlParenthesizedType
    : '(' type=SmlType ')'
    ;

// Callable Types ------------------------------------------------------------------------------------------------------

SmlCallableType
    : parameterList=SmlParameterList
      resultList=SmlResultList
    ;


// Named Types ---------------------------------------------------------------------------------------------------------

SmlNamedType
    : declaration=[SmlAbstractNamedTypeDeclaration]
      typeArgumentList=SmlTypeArgumentList?
      (nullable?='?')?
    ;


// Union Types ---------------------------------------------------------------------------------------------------------

SmlUnionType
    : 'union' typeArgumentList=SmlUnionTypeArgumentList
    ;

SmlUnionTypeArgumentList returns SmlTypeArgumentList
    : {SmlTypeArgumentList} ('<' (typeArguments+=SmlUnionTypeArgument (',' typeArguments+=SmlUnionTypeArgument)* ','?)? '>')
    ;

SmlUnionTypeArgument returns SmlTypeArgument
    : value=SmlUnionTypeArgumentValue
    ;

SmlUnionTypeArgumentValue returns SmlAbstractTypeArgumentValue
    : {SmlTypeProjection} type=SmlType
    ;


// Generics ------------------------------------------------------------------------------------------------------------

SmlTypeParameterList
    : {SmlTypeParameterList} ('<' (typeParameters+=SmlTypeParameter (',' typeParameters+=SmlTypeParameter)* ','?)? '>')
    ;

SmlTypeParameter
    : annotationCalls+=SmlAnnotationCall*
      variance=SmlTypeParameterVariance?
      name=ID
    ;

SmlTypeParameterVariance
    : 'in'
    | 'out'
    ;

SmlConstraintList
    : 'where' constraints+=SmlTypeParameterConstraint (',' constraints+=SmlTypeParameterConstraint)* ','?
    ;

SmlTypeParameterConstraint
    : leftOperand=[SmlTypeParameter] operator=SmlTypeParameterConstraintOperator rightOperand=SmlType
    ;

SmlTypeParameterConstraintOperator
    : 'sub'
    | 'super'
    ;

SmlTypeArgumentList
    : {SmlTypeArgumentList} '<' (typeArguments+=SmlTypeArgument (',' typeArguments+=SmlTypeArgument)* ','?)? '>'
    ;

SmlTypeArgument
    : (typeParameter=[SmlTypeParameter] '=')? value=SmlTypeArgumentValue
    ;

SmlTypeArgumentValue returns SmlAbstractTypeArgumentValue
    : {SmlStarProjection} '*'
    | {SmlTypeProjection} variance=SmlTypeParameterVariance? type=SmlType
    ;



/**********************************************************************************************************************
 * Terminals
 **********************************************************************************************************************/

terminal FLOAT returns ecore::EDouble
    : DECIMAL_DIGIT+ '.' DECIMAL_DIGIT+ FLOAT_EXPONENT?
    | DECIMAL_DIGIT+ FLOAT_EXPONENT
    ;

terminal fragment DECIMAL_DIGIT
    : '0'..'9'
    ;

terminal fragment FLOAT_EXPONENT
    : ('e'|'E') ('+'|'-')? DECIMAL_DIGIT+
    ;

terminal ID
    : IDENTIFIER
    | '`' IDENTIFIER '`'
    ;

terminal fragment IDENTIFIER
    : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
    ;

terminal INT returns ecore::EInt
    : DECIMAL_DIGIT+
    ;

terminal ML_COMMENT
    : '/*' -> '*/'
    ;

terminal SL_COMMENT
    : '//' !('\r'|'\n')* ('\r'? '\n')?
    ;

terminal STRING returns ecore::EString
    : STRING_START
      STRING_TEXT*
      STRING_END
    ;

terminal fragment STRING_START
    : STRING_DELIMITER
    ;

terminal fragment STRING_END
    : '{'? STRING_DELIMITER
    ;

terminal fragment STRING_DELIMITER
    : '"'
    ;

terminal fragment STRING_TEXT
    : '{'? ESCAPE_SEQUENCE
    | '{'? !('\\'|STRING_DELIMITER|'{')
    ;

terminal fragment ESCAPE_SEQUENCE
    : '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\'|'{' */
    ;

terminal fragment TEMPLATE_EXPRESSION_START
    : '{{'
    ;

terminal fragment TEMPLATE_EXPRESSION_END
    : '}}'
    ;

terminal TEMPLATE_STRING_START
    : STRING_START
      STRING_TEXT*
      TEMPLATE_EXPRESSION_START
    ;

terminal TEMPLATE_STRING_INNER
    : TEMPLATE_EXPRESSION_END
      STRING_TEXT*
      TEMPLATE_EXPRESSION_START
    ;

terminal TEMPLATE_STRING_END
    : TEMPLATE_EXPRESSION_END
      STRING_TEXT*
      STRING_END
    ;

terminal TEST_MARKER
    : '»'
    | '«'
    ;

terminal WS
    : (' '|'\t'|'\r'|'\n')+
    ;
