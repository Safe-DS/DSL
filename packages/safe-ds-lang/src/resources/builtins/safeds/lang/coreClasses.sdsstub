package safeds.lang

/**
 * The common superclass of all classes.
 */
class Any {

    /**
     * Return a string representation of the object.
     *
     * @example
     * pipeline example {
     *     val string = 1.toString(); // "1"
     * }
     */
    @Pure
    @PythonMacro("str($this)")
    fun toString() -> string: String
}

/**
 * The common subclass of all classes.
 */
class Nothing

/**
 * A truth value.
 *
 * @example
 * pipeline example {
 *     val boolean = true;
 * }
 *
 * @example
 * pipeline example {
 *     val boolean = false;
 * }
 */
class Boolean

/**
 * A number.
 */
class Number

/**
 * An integer.
 *
 * @example
 * pipeline example {
 *     val int = 1;
 * }
 */
class Int sub Number {

    /**
     * Convert this integer to a floating-point number.
     *
     * @example
     * pipeline example {
     *     val float = 1.toFloat(); // 1.0
     * }
     */
    @Pure
    @PythonMacro("float($this)")
    fun toFloat() -> float: Float
}

/**
 * A floating-point number.
 *
 * @example
 * pipeline example {
 *     val float = 1.0;
 * }
 */
class Float sub Number {

    /**
     * Convert this floating-point number to an integer by truncating the fractional part.
     *
     * @example
     * pipeline example {
     *     val int = 1.0.toInt(); // 1
     * }
     */
    @Pure
    @PythonMacro("int($this)")
    fun toInt() -> int: Int
}

/**
 * A list of elements.
 *
 * @example
 * pipeline example {
 *     val list = [1, 2, 3];
 * }
 */
class List<out E> {

    /**
     * Join the elements of the list into a string using the separator.
     *
     * @example
     * pipeline example {
     *     val string = [1, 2, 3].join(); // "1, 2, 3"
     * }
     *
     * @example
     * pipeline example {
     *     val string = [1, 2, 3].join("-"); // "1-2-3"
     * }
     */
    @Pure
    @PythonMacro("$separator.join($this)")
    fun join(separator: String = ", ") -> string: String

    /**
     * Return the slice of the list starting at the start index up to but excluding the end index.
     *
     * @param start The start index (inclusive).
     * @param end The end index (exclusive). Negative indices count from the end of the list.
     *
     * @example
     * pipeline example {
     *     val slice = [1, 2, 3].slice(1, 3); // [2, 3]
     * }
     */
    @Pure
    @PythonMacro("$this[$start:$end]")
    fun slice(start: Int = 0, end: Int = -1) -> slice: List<E>

    /**
     * Return the number of elements in the list.
     *
     * @example
     * pipeline example {
     *     val size = [1, 2, 3].size(); // 3
     * }
     */
    @Pure
    @PythonMacro("len($this)")
    fun size() -> size: Int
}

/**
 * A map of keys to values.
 *
 * @example
 * pipeline example {
 *     val map = {
 *         "a": 1,
 *         "b": 2,
 *         "c": 3
 *     };
 * }
 */
class Map<K, out V> {

    /**
     * Return the number of entries in the map.
     *
     * @example
     * pipeline example {
     *     val map = {
     *         "a": 1,
     *         "b": 2,
     *         "c": 3
     *     };
     *     val size = map.size(); // 3
     * }
     */
    @Pure
    @PythonMacro("len($this)")
    fun size() -> size: Int

    /**
     * Return the keys of the map.
     *
     * @example
     * pipeline example {
     *     val map = {
     *         "a": 1,
     *         "b": 2,
     *         "c": 3
     *     };
     *     val keys = map.keys(); // ["a", "b", "c"]
     * }
     */
    @Pure
    @PythonMacro("list($this.keys())")
    fun keys() -> keys: List<K>

    /**
     * Return the values of the map.
     *
     * @example
     * pipeline example {
     *     val map = {
     *         "a": 1,
     *         "b": 2,
     *         "c": 3
     *     };
     *     val values = map.values(); // [1, 2, 3]
     * }
     */
    @Pure
    @PythonMacro("list($this.values())")
    fun values() -> values: List<V>
}

/**
 * Some text.
 *
 * @example
 * pipeline example {
 *     val string = "Hello, world!";
 * }
 */
class String {

    /**
     * Return the number of characters in the string.
     *
     * @example
     * pipeline example {
     *     val length = "Hello, world!".length(); // 13
     * }
     */
    @Pure
    @PythonMacro("len($this)")
    fun length() -> length: Int

    /**
     * Check if the string contains the substring.
     *
     * @example
     * pipeline example {
     *     val contains = "Hello, world!".contains("world!"); // true
     * }
     */
    @Pure
    @PythonMacro("$this.__contains__($substring)")
    fun contains(substring: String) -> boolean: Boolean

    /**
     * Check if the string ends with the suffix.
     *
     * @example
     * pipeline example {
     *     val endsWith = "Hello, world!".endsWith("world!"); // true
     * }
     */
    @Pure
    @PythonMacro("$this.endswith($suffix)")
    fun endsWith(suffix: String) -> boolean: Boolean

    /**
     * Check if the string starts with the prefix.
     *
     * @example
     * pipeline example {
     *     val startsWith = "Hello, world!".startsWith("Hello"); // true
     * }
     */
    @Pure
    @PythonMacro("$this.startswith($prefix)")
    fun startsWith(prefix: String) -> boolean: Boolean

    /**
     * Return the substring of the string starting at the start index up to but excluding the end index.
     *
     * @param start The start index (inclusive).
     * @param end The end index (exclusive).
     *
     * @example
     * pipeline example {
     *     val substring = "Hello, world!".substring(7, 12); // "world"
     * }
     */
    @Pure
    @PythonMacro("$this[$start:$end]")
    fun substring(start: Int = 0, end: Int = -1) -> substring: String

    /**
     * Split the string into parts using the separator.
     *
     * @example
     * pipeline example {
     *     val parts = "a,b,c".split(","); // ["a", "b", "c"]
     * }
     */
    @Pure
    @PythonMacro("$this.split($separator)")
    fun split(separator: String) -> parts: List<String>

    /**
     * Parse the string to a floating-point number.
     *
     * @example
     * pipeline example {
     *     val float = "1.0".toFloat(); // 1.0
     * }
     */
    @Pure
    @PythonMacro("float($this)")
    fun toFloat() -> float: Float

    /**
     * Parse the string to an integer.
     *
     * @param base The base of the integer.
     *
     * @example
     * pipeline example {
     *     val int = "10".toInt(); // 10
     * }
     *
     * @example
     * pipeline example {
     *     val int = "10".toInt(base = 2); // 2
     * }
     */
    @Pure
    @PythonMacro("int($this, $base)")
    fun toInt(base: Int = 10) -> int: Int
}

/*
str.casefold()

    Return a casefolded copy of the string. Casefolded strings may be used for caseless matching.

    Casefolding is similar to lowercasing but more aggressive because it is intended to remove all case distinctions in a string. For example, the German lowercase letter 'ß' is equivalent to "ss". Since it is already lowercase, lower() would do nothing to 'ß'; casefold() converts it to "ss".

    The casefolding algorithm is described in section 3.13 of the Unicode Standard.

    New in version 3.3.

str.find(sub[, start[, end]])

    Return the lowest index in the string where substring sub is found, such that sub is contained in the slice s[start:end]. Optional arguments start and end are interpreted as in slice notation. Return -1 if sub is not found.

    Note

    The find() method should be used only if you need to know the position of sub. To check if sub is a substring or not, use the in operator:
    >>>

    >>> 'Py' in 'Python'
    True

str.index(sub[, start[, end]])

    Like find(), but raise ValueError when the substring is not found.

str.ljust(width[, fillchar])

    Return the string left justified in a string of length width. Padding is done using the specified fillchar (default is a space). The original string is returned if width is less than or equal to len(s).

str.lower()

    Return a copy of the string with all the cased characters [4] converted to lowercase.

    The lowercasing algorithm used is described in section 3.13 of the Unicode Standard.

str.lstrip([chars])

    Return a copy of the string with leading characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace. The chars argument is not a prefix; rather, all combinations of its values are stripped:
    >>>

    >>> '   spacious   '.lstrip()
    'spacious   '
    >>> 'www.example.com'.lstrip('cmowz.')
    'example.com'

str.replace(old, new[, count])

    Return a copy of the string with all occurrences of substring old replaced by new. If the optional argument count is given, only the first count occurrences are replaced.

str.rfind(sub[, start[, end]])

    Return the highest index in the string where substring sub is found, such that sub is contained within s[start:end]. Optional arguments start and end are interpreted as in slice notation. Return -1 on failure.

str.rindex(sub[, start[, end]])

    Like rfind() but raises ValueError when the substring sub is not found.

str.rjust(width[, fillchar])

    Return the string right justified in a string of length width. Padding is done using the specified fillchar (default is a space). The original string is returned if width is less than or equal to len(s).

str.rstrip([chars])

    Return a copy of the string with trailing characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace. The chars argument is not a suffix; rather, all combinations of its values are stripped:
    >>>

    >>> '   spacious   '.rstrip()
    '   spacious'
    >>> 'mississippi'.rstrip('ipz')
    'mississ'

str.strip([chars])

*/
