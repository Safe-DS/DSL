package safeds.lang

/**
 * The common superclass of all classes.
 */
class Any {

    /**
     * Returns a string representation of the object.
     *
     * @example
     * pipeline example {
     *     val string = 1.toString(); // "1"
     * }
     */
    @Pure
    @PythonCall("str($this)")
    fun toString() -> s: String
}

/**
 * The common subclass of all classes.
 */
class Nothing

/**
 * A truth value.
 *
 * @example
 * pipeline example {
 *     val boolean = true;
 * }
 *
 * @example
 * pipeline example {
 *     val boolean = false;
 * }
 */
class Boolean

/**
 * A number.
 */
class Number

/**
 * An integer.
 *
 * @example
 * pipeline example {
 *     val int = 1;
 * }
 */
class Int sub Number {
    /**
     * Converts this integer to a floating-point number.
     *
     * @example
     * pipeline example {
     *     val float = 1.toFloat(); // 1.0
     * }
     */
    @Pure
    @PythonCall("float($this)")
    fun toFloat() -> f: Float
}

/**
 * A floating-point number.
 *
 * @example
 * pipeline example {
 *     val float = 1.0;
 * }
 */
class Float sub Number {
    /**
     * Converts this floating-point number to an integer by truncating the fractional part.
     *
     * @example
     * pipeline example {
     *     val int = 1.0.toInt(); // 1
     * }
     */
    @Pure
    @PythonCall("int($this)")
    fun toInt() -> i: Int
}

/**
 * A list of elements.
 *
 * @example
 * pipeline example {
 *     val list = [1, 2, 3];
 * }
 */
class List<out E> {

    /**
     * Returns the number of elements in the list.
     *
     * @example
     * pipeline example {
     *     val size = [1, 2, 3].size(); // 3
     * }
     */
    @Pure
    @PythonCall("len($this)")
    fun size() -> size: Int
}

/**
 * A map of keys to values.
 *
 * @example
 * pipeline example {
 *     val map = {
 *         "a": 1,
 *         "b": 2,
 *         "c": 3
 *     };
 * }
 */
class Map<K, out V> {

    /**
     * Returns the number of entries in the map.
     *
     * @example
     * pipeline example {
     *     val map = {
     *         "a": 1,
     *         "b": 2,
     *         "c": 3
     *     };
     *     val size = map.size(); // 3
     * }
     */
    @Pure
    @PythonCall("len($this)")
    fun size() -> size: Int

    /**
     * Returns the keys of the map.
     *
     * @example
     * pipeline example {
     *     val map = {
     *         "a": 1,
     *         "b": 2,
     *         "c": 3
     *     };
     *     val keys = map.keys(); // ["a", "b", "c"]
     * }
     */
    @Pure
    @PythonCall("list($this.keys())")
    fun keys() -> keys: List<K>

    /**
     * Returns the values of the map.
     *
     * @example
     * pipeline example {
     *     val map = {
     *         "a": 1,
     *         "b": 2,
     *         "c": 3
     *     };
     *     val values = map.values(); // [1, 2, 3]
     * }
     */
    @Pure
    @PythonCall("list($this.values())")
    fun values() -> values: List<V>
}

/**
 * Some text.
 *
 * @example
 * pipeline example {
 *     val string = "Hello, world!";
 * }
 */
class String {

    /**
     * Parses the string to a floating-point number.
     *
     * @example
     * pipeline example {
     *     val float = "1.0".toFloat(); // 1.0
     * }
     */
    @Pure
    @PythonCall("float($this)")
    fun toFloat() -> f: Float

    /**
     * Parses the string to an integer.
     *
     * @param base The base of the integer.
     *
     * @example
     * pipeline example {
     *     val int = "10".toInt(); // 10
     * }
     *
     * @example
     * pipeline example {
     *     val int = "10".toInt(base = 2); // 2
     * }
     */
    @Pure
    @PythonCall("int($this, $base)")
    fun toInt(base: Int = 10) -> i: Int
}
