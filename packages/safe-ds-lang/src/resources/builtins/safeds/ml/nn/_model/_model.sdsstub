package safeds.ml.nn

from safeds.data.tabular.containers.Table import Table
from safeds.data.tabular.containers.TaggedTable import TaggedTable
from safeds.ml.nn.FnnLayer import FNNLayer

class RegressionNeuralNetwork(
	layers: List<Any>
) {
	/**
	 * Check if the model is fitted.
	 */
	@PythonName("is_fitted") attr isFitted: Boolean

	/**
	 * Train the neural network with given training data.
	 * 
	 * The original model is not modified.
	 *
	 * @param trainData The data the network should be trained on.
	 * @param epochSize The number of times the training cycle should be done.
	 * @param batchSize The size of data batches that should be loaded at one time.
	 * @param callbackOnBatchCompletion Function used to view metrics while training. Gets called after a batch is completed with the index of the last batch and the overall loss average.
	 * @param callbackOnEpochCompletion Function used to view metrics while training. Gets called after an epoch is completed with the index of the last epoch and the overall loss average.
	 *
	 * @result result1 The trained Model
	 */
	@Pure
	fun fit(
		@PythonName("train_data") trainData: TaggedTable,
		@PythonName("epoch_size") epochSize: Int = 25,
		@PythonName("batch_size") batchSize: Int = 1,
		@PythonName("callback_on_batch_completion") callbackOnBatchCompletion: (param1: Int, param2: Float) -> param3: Nothing?? = null,
		@PythonName("callback_on_epoch_completion") callbackOnEpochCompletion: (param1: Int, param2: Float) -> param3: Nothing?? = null
	) -> result1: Self

	/**
	 * Make a prediction for the given test data.
	 * 
	 * The original Model is not modified.
	 *
	 * @param testData The data the network should predict.
	 *
	 * @result result1 The given test_data with an added "prediction" column at the end
	 */
	@Pure
	fun predict(
		@PythonName("test_data") testData: Table
	) -> result1: TaggedTable
}

class ClassificationNeuralNetwork(
	layers: List<FNNLayer>
) {
	/**
	 * Check if the model is fitted.
	 */
	@PythonName("is_fitted") attr isFitted: Boolean

	/**
	 * Train the neural network with given training data.
	 * 
	 * The original model is not modified.
	 *
	 * @param trainData The data the network should be trained on.
	 * @param epochSize The number of times the training cycle should be done.
	 * @param batchSize The size of data batches that should be loaded at one time.
	 * @param callbackOnBatchCompletion Function used to view metrics while training. Gets called after a batch is completed with the index of the last batch and the overall loss average.
	 * @param callbackOnEpochCompletion Function used to view metrics while training. Gets called after an epoch is completed with the index of the last epoch and the overall loss average.
	 *
	 * @result result1 The trained Model
	 */
	@Pure
	fun fit(
		@PythonName("train_data") trainData: TaggedTable,
		@PythonName("epoch_size") epochSize: Int = 25,
		@PythonName("batch_size") batchSize: Int = 1,
		@PythonName("callback_on_batch_completion") callbackOnBatchCompletion: (param1: Int, param2: Float) -> param3: Nothing?? = null,
		@PythonName("callback_on_epoch_completion") callbackOnEpochCompletion: (param1: Int, param2: Float) -> param3: Nothing?? = null
	) -> result1: Self

	/**
	 * Make a prediction for the given test data.
	 * 
	 * The original Model is not modified.
	 *
	 * @param testData The data the network should predict.
	 *
	 * @result result1 The given test_data with an added "prediction" column at the end
	 */
	@Pure
	fun predict(
		@PythonName("test_data") testData: Table
	) -> result1: TaggedTable
}
