package safeds.ml.nn

from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import Table
from safeds.ml.nn.layers import Layer

/**
 * A NeuralNetworkRegressor is a neural network that is used for regression tasks.
 *
 * @param inputConversion to convert the input data for the neural network
 * @param layers a list of layers for the neural network to learn
 *
 * @typeParam D The type of the full dataset. It's the input to `fit` and the output of `predict`.
 * @typeParam F The type of the features. It's the input to `predict`.
 */
@Experimental
class NeuralNetworkRegressor<D, F>(
    @PythonName("input_conversion") inputConversion: InputConversion<D, F>,
    layers: List<Layer>
) {
    /**
     * Whether the regressor is fitted.
     */
    @PythonName("is_fitted") attr isFitted: Boolean

    /**
     * Load a pretrained model from a [Huggingface repository](https://huggingface.co/models/).
     *
     * @param huggingfaceRepo the name of the huggingface repository
     *
     * @result pretrainedModel the pretrained model as a NeuralNetworkRegressor
     */
    @Pure
    @PythonName("load_pretrained_model")
    static fun loadPretrainedModel(
        @PythonName("huggingface_repo") huggingfaceRepo: String
    ) -> pretrainedModel: NeuralNetworkRegressor<Any, Any>

    /**
     * Train the neural network with given training data.
     *
     * The original model is not modified.
     *
     * @param trainData The data the network should be trained on.
     * @param epochSize The number of times the training cycle should be done.
     * @param batchSize The size of data batches that should be loaded at one time.
     * @param learningRate The learning rate of the neural network.
     * @param callbackOnBatchCompletion Function used to view metrics while training. Gets called after a batch is completed with the index of the
     * last batch and the overall loss average.
     * @param callbackOnEpochCompletion Function used to view metrics while training. Gets called after an epoch is completed with the index of the
     * last epoch and the overall loss average.
     *
     * @result fittedRegressor The trained Model
     *
     * @example
     * pipeline example {
     *     // TODO
     * }
     */
    @Pure
    fun fit(
        @PythonName("train_data") trainData: D,
        @PythonName("epoch_size") const epochSize: Int = 25,
        @PythonName("batch_size") const batchSize: Int = 1,
        @PythonName("learning_rate") learningRate: Float = 0.001,
        @PythonName("callback_on_batch_completion") callbackOnBatchCompletion: (param1: Int, param2: Float) -> () = (param1, param2) {},
        @PythonName("callback_on_epoch_completion") callbackOnEpochCompletion: (param1: Int, param2: Float) -> () = (param1, param2) {}
    ) -> fittedRegressor: NeuralNetworkRegressor<D, F> where {
        epochSize >= 1,
        batchSize >= 1
    }

    /**
     * Make a prediction for the given test data.
     *
     * The original Model is not modified.
     *
     * @param testData The data the network should predict.
     *
     * @result prediction The given test_data with an added "prediction" column at the end
     *
     * @example
     * pipeline example {
     *     // TODO
     * }
     */
    @Pure
    fun predict(
        @PythonName("test_data") testData: F
    ) -> prediction: D
}
