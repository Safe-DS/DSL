package safeds.ml.classical.regression

from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import Table
from safeds.ml.classical.regression import Regressor

/**
 * Elastic net regression.
 *
 * @param alpha Controls the regularization of the model. The higher the value, the more regularized it becomes.
 * @param lassoRatio Number between 0 and 1 that controls the ratio between Lasso and Ridge regularization. If 0, only Ridge
 * regularization is used. If 1, only Lasso regularization is used.
 *
 * @example
 * pipeline example {
 *     val training = Table.fromCsvFile("training.csv").toTabularDataset("target");
 *     val test = Table.fromCsvFile("test.csv").toTabularDataset("target");
 *     val regressor = ElasticNetRegressor(lassoRatio = 0.8).fit(training);
 *     val meanSquaredError = regressor.meanSquaredError(test);
 * }
 */
@Deprecated(
    alternative="Use a LinearRegressor and set the penalty to ElasticNet.",
    reason="Consistency with other regressors, where penalty is also just a parameter."
)
class ElasticNetRegressor(
    const alpha: Float = 1.0,
    @PythonName("lasso_ratio") const lassoRatio: Float = 0.5
) sub Regressor where {
    alpha >= 0.0,
    lassoRatio >= 0.0,
    lassoRatio <= 1.0
} {
    /**
     * The regularization of the model.
     */
    attr alpha: Float
    /**
     * The ratio between Lasso and Ridge regularization.
     */
    @PythonName("lasso_ratio") attr lassoRatio: Float

    /**
     * Create a copy of this regressor and fit it with the given training data.
     *
     * This regressor is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedRegressor The fitted regressor.
     */
    @Pure
    fun fit(
        @PythonName("training_set") trainingSet: TabularDataset
    ) -> fittedRegressor: ElasticNetRegressor
}
