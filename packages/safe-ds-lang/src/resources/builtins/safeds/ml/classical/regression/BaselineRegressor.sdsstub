package safeds.ml.classical.regression

from safeds.data.labeled.containers import TabularDataset

/**
 * Baseline Regressor.
 *
 * Get a baseline by fitting data on multiple different models and comparing the best metrics.
 *
 * @param extendedSearch If set to true, an extended set of models will be used to fit the classifier.
 * This might result in significantly higher runtime.
 */
@Experimental
class BaselineRegressor(
    @PythonName("extended_search") extendedSearch: Boolean = false
) {
    /**
     * Whether the model is fitted.
     */
    @PythonName("is_fitted") attr isFitted: Boolean

    /**
     * Train the Regressor with given training data.
     *
     * The original model is not modified.
     *
     * @param trainData The data the network should be trained on.
     *
     * @result trainedClassifier The trained Regressor
     */
    @Pure
    fun fit(
        @PythonName("train_data") trainData: TabularDataset
    ) -> trainedClassifier: BaselineRegressor

    /**
     * Make a prediction for the given test data and calculate the best metrics.
     *
     * The original Model is not modified.
     *
     * @param testData The data the Regressor should predict.
     *
     * @result bestMetrics A dictionary with the best metrics that were achieved.
     */
    @Pure
    fun predict(
        @PythonName("test_data") testData: TabularDataset
    ) -> bestMetrics: Map<String, Float>
}
