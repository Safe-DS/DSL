package safeds.ml.classical.classification

from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import Table
from safeds.ml.classical.classification import Classifier

/**
 * Random forest classification.
 *
 * @param numberOfTrees The number of trees to be used in the random forest. Has to be greater than 0.
 *
 * @example
 * pipeline example {
 *     val training = Table.fromCsvFile("training.csv").tagColumns("target");
 *     val test = Table.fromCsvFile("test.csv").tagColumns("target");
 *     val classifier = RandomForestClassifier(numberOfTrees = 10).fit(training);
 *     val accuracy = classifier.accuracy(test);
 * }
 */
class RandomForestClassifier(
    @PythonName("number_of_trees") const numberOfTrees: Int = 100
) sub Classifier where {
    numberOfTrees >= 1
} {
    /**
     * Get the number of trees used in the random forest.
     */
    @PythonName("number_of_trees") attr numberOfTrees: Int

    /**
     * Create a copy of this classifier and fit it with the given training data.
     *
     * This classifier is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedClassifier The fitted classifier.
     */
    @Pure
    fun fit(
        @PythonName("training_set") trainingSet: TabularDataset
    ) -> fittedClassifier: RandomForestClassifier
}
