package safeds.ml.classical.regression

from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import Table
from safeds.ml.classical.regression import Regressor

/**
 * K-nearest-neighbors regression.
 *
 * @param neighborCount The number of neighbors to use for interpolation. Has to be greater than 0 (validated in the constructor) and
 * less than or equal to the sample size (validated when calling `fit`).
 *
 * @example
 * pipeline example {
 *     val training = Table.fromCsvFile("training.csv").toTabularDataset("target");
 *     val test = Table.fromCsvFile("test.csv").toTabularDataset("target");
 *     val regressor = KNearestNeighborsRegressor(neighborCount = 5).fit(training);
 *     val meanSquaredError = regressor.meanSquaredError(test);
 * }
 */
class KNearestNeighborsRegressor(
    @PythonName("number_of_neighbors") const neighborCount: Int
) sub Regressor where {
    neighborCount >= 1
} {
    /**
     * Get the number of neighbors used for interpolation.
     */
    @PythonName("number_of_neighbors") attr neighborCount: Int

    /**
     * Create a copy of this regressor and fit it with the given training data.
     *
     * This regressor is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedRegressor The fitted regressor.
     */
    @Pure
    fun fit(
        @PythonName("training_set") trainingSet: TabularDataset
    ) -> fittedRegressor: KNearestNeighborsRegressor
}
