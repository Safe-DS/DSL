package safeds.ml.classical.regression

from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import Table
from safeds.ml.classical.regression import Regressor

/**
 * Linear regression.
 *
 * @param penalty The type of penalty to be used. Defaults to a simple linear regression.
 *
 * @example
 * pipeline example {
 *     val training = Table.fromCsvFile("training.csv").toTabularDataset("target");
 *     val test = Table.fromCsvFile("test.csv").toTabularDataset("target");
 *     val regressor = LinearRegressor().fit(training);
 *     val meanSquaredError = regressor.meanSquaredError(test);
 * }
 */
class LinearRegressor(
    penalty: LinearRegressor.Penalty? = null
) sub Regressor {
    /**
     * Possible penalties for the linear regressor.
     */
    enum Penalty {
        /**
         * A linear penalty.
         */
        @PythonName("linear")
        Linear

        /**
         * A lasso (L1) penalty.
         *
         * @param alpha Controls the regularization of the model. The higher the value, the more regularized it becomes.
         */
        @PythonName("lasso")
        Lasso(
            const alpha: Float = 1.0
        ) where {
            alpha >= 0.0
        }

        /**
         * A ridge (L2) penalty.
         *
         * @param alpha Controls the regularization of the model. The higher the value, the more regularized it becomes.
         */
        @PythonName("ridge")
        Ridge(
            const alpha: Float = 1.0
        ) where {
            alpha >= 0.0
        }

        /**
         * An elastic net penalty, which applies a mix of lasso (L1) and ridge (L2) penalties.
         *
         * @param alpha Controls the regularization of the model. The higher the value, the more regularized it becomes.
         * @param lassoRatio Number between 0 and 1 that controls the ratio between lasso and ridge penalty. If
         * 0, only ridge penalty is used. If 1, only lasso penalty is used.
         */
        @PythonName("elastic_net")
        ElasticNet(
            const alpha: Float = 1.0,
            @PythonName("lasso_ratio") const lassoRatio: Float = 0.5
        ) where {
            alpha >= 0.0,
            lassoRatio >= 0.0,
            lassoRatio <= 1.0
        }
    }

    /**
     * The regularization of the model.
     */
    attr penalty: LinearRegressor.Penalty?

    /**
     * Create a copy of this regressor and fit it with the given training data.
     *
     * This regressor is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedRegressor The fitted regressor.
     */
    @Pure
    @Category(DataScienceCategory.ModelingQClassicalRegression)
    fun fit(
        @PythonName("training_set") trainingSet: TabularDataset
    ) -> fittedRegressor: LinearRegressor
}
