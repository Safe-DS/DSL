package safeds.ml.classical.regression

from safeds.data.tabular.containers import Table, TaggedTable
from safeds.ml.classical.regression import Regressor

/**
 * Support vector machine.
 *
 * @param c The strength of regularization. Must be strictly positive.
 * @param kernel The type of kernel to be used. Defaults to None.
 *
 * @example
 * pipeline example {
 *     // TODO
 * }
 */
class SupportVectorMachineRegressor(
    const c: Float = 1.0,
    kernel: SupportVectorMachineRegressor.Kernel = SupportVectorMachineRegressor.Kernel.RadialBasisFunction
) sub Regressor where {
    c > 0.0
} {
    /**
     * The kernel functions that can be used in the support vector machine.
     *
     * @example
     * pipeline example {
     *     // TODO
     * }
     */
    enum Kernel {
        /**
         * A linear kernel.
         *
         * @example
         * pipeline example {
         *     // TODO
         * }
         */
        Linear

        /**
         * A polynomial kernel.
         *
         * @param degree The degree of the polynomial.
         *
         * @example
         * pipeline example {
         *     // TODO
         * }
         */
        Polynomial(degree: Int)

        /**
         * A sigmoid kernel.
         *
         * @example
         * pipeline example {
         *     // TODO
         * }
         */
        Sigmoid

        /**
         * A radial basis function kernel.
         *
         * @example
         * pipeline example {
         *     // TODO
         * }
         */
        RadialBasisFunction
    }

    /**
     * Get the regularization strength.
     *
     * @example
     * pipeline example {
     *     // TODO
     * }
     */
    attr c: Float
    /**
     * Get the type of kernel used.
     *
     * @example
     * pipeline example {
     *     // TODO
     * }
     */
    attr kernel: SupportVectorMachineRegressor.Kernel

    /**
     * Create a copy of this regressor and fit it with the given training data.
     *
     * This regressor is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedRegressor The fitted regressor.
     *
     * @example
     * pipeline example {
     *     // TODO
     * }
     */
    @Pure
    fun fit(
        @PythonName("training_set") trainingSet: TaggedTable
    ) -> fittedRegressor: SupportVectorMachineRegressor
}
