package safeds.ml.classical.classification

from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import Table
from safeds.ml.classical.classification import Classifier

/**
 * Gradient boosting classification.
 *
 * @param treeCount The number of boosting stages to perform. Gradient boosting is fairly robust to over-fitting so a large
 * number usually results in better performance.
 * @param learningRate The larger the value, the more the model is influenced by each additional tree. If the learning rate is too
 * low, the model might underfit. If the learning rate is too high, the model might overfit.
 *
 * @example
 * pipeline example {
 *     val training = Table.fromCsvFile("training.csv").toTabularDataset("target");
 *     val test = Table.fromCsvFile("test.csv").toTabularDataset("target");
 *     val classifier = GradientBoostingClassifier(treeCount = 50).fit(training);
 *     val accuracy = classifier.accuracy(test);
 * }
 */
class GradientBoostingClassifier(
    @PythonName("tree_count") const treeCount: Int = 100,
    @PythonName("learning_rate") const learningRate: Float = 0.1
) sub Classifier where {
    treeCount >= 1,
    learningRate > 0.0
} {
    /**
     * The number of trees (estimators) in the ensemble.
     */
    @PythonName("tree_count") attr treeCount: Int
    /**
     * The learning rate.
     */
    @PythonName("learning_rate") attr learningRate: Float

    /**
     * Create a copy of this classifier and fit it with the given training data.
     *
     * This classifier is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedClassifier The fitted classifier.
     */
    @Pure
    fun fit(
        @PythonName("training_set") trainingSet: TabularDataset
    ) -> fittedClassifier: GradientBoostingClassifier
}
