package safeds.ml.classical.regression

from safeds.data.tabular.containers.Table import Table
from safeds.data.tabular.containers.TaggedTable import TaggedTable
from safeds.ml.classical.regression.Regressor import Regressor

/**
 * Elastic net regression.
 *
 * @param alpha Controls the regularization of the model. The higher the value, the more regularized it becomes.
 * @param lassoRatio Number between 0 and 1 that controls the ratio between Lasso and Ridge regularization. If 0, only Ridge
 * regularization is used. If 1, only Lasso regularization is used.
 */
class ElasticNetRegression(
	alpha: Float = 1.0,
	@PythonName("lasso_ratio") lassoRatio: Float = 0.5
) sub Regressor {
	/**
	 * Get the regularization of the model.
	 */
	attr alpha: Float
	/**
	 * Get the ratio between Lasso and Ridge regularization.
	 */
	@PythonName("lasso_ratio") attr lassoRatio: Float

	/**
	 * Create a copy of this regressor and fit it with the given training data.
	 * 
	 * This regressor is not modified.
	 *
	 * @param trainingSet The training data containing the feature and target vectors.
	 *
	 * @result result1 The fitted regressor.
	 */
	@Pure
	fun fit(
		@PythonName("training_set") trainingSet: TaggedTable
	) -> result1: ElasticNetRegression

	/**
	 * Predict a target vector using a dataset containing feature vectors. The model has to be trained first.
	 *
	 * @param dataset The dataset containing the feature vectors.
	 *
	 * @result result1 A dataset containing the given feature vectors and the predicted target vector.
	 */
	@Pure
	fun predict(
		dataset: Table
	) -> result1: TaggedTable

	/**
	 * Check if the regressor is fitted.
	 *
	 * @result result1 Whether the regressor is fitted.
	 */
	@Pure
	@PythonName("is_fitted")
	fun isFitted() -> result1: Boolean
}
