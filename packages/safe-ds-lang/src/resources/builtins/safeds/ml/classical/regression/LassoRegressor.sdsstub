package safeds.ml.classical.regression

from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import Table
from safeds.ml.classical.regression import Regressor

/**
 * Lasso regression.
 *
 * @param alpha Controls the regularization of the model. The higher the value, the more regularized it becomes.
 *
 * @example
 * pipeline example {
 *     val training = Table.fromCsvFile("training.csv").toTabularDataset("target");
 *     val test = Table.fromCsvFile("test.csv").toTabularDataset("target");
 *     val regressor = LassoRegressor(alpha = 2.0).fit(training);
 *     val meanSquaredError = regressor.meanSquaredError(test);
 * }
 */
@Deprecated(
    alternative="Use a LinearRegressor and set the penalty to Lasso.",
    reason="Consistency with other regressors, where penalty is also just a parameter."
)
class LassoRegressor(
    const alpha: Float = 1.0
) sub Regressor where {
    alpha >= 0.0
} {
    /**
     * The regularization of the model.
     */
    attr alpha: Float

    /**
     * Create a copy of this regressor and fit it with the given training data.
     *
     * This regressor is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedRegressor The fitted regressor.
     */
    @Pure
    @Category(DataScienceCategory.Modeling)
    fun fit(
        @PythonName("training_set") trainingSet: TabularDataset
    ) -> fittedRegressor: LassoRegressor
}
