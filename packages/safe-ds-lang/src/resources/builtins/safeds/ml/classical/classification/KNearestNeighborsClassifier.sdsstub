package safeds.ml.classical.classification

from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import Table
from safeds.ml.classical.classification import Classifier

/**
 * K-nearest-neighbors classification.
 *
 * @param neighborCount The number of neighbors to use for interpolation. Has to be greater than 0 (validated in the constructor) and
 * less than or equal to the sample size (validated when calling `fit`).
 *
 * @example
 * pipeline example {
 *     val training = Table.fromCsvFile("training.csv").toTabularDataset("target");
 *     val test = Table.fromCsvFile("test.csv").toTabularDataset("target");
 *     val classifier = KNearestNeighborsClassifier(5).fit(training);
 *     val accuracy = classifier.accuracy(test);
 * }
 */
class KNearestNeighborsClassifier(
    @PythonName("number_of_neighbors") const neighborCount: Int
) sub Classifier where {
    neighborCount >= 1
} {
    /**
     * Get the number of neighbors used for interpolation.
     */
    @PythonName("number_of_neighbors") attr neighborCount: Int

    /**
     * Create a copy of this classifier and fit it with the given training data.
     *
     * This classifier is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedClassifier The fitted classifier.
     */
    @Pure
    fun fit(
        @PythonName("training_set") trainingSet: TabularDataset
    ) -> fittedClassifier: KNearestNeighborsClassifier
}
