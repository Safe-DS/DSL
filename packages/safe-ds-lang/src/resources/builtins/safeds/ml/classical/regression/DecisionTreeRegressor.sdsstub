package safeds.ml.classical.regression

from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import Table
from safeds.ml.classical.regression import Regressor

/**
 * Decision tree regression.
 *
 * @param maximumDepth The maximum depth of each tree. If null, the depth is not limited. Has to be greater than 0.
 * @param minimumNumberOfSamplesInLeaves The minimum number of samples that must remain in the leaves of each tree. Has to be greater than 0.
 *
 * @example
 * pipeline example {
 *     val training = Table.fromCsvFile("training.csv").toTabularDataset("target");
 *     val test = Table.fromCsvFile("test.csv").toTabularDataset("target");
 *     val regressor = DecisionTreeRegressor().fit(training);
 *     val meanSquaredError = regressor.meanSquaredError(test);
 * }
 */
class DecisionTreeRegressor(
    @PythonName("maximum_depth") maximumDepth: Int? = null,
    @PythonName("minimum_number_of_samples_in_leaves") const minimumNumberOfSamplesInLeaves: Int = 1
) sub Regressor where {
    minimumNumberOfSamplesInLeaves > 0
} {
    /**
     * The maximum depth of the tree.
     */
    @PythonName("maximum_depth") attr maximumDepth: Int?
    /**
     * The minimum number of samples that must remain in the leaves of the tree.
     */
    @PythonName("minimum_number_of_samples_in_leaves") attr minimumNumberOfSamplesInLeaves: Int

    /**
     * Create a copy of this regressor and fit it with the given training data.
     *
     * This regressor is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedRegressor The fitted regressor.
     */
    @Pure
    fun fit(
        @PythonName("training_set") trainingSet: union<ExperimentalTabularDataset, TabularDataset>
    ) -> fittedRegressor: DecisionTreeRegressor
}
