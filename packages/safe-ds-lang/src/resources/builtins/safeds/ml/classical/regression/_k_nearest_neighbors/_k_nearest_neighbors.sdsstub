package safeds.ml.classical.regression

from safeds.data.tabular.containers.Table import Table
from safeds.data.tabular.containers.TaggedTable import TaggedTable
from safeds.ml.classical.regression.Regressor import Regressor

/**
 * K-nearest-neighbors regression.
 *
 * @param numberOfNeighbors The number of neighbors to use for interpolation. Has to be greater than 0 (validated in the constructor) and
 * less than or equal to the sample size (validated when calling `fit`).
 */
class KNearestNeighbors(
	@PythonName("number_of_neighbors") numberOfNeighbors: Int
) sub Regressor {
	/**
	 * Get the number of neighbors used for interpolation.
	 */
	@PythonName("number_of_neighbors") attr numberOfNeighbors: Int

	/**
	 * Create a copy of this regressor and fit it with the given training data.
	 * 
	 * This regressor is not modified.
	 *
	 * @param trainingSet The training data containing the feature and target vectors.
	 *
	 * @result result1 The fitted regressor.
	 */
	@Pure
	fun fit(
		@PythonName("training_set") trainingSet: TaggedTable
	) -> result1: KNearestNeighbors

	/**
	 * Predict a target vector using a dataset containing feature vectors. The model has to be trained first.
	 *
	 * @param dataset The dataset containing the feature vectors.
	 *
	 * @result result1 A dataset containing the given feature vectors and the predicted target vector.
	 */
	@Pure
	fun predict(
		dataset: Table
	) -> result1: TaggedTable

	/**
	 * Check if the regressor is fitted.
	 *
	 * @result result1 Whether the regressor is fitted.
	 */
	@Pure
	@PythonName("is_fitted")
	fun isFitted() -> result1: Boolean
}
