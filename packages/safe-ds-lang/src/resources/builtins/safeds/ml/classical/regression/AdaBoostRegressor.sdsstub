package safeds.ml.classical.regression

from safeds.data.labeled.containers import TabularDataset
from safeds.data.tabular.containers import Table
from safeds.ml.classical.regression import Regressor

/**
 * Ada Boost regression.
 *
 * @param learner The learner from which the boosted ensemble is built.
 * @param maxLearnerCount The maximum number of learners at which boosting is terminated. In case of perfect fit, the learning procedure
 * is stopped early. Has to be greater than 0.
 * @param learningRate Weight applied to each regressor at each boosting iteration. A higher learning rate increases the contribution
 * of each regressor. Has to be greater than 0.
 *
 * @example
 * pipeline example {
 *     val training = Table.fromCsvFile("training.csv").toTabularDataset("target");
 *     val test = Table.fromCsvFile("test.csv").toTabularDataset("target");
 *     val regressor = AdaBoostRegressor(maxLearnerCount = 100).fit(training);
 *     val meanSquaredError = regressor.meanSquaredError(test);
 * }
 */
class AdaBoostRegressor(
    learner: Regressor = DecisionTreeRegressor(),
    @PythonName("maximum_number_of_learners") const maxLearnerCount: Int = 50,
    @PythonName("learning_rate") const learningRate: Float = 1.0
) sub Regressor where {
    maxLearnerCount >= 1,
    learningRate > 0.0
} {
    /**
     * Get the base learner used for training the ensemble.
     */
    attr learner: Regressor
    /**
     * Get the maximum number of learners in the ensemble.
     */
    @PythonName("maximum_number_of_learners") attr maxLearnerCount: Int
    /**
     * Get the learning rate.
     */
    @PythonName("learning_rate") attr learningRate: Float

    /**
     * Create a copy of this regressor and fit it with the given training data.
     *
     * This regressor is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedRegressor The fitted regressor.
     */
    @Pure
    fun fit(
        @PythonName("training_set") trainingSet: TabularDataset
    ) -> fittedRegressor: AdaBoostRegressor
}
