package safeds.ml.classical.regression

from safeds.data.tabular.containers import Table, TaggedTable

/**
 * Abstract base class for all regressors.
 *
 * @example
 * pipeline example {
 *     // TODO
 * }
 */
class Regressor {
    /**
     * Create a copy of this regressor and fit it with the given training data.
     *
     * This regressor is not modified.
     *
     * @param trainingSet The training data containing the feature and target vectors.
     *
     * @result fittedRegressor The fitted regressor.
     *
     * @example
     * pipeline example {
     *     // TODO
     * }
     */
    @Pure
    fun fit(
        @PythonName("training_set") trainingSet: TaggedTable
    ) -> fittedRegressor: Regressor

    /**
     * Predict a target vector using a dataset containing feature vectors. The model has to be trained first.
     *
     * @param dataset The dataset containing the feature vectors.
     *
     * @result prediction A dataset containing the given feature vectors and the predicted target vector.
     *
     * @example
     * pipeline example {
     *     // TODO
     * }
     */
    @Pure
    fun predict(
        dataset: Table
    ) -> prediction: TaggedTable

    /**
     * Check if the classifier is fitted.
     *
     * @result isFitted Whether the regressor is fitted.
     *
     * @example
     * pipeline example {
     *     // TODO
     * }
     */
    @Pure
    @PythonName("is_fitted")
    fun isFitted() -> isFitted: Boolean

    /**
     * Compute the mean squared error (MSE) on the given data.
     *
     * @param validationOrTestSet The validation or test set.
     *
     * @result meanSquaredError The calculated mean squared error (the average of the distance of each individual row squared).
     *
     * @example
     * pipeline example {
     *     // TODO
     * }
     */
    @Pure
    @PythonName("mean_squared_error")
    fun meanSquaredError(
        @PythonName("validation_or_test_set") validationOrTestSet: TaggedTable
    ) -> meanSquaredError: Float

    /**
     * Compute the mean absolute error (MAE) of the regressor on the given data.
     *
     * @param validationOrTestSet The validation or test set.
     *
     * @result meanAbsoluteError The calculated mean absolute error (the average of the distance of each individual row).
     *
     * @example
     * pipeline example {
     *     // TODO
     * }
     */
    @Pure
    @PythonName("mean_absolute_error")
    fun meanAbsoluteError(
        @PythonName("validation_or_test_set") validationOrTestSet: TaggedTable
    ) -> meanAbsoluteError: Float
}
