package safeds.ml.classical.regression

from safeds.data.tabular.containers.Table import Table
from safeds.data.tabular.containers.TaggedTable import TaggedTable
from safeds.ml.classical.classification import Classifier

/**
 * The abstract base class of the different subclasses supported by the `Kernel`.
 */
class SupportVectorMachineKernel {
	/**
	 * Get the kernel of the given SupportVectorMachine.
	 */
	@Pure
	@PythonName("get_sklearn_kernel")
	fun getSklearnKernel() -> result1: object
}

/**
 * Support vector machine.
 *
 * @param c The strength of regularization. Must be strictly positive.
 * @param kernel The type of kernel to be used. Defaults to None.
 */
class SupportVectorMachine(
	c: Float = 1.0,
	kernel: SupportVectorMachineKernel? = null
) sub Classifier {
	class Kernel() {
		class Linear() sub SupportVectorMachineKernel {
			/**
			 * Get the name of the linear kernel.
			 *
			 * @result result1 The name of the linear kernel.
			 */
			@Pure
			@PythonName("get_sklearn_kernel")
			fun getSklearnKernel() -> result1: String
		}

		class Polynomial(
			degree: Int
		) sub SupportVectorMachineKernel {
			/**
			 * Get the name of the polynomial kernel.
			 *
			 * @result result1 The name of the polynomial kernel.
			 */
			@Pure
			@PythonName("get_sklearn_kernel")
			fun getSklearnKernel() -> result1: String
		}

		class Sigmoid() sub SupportVectorMachineKernel {
			/**
			 * Get the name of the sigmoid kernel.
			 *
			 * @result result1 The name of the sigmoid kernel.
			 */
			@Pure
			@PythonName("get_sklearn_kernel")
			fun getSklearnKernel() -> result1: String
		}

		class RadialBasisFunction() sub SupportVectorMachineKernel {
			/**
			 * Get the name of the radial basis function (RBF) kernel.
			 *
			 * @result result1 The name of the RBF kernel.
			 */
			@Pure
			@PythonName("get_sklearn_kernel")
			fun getSklearnKernel() -> result1: String
		}
	}

	/**
	 * Get the regularization strength.
	 */
	attr c: Float
	/**
	 * Get the type of kernel used.
	 */
	attr kernel: SupportVectorMachineKernel?

	/**
	 * Create a copy of this classifier and fit it with the given training data.
	 * 
	 * This classifier is not modified.
	 *
	 * @param trainingSet The training data containing the feature and target vectors.
	 *
	 * @result result1 The fitted classifier.
	 */
	@Pure
	fun fit(
		@PythonName("training_set") trainingSet: TaggedTable
	) -> result1: SupportVectorMachine

	/**
	 * Predict a target vector using a dataset containing feature vectors. The model has to be trained first.
	 *
	 * @param dataset The dataset containing the feature vectors.
	 *
	 * @result result1 A dataset containing the given feature vectors and the predicted target vector.
	 */
	@Pure
	fun predict(
		dataset: Table
	) -> result1: TaggedTable

	/**
	 * Check if the classifier is fitted.
	 *
	 * @result result1 Whether the classifier is fitted.
	 */
	@Pure
	@PythonName("is_fitted")
	fun isFitted() -> result1: Boolean
}
