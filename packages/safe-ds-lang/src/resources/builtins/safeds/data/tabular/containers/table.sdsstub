package safeds.data.tabular.containers

from safeds.data.labeled.containers import TabularDataset
from safeds.data.image.containers import Image
from safeds.data.tabular.containers import Column, Row, TimeSeries
from safeds.data.tabular.transformation import InvertibleTableTransformer, TableTransformer
from safeds.data.tabular.typing import ColumnType, Schema

/**
 * A table is a two-dimensional collection of data. It can either be seen as a list of rows or as a list of columns.
 *
 * To create a `Table` call the constructor or use one of the following static methods:
 *
 * | Method                     | Description                            |
 * | -------------------------- | -------------------------------------- |
 * | {@link Table.fromCsvFile}  | Create a table from a CSV file.        |
 * | {@link Table.fromJsonFile} | Create a table from a JSON file.       |
 * | {@link Table.fromMap}      | Create a table from a map.             |
 * | {@link Table.fromColumns}  | Create a table from a list of columns. |
 * | {@link Table.fromRows}     | Create a table from a list of rows.    |
 *
 * Note: When removing the last column of the table, the `number_of_columns` property will be set to 0.
 *
 * @param data The data. If None, an empty table is created.
 *
 * @example
 * pipeline example {
 *     val table = Table({"a": [1, 2], "b": [3, 4]});
 * }
 */
class Table(
    data: Map<String, List<Any?>>? = null // TODO: update default value to empty map
) {
    /**
     * Return a list of all column names in this table.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val columnNames = table.columnNames; // ["a", "b"]
     * }
     */
    @PythonName("column_names") attr columnNames: List<String>
    /**
     * Return the number of columns.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val numberOfColumns = table.numberOfColumns; // 2
     * }
     */
    @PythonName("number_of_columns") attr numberOfColumns: Int
    /**
     * Return the number of rows.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val numberOfRows = table.numberOfRows; // 2
     * }
     */
    @PythonName("number_of_rows") attr numberOfRows: Int
    /**
     * Return the schema of the table.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val `schema` = table.`schema`;
     * }
     */
    attr `schema`: Schema

    /**
     * Read data from a CSV file into a table.
     *
     * @param path The path to the CSV file.
     *
     * @result table The table created from the CSV file.
     *
     * @example
     * pipeline example {
     *     val table = Table.fromCsvFile("path/to/file.csv");
     * }
     */
    @Impure([ImpurityReason.FileReadFromParameterizedPath("path")])
    @PythonName("from_csv_file")
    static fun fromCsvFile(
        path: String
    ) -> table: Table

    /**
     * Read data from an Excel file into a table.
     *
     * Valid file extensions are `.xls`, `.xlsx`, `.xlsm`, `.xlsb`, `.odf`, `.ods` and `.odt`.
     *
     * @param path The path to the Excel file.
     *
     * @result table The table created from the Excel file.
     *
     * @example
     * pipeline example {
     *     val table = Table.fromExcelFile("path/to/file.xlsx");
     * }
     */
    @Impure([ImpurityReason.FileReadFromParameterizedPath("path")])
    @PythonName("from_excel_file")
    static fun fromExcelFile(
        path: String
    ) -> table: Table

    /**
     * Read data from a JSON file into a table.
     *
     * @param path The path to the JSON file.
     *
     * @result table The table created from the JSON file.
     *
     * @example
     * pipeline example {
     *     val table = Table.fromJsonFile("path/to/file.json");
     * }
     */
    @Impure([ImpurityReason.FileReadFromParameterizedPath("path")])
    @PythonName("from_json_file")
    static fun fromJsonFile(
        path: String
    ) -> table: Table

    /**
     * Create a table from a map of column names to column values.
     *
     * @param data The data.
     *
     * @result table The generated table.
     *
     * @example
     * pipeline example {
     *     val table = Table.fromMap({"a": [1, 2], "b": [3, 4]});
     * }
     */
    @Pure
    @PythonName("from_dict")
    static fun fromMap(
        data: Map<String, List<Any?>>
    ) -> table: Table

    /**
     * Return a table created from a list of columns.
     *
     * @param columns The columns to be combined. They need to have the same size.
     *
     * @result table The generated table.
     *
     * @example
     * pipeline example {
     *     val column1 = Column("a", [1, 2]);
     *     val column2 = Column("b", [3, 4]);
     *     val table = Table.fromColumns([column1, column2]);
     * }
     */
    @Pure
    @PythonName("from_columns")
    static fun fromColumns(
        columns: List<Column>
    ) -> table: Table

    /**
     * Return a table created from a list of rows.
     *
     * @param rows The rows to be combined. They need to have a matching schema.
     *
     * @result table The generated table.
     *
     * @example
     * pipeline example {
     *     val row1 = Row({"a": 1, "b": 3});
     *     val row2 = Row({"a": 2, "b": 4});
     *     val table = Table.fromRows([row1, row2]);
     * }
     */
    @Experimental
    @Pure
    @PythonName("from_rows")
    static fun fromRows(
        rows: List<Row>
    ) -> table: Table

    /**
     * Return a column with the data of the specified column.
     *
     * @param columnName The name of the column.
     *
     * @result column The column.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val column = table.getColumn("a"); // Column("a", [1, 2])
     * }
     */
    @Pure
    @PythonName("get_column")
    fun getColumn(
        @PythonName("column_name") columnName: String
    ) -> column: Column

    /**
     * Return whether the table contains a given column.
     *
     * @param columnName The name of the column.
     *
     * @result hasColumn True if the column exists.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val hasColumn = table.hasColumn("a"); // true
     * }
     */
    @Pure
    @PythonName("has_column")
    fun hasColumn(
        @PythonName("column_name") columnName: String
    ) -> hasColumn: Boolean

    /**
     * Return the type of the given column.
     *
     * @param columnName The name of the column to be queried.
     *
     * @result type The type of the column.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val type = table.getColumnType("a"); // Integer
     * }
     */
    @Pure
    @PythonName("get_column_type")
    fun getColumnType(
        @PythonName("column_name") columnName: String
    ) -> type: ColumnType

    /**
     * Return the row at a specified index.
     *
     * @param index The index.
     *
     * @result row The row of the table at the index.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val row = table.getRow(0); // Row({"a": 1, "b": 3})
     * }
     */
    @Pure
    @PythonName("get_row")
    fun getRow(
        index: Int
    ) -> row: Row

    /**
     * Return a table with a number of statistical key values.
     *
     * The original table is not modified.
     *
     * @result statistics The table with statistics.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val statistics = table.summarizeStatistics();
     * }
     */
    @Pure
    @PythonName("summarize_statistics")
    fun summarizeStatistics() -> statistics: Table

    /**
     * Return a new table with the provided column attached at the end.
     *
     * The original table is not modified.
     *
     * @result newTable The table with the column attached.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val column = Column("c", [5, 6]);
     *     val newTable = table.addColumn(column);
     *     // Table({
     *     //     "a": [1, 2],
     *     //     "b": [3, 4],
     *     //     "c": [5, 6],
     *     // })
     * }
     */
    @Pure
    @PythonName("add_column")
    fun addColumn(
        column: Column
    ) -> newTable: Table

    /**
     * Return a new `Table` with multiple added columns.
     *
     * The original table is not modified.
     *
     * @param columns The columns to be added.
     *
     * @result newTable A new table combining the original table and the given columns.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val column1 = Column("c", [5, 6]);
     *     val column2 = Column("d", [7, 8]);
     *     val newTable = table.addColumns([column1, column2]);
     *     // Table({
     *     //     "a": [1, 2],
     *     //     "b": [3, 4],
     *     //     "c": [5, 6],
     *     //     "d": [7, 8],
     *     // })
     * }
     */
    @Pure
    @PythonName("add_columns")
    fun addColumns(
        columns: union<List<Column>, Table>
    ) -> newTable: Table

    /**
     * Return a new `Table` with an added Row attached.
     *
     * If the table happens to be empty beforehand, respective columns will be added automatically.
     *
     * The order of columns of the new row will be adjusted to the order of columns in the table.
     * The new table will contain the merged schema.
     *
     * The original table is not modified.
     *
     * @param row The row to be added.
     *
     * @result newTable A new table with the added row at the end.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [4, 5]});
     *     val row = Row({"a": 3, "b": 6});
     *     val newTable = table.addRow(row);
     *     // Table({
     *     //     "a": [1, 2, 3],
     *     //     "b": [4, 5, 6],
     *     // })
     * }
     */
    @Pure
    @PythonName("add_row")
    fun addRow(
        row: Row
    ) -> newTable: Table

    /**
     * Return a new `Table` with multiple added Rows attached.
     *
     * The order of columns of the new rows will be adjusted to the order of columns in the table.
     * The new table will contain the merged schema.
     *
     * The original table is not modified.
     *
     * @param rows The rows to be added.
     *
     * @result newTable A new table which combines the original table and the given rows.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [5, 6]});
     *     val row1 = Row({"a": 3, "b": 7});
     *     val row2 = Row({"a": 4, "b": 8});
     *     val newTable = table.addRows([row1, row2]);
     *     // Table({
     *     //     "a": [1, 2, 3, 4],
     *     //     "b": [5, 6, 7, 8],
     *     // })
     * }
     */
    @Pure
    @PythonName("add_rows")
    fun addRows(
        rows: union<List<Row>, Table>
    ) -> newTable: Table

    /**
     * Return a new table with rows filtered by Callable (e.g. lambda function).
     *
     * The original table is not modified.
     *
     * @param query A Callable that is applied to all rows.
     *
     * @result filteredTable A table containing only the rows filtered by the query.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val filteredTable = table.filterRows((row) ->
     *         row.getValue("a") as (Int) > 1
     *     );
     *     // Table({"a": [2], "b": [4]})
     * }
     */
    @Pure
    @PythonName("filter_rows")
    fun filterRows(
        query: (row: Row) -> matches: Boolean
    ) -> filteredTable: Table

    /**
     * Return a map with copies of the output tables as values and the keys from the key_selector.
     *
     * The original table is not modified.
     *
     * @param keySelector A Callable that is applied to all rows and returns the key of the group.
     *
     * @result tablesByKey A map containing the new tables as values and the selected keys as keys.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2, 3], "b": [4, 5, 6]});
     *     val tablesByKey = table.groupRows((row) ->
     *         row.getValue("a") as (Int) <= 2
     *     );
     *     // {
     *     //     true: Table({"a": [1, 2], "b": [4, 5]}),
     *     //     false: Table({"a": [3], "b": [6]}),
     *     // }
     * }
     */
    @Pure
    @PythonName("group_rows")
    fun groupRows<T>(
        @PythonName("key_selector") keySelector: (row: Row) -> key: T
    ) -> tablesByKey: Map<T, Table>

    /**
     * Return a new table with only the given column(s).
     *
     * The original table is not modified.
     *
     * Note: When removing the last column of the table, the `number_of_columns` property will be set to 0.
     *
     * @param columnNames A list containing only the columns to be kept.
     *
     * @result projectedTable A table containing only the given column(s).
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val projectedTable = table.keepOnlyColumns(["a"]);
     *     // Table({"a": [1, 2]})
     * }
     */
    @Pure
    @PythonName("keep_only_columns")
    fun keepOnlyColumns(
        @PythonName("column_names") columnNames: List<String>
    ) -> projectedTable: Table

    /**
     * Return a new table without the given column(s).
     *
     * The original table is not modified.
     *
     * Note: When removing the last column of the table, the `number_of_columns` property will be set to 0.
     *
     * @param columnNames A list containing all columns to be dropped.
     *
     * @result projectedTable A table without the given columns.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val projectedTable = table.removeColumns(["a"]);
     *     // Table({"b": [3, 4]})
     * }
     */
    @Pure
    @PythonName("remove_columns")
    fun removeColumns(
        @PythonName("column_names") columnNames: List<String>
    ) -> projectedTable: Table

    /**
     * Return a new table without the columns that contain missing values.
     *
     * The original table is not modified.
     *
     * Note: When removing the last column of the table, the `number_of_columns` property will be set to 0.
     *
     * @result projectedTable A table without the columns that contain missing values.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, null], "b": [3, 4]});
     *     val projectedTable = table.removeColumnsWithMissingValues();
     *     // Table({"b": [3, 4]})
     * }
     */
    @Pure
    @PythonName("remove_columns_with_missing_values")
    fun removeColumnsWithMissingValues() -> projectedTable: Table

    /**
     * Return a new table without the columns that contain non-numerical values.
     *
     * The original table is not modified.
     *
     * Note: When removing the last column of the table, the `number_of_columns` property will be set to 0.
     *
     * @result projectedTable A table without the columns that contain non-numerical values.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": ["z", "y"], "b": [1, 2]});
     *     val projectedTable = table.removeColumnsWithNonNumericalValues();
     *     // Table({"b": [1, 2]})
     * }
     */
    @Pure
    @PythonName("remove_columns_with_non_numerical_values")
    fun removeColumnsWithNonNumericalValues() -> projectedTable: Table

    /**
     * Return a new table with every duplicate row removed.
     *
     * The original table is not modified.
     *
     * @result filteredTable The table with the duplicate rows removed.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2, 1], "b": [3, 4, 3]});
     *     val filteredTable = table.removeDuplicateRows();
     *     // Table({"a": [1, 2], "b": [3, 4]})
     * }
     */
    @Pure
    @PythonName("remove_duplicate_rows")
    fun removeDuplicateRows() -> filteredTable: Table

    /**
     * Return a new table without the rows that contain missing values.
     *
     * The original table is not modified.
     *
     * @result filteredTable A table without the rows that contain missing values.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, null], "b": [3, 4]});
     *     val filteredTable = table.removeRowsWithMissingValues();
     *     // Table({"a": [1], "b": [3]})
     * }
     */
    @Pure
    @PythonName("remove_rows_with_missing_values")
    fun removeRowsWithMissingValues() -> filteredTable: Table

    /**
     * Return a new table without those rows that contain at least one outlier.
     *
     * We define an outlier as a value that has a distance of more than 3 standard deviations from the column mean.
     * Missing values are not considered outliers. They are also ignored during the calculation of the standard
     * deviation.
     *
     * The original table is not modified.
     *
     * @result filteredTable A new table without rows containing outliers.
     *
     * @example
     * pipeline example {
     *     val table = Table({
     *         "a": [1,   2,    3,   4, 5,   6, 7,    8, 9,  10,    11],
     *         "b": [0, 0.1, -0.1, 0.2, 0, 0.1, 0, -0.3, 0, 0.3,  1000]
     *     });
     *     val filteredTable = table.removeRowsWithOutliers();
     *     // Table({
     *     //     "a": [1,   2,    3,   4, 5,   6, 7,    8, 9,  10],
     *     //     "b": [0, 0.1, -0.1, 0.2, 0, 0.1, 0, -0.3, 0, 0.3]
     *     // })
     * }
     */
    @Pure
    @PythonName("remove_rows_with_outliers")
    fun removeRowsWithOutliers() -> filteredTable: Table

    /**
     * Return a new `Table` with a single column renamed.
     *
     * The original table is not modified.
     *
     * @param oldName The old name of the target column.
     * @param newName The new name of the target column.
     *
     * @result newTable The Table with the renamed column.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val newTable = table.renameColumn("a", "c");
     *     // Table({"c": [1, 2], "b": [3, 4]})
     * }
     */
    @Pure
    @PythonName("rename_column")
    fun renameColumn(
        @PythonName("old_name") oldName: String,
        @PythonName("new_name") newName: String
    ) -> newTable: Table

    /**
     * Return a new table with the specified old column replaced by a list of new columns.
     *
     * The order of columns is kept.
     *
     * The original table is not modified.
     *
     * @param oldColumnName The name of the column to be replaced.
     * @param newColumns The list of new columns replacing the old column.
     *
     * @result newTable A table with the old column replaced by the new columns.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val column = Column("c", [5, 6]);
     *     val newTable = table.replaceColumn("a", [column]);
     *     // Table({"c": [5, 6], "b": [3, 4]})
     * }
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val column1 = Column("c", [5, 6]);
     *     val column2 = Column("d", [7, 8]);
     *     val newTable = table.replaceColumn("a", [column1, column2]);
     *     // Table({"c": [5, 6], "d": [7, 8], "b": [3, 4]})
     * }
     */
    @Pure
    @PythonName("replace_column")
    fun replaceColumn(
        @PythonName("old_column_name") oldColumnName: String,
        @PythonName("new_columns") newColumns: List<Column>
    ) -> newTable: Table

    /**
     * Return a new `Table` with randomly shuffled rows of this `Table`.
     *
     * The original table is not modified.
     *
     * @result shuffledTable The shuffled Table.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2, 3], "b": [4, 5, 6]});
     *     val shuffledTable = table.shuffleRows();
     * }
     */
    @Pure
    @PythonName("shuffle_rows")
    fun shuffleRows() -> shuffledTable: Table

    /**
     * Slice a part of the table into a new table.
     *
     * The original table is not modified.
     *
     * @param start The first index of the range to be copied into a new table, None by default.
     * @param end The last index of the range to be copied into a new table, None by default.
     * @param step The step size used to iterate through the table, 1 by default.
     *
     * @result slicedTable The resulting table.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2, 3], "b": [4, 5, 6]});
     *     val slicedTable = table.sliceRows(start = 1);
     *     // Table({"a": [2, 3], "b": [5, 6]})
     * }
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2, 3], "b": [4, 5, 6]});
     *     val slicedTable = table.sliceRows(end = 2);
     *     // Table({"a": [1, 2], "b": [4, 5]})
     * }
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2, 3], "b": [4, 5, 6]});
     *     val slicedTable = table.sliceRows(step = 2);
     *     // Table({"a": [1, 3], "b": [4, 6]})
     * }
     */
    @Pure
    @PythonName("slice_rows")
    fun sliceRows(
        start: Int? = null,
        end: Int? = null,
        step: Int = 1
    ) -> slicedTable: Table

    /**
     * Sort the columns of a `Table` with the given comparator and return a new `Table`.
     *
     * The comparator is a function that takes two columns `col1` and `col2` and
     * returns an integer:
     *
     * * If `col1` should be ordered before `col2`, the function should return a negative number.
     * * If `col1` should be ordered after `col2`, the function should return a positive number.
     * * If the original order of `col1` and `col2` should be kept, the function should return 0.
     *
     * If no comparator is given, the columns will be sorted alphabetically by their name.
     *
     * The original table is not modified.
     *
     * @param comparator The function used to compare two columns.
     *
     * @result sortedTable A new table with sorted columns.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val sortedTable = table.sortColumns((col1, col2) -> 1);
     *     // Table({"a": [1, 2], "b": [3, 4]})
     * }
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val sortedTable = table.sortColumns((col1, col2) -> -1);
     *     // Table({"b": [3, 4], "a": [1, 2]})
     * }
     */
    @Pure
    @PythonName("sort_columns")
    fun sortColumns(
        comparator: (column1: Column, column2: Column) -> comparison: Int
    ) -> sortedTable: Table

    /**
     * Sort the rows of a `Table` with the given comparator and return a new `Table`.
     *
     * The comparator is a function that takes two rows `row1` and `row2` and
     * returns an integer:
     *
     * * If `row1` should be ordered before `row2`, the function should return a negative number.
     * * If `row1` should be ordered after `row2`, the function should return a positive number.
     * * If the original order of `row1` and `row2` should be kept, the function should return 0.
     *
     * The original table is not modified.
     *
     * @param comparator The function used to compare two rows.
     *
     * @result sortedTable A new table with sorted rows.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val sortedTable = table.sortRows((row1, row2) -> 1);
     *     // Table({"a": [1, 2], "b": [3, 4]})
     * }
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val sortedTable = table.sortRows((row1, row2) -> -1);
     *     // Table({"a": [2, 1], "b": [4, 3]})
     * }
     */
    @Pure
    @PythonName("sort_rows")
    fun sortRows(
        comparator: (row1: Row, row2: Row) -> comparison: Int
    ) -> sortedTable: Table

    /**
     * Split the table into two new tables. Consider using {@link Table.shuffleRows} before splitting to ensure a random
     * distribution of rows in both tables.
     *
     * The original table is not modified.
     *
     * @param ratioInFirst
     * How many rows should be in the first table, expressed as a ratio of the total number of rows. Must be between 0
     * and 1.
     *
     * @result first The first table with the specified size.
     * @result second The second table with the remaining rows.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2, 3, 4], "b": [5, 6, 7, 8]});
     *     val first, val second = table.splitRows(0.5);
     *     // first:  Table({"a": [1, 2], "b": [5, 6]})
     *     // second: Table({"a": [3, 4], "b": [7, 8]})
     * }
     */
    @Pure
    @PythonName("split_rows")
    fun splitRows(
        @PythonName("percentage_in_first") ratioInFirst: Float
    ) -> (first: Table, second: Table)

    /**
     * Return a new `Table` with the provided column transformed by calling the provided transformer.
     *
     * The original table is not modified.
     *
     * @result transformedTable The table with the transformed column.
     *
     * @example
     * pipeline example {
     *     val prices = Table({
     *         "product": ["apple", "banana", "cherry"],
     *         "price":   [    100,        2,        4],
     *     });
     *     val discountedPrices = prices.transformColumn("price", (row) ->
     *         row.getValue("price") as (Int) * 0.5
     *     );
     *     // Table({
     *     //     "product": ["apple", "banana", "cherry"],
     *     //     "price":   [    50,        1,        2],
     *     // })
     * }
     */
    @Pure
    @PythonName("transform_column")
    fun transformColumn(
        name: String,
        transformer: (row: Row) -> newColumnValue: Any?
    ) -> transformedTable: Table

    /**
     * Return a new `Table` with a learned transformation applied to this table.
     *
     * The original table is not modified.
     *
     * @param transformer The transformer which transforms the given table.
     *
     * @result transformedTable The transformed table.
     *
     * @example
     * pipeline example {
     *    val table = Table({"a": [1, null], "b": [3, 4]});
     *    val imputer = Imputer(Imputer.Strategy.Mean).fit(table, ["a"]);
     *    val transformedTable = table.transformTable(imputer);
     *    // Table({"a": [1, 1], "b": [3, 4]})
     * }
     */
    @Pure
    @PythonName("transform_table")
    fun transformTable(
        transformer: TableTransformer
    ) -> transformedTable: Table

    /**
     * Return a new `Table` with the inverted transformation applied by the given transformer.
     *
     * The original table is not modified.
     *
     * @param transformer A transformer that was fitted with columns, which are all present in the table.
     *
     * @result originalTable The original table.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": ["z", "y"], "b": [3, 4]});
     *     val encoder = LabelEncoder().fit(table, ["a"]);
     *     val transformedTable = table.transformTable(encoder);
     *     val originalTable = transformedTable.inverseTransformTable(encoder);
     *     // Table({"a": ["z", "y"], "b": [3, 4]})
     * }
     */
    @Pure
    @PythonName("inverse_transform_table")
    fun inverseTransformTable(
        transformer: InvertibleTableTransformer
    ) -> originalTable: Table

    /**
     * Plot a correlation heatmap for all numerical columns of this `Table`.
     *
     * @result correlationHeatmap The plot as an image.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val correlationHeatmap = table.plotCorrelationHeatmap();
     * }
     */
    @Pure
    @PythonName("plot_correlation_heatmap")
    fun plotCorrelationHeatmap() -> correlationHeatmap: Image

    /**
     * Plot two columns against each other in a lineplot.
     *
     * If there are multiple x-values for a y-value, the resulting plot will consist of a line representing the mean
     * and the lower-transparency area around the line representing the 95% confidence interval.
     *
     * @param xColumnName The column name of the column to be plotted on the x-Axis.
     * @param yColumnName The column name of the column to be plotted on the y-Axis.
     *
     * @result lineplot The plot as an image.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val lineplot = table.plotLineplot("a", "b");
     * }
     */
    @Pure
    @PythonName("plot_lineplot")
    fun plotLineplot(
        @PythonName("x_column_name") xColumnName: String,
        @PythonName("y_column_name") yColumnName: String
    ) -> lineplot: Image

    /**
     * Plot two columns against each other in a scatterplot.
     *
     * @param xColumnName The column name of the column to be plotted on the x-Axis.
     * @param yColumnName The column name of the column to be plotted on the y-Axis.
     *
     * @result scatterplot The plot as an image.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val scatterplot = table.plotScatterplot("a", "b");
     * }
     */
    @Pure
    @PythonName("plot_scatterplot")
    fun plotScatterplot(
        @PythonName("x_column_name") xColumnName: String,
        @PythonName("y_column_name") yColumnName: String
    ) -> scatterplot: Image

    /**
     * Plot a boxplot for every numerical column.
     *
     * @result boxplots The plot as an image.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val boxplots = table.plotBoxplots();
     * }
     */
    @Pure
    @PythonName("plot_boxplots")
    fun plotBoxplots() -> boxplots: Image

    /**
     * Plot a histogram for every column.
     *
     * @param numberOfBins The number of bins to use in the histogram.
     *
     * @result histograms The plot as an image.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val histograms = table.plotHistograms();
     * }
     */
    @Pure
    @PythonName("plot_histograms")
    fun plotHistograms(
        @PythonName("number_of_bins") const numberOfBins: Int = 10
    ) -> histograms: Image where {
        numberOfBins > 0
    }

    /**
     * Write the data from the table into a CSV file.
     *
     * If the file and/or the directories do not exist they will be created. If the file already exists it will be
     * overwritten.
     *
     * @param path The path to the output file.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     table.toCsvFile("path/to/file.csv");
     * }
     */
    @Impure([ImpurityReason.FileWriteToParameterizedPath("path")])
    @PythonName("to_csv_file")
    fun toCsvFile(
        path: String
    )

    /**
     * Write the data from the table into an Excel file.
     *
     * Valid file extensions are `.xls`, '.xlsx', `.xlsm`, `.xlsb`, `.odf`, `.ods` and `.odt`.
     * If the file and/or the directories do not exist, they will be created. If the file already exists, it will be
     * overwritten.
     *
     * @param path The path to the output file.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     table.toExcelFile("path/to/file.xlsx");
     * }
     */
    @Impure([ImpurityReason.FileWriteToParameterizedPath("path")])
    @PythonName("to_excel_file")
    fun toExcelFile(
        path: String
    )

    /**
     * Write the data from the table into a JSON file.
     *
     * If the file and/or the directories do not exist, they will be created. If the file already exists it will be
     * overwritten.
     *
     * @param path The path to the output file.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     table.toJsonFile("path/to/file.json");
     * }
     */
    @Impure([ImpurityReason.FileWriteToParameterizedPath("path")])
    @PythonName("to_json_file")
    fun toJsonFile(
        path: String
    )

    /**
     * Return a map of column names to column values.
     *
     * @result map Map representation of the table.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val map = table.toMap();
     *     // {"a": [1, 2], "b": [3, 4]}
     * }
     */
    @Pure
    @PythonName("to_dict")
    fun toMap() -> map: Map<String, List<Any?>>

    /**
     * Return an HTML representation of the table.
     *
     * @result html The generated HTML.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val html = table.toHtml();
     * }
     */
    @Pure
    @PythonName("to_html")
    fun toHtml() -> html: String

    /**
     * Return a list of the columns.
     *
     * @result columns List of columns.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val columns = table.toColumns();
     *     // [Column("a", [1, 2]), Column("b", [3, 4])]
     * }
     */
    @Pure
    @PythonName("to_columns")
    fun toColumns() -> columns: List<Column>

    /**
     * Return a list of the rows.
     *
     * @result rows List of rows.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [1, 2], "b": [3, 4]});
     *     val rows = table.toRows();
     *     // [Row({"a": 1, "b": 3}), Row({"a": 2, "b": 4})]
     * }
     */
    @Experimental
    @Pure
    @PythonName("to_rows")
    fun toRows() -> rows: List<Row>

    /**
     * Return a new `TabularDataset` with columns marked as a target column or feature columns.
     *
     * The original table is not modified.
     *
     * @param targetName
     * Name of the target column.
     *
     * @param extraNames
     * Names of the columns that are neither features nor target. If None, no extra columns are used, i.e. all but the
     * target column are used as features.
     *
     * @result dataset A new tabular dataset with the given target and extras.
     *
     * @example
     * pipeline example {
     *     val table = Table({
     *         "age":      [23, 16],
     *         "survived": [ 0,  1],
     *     });
     *     val dataset = table.toTabularDataset("survived");
     * }
     *
     * @example
     * pipeline example {
     *     val table = Table({
     *         "id":       [ 1,  2],
     *         "age":      [23, 16],
     *         "survived": [ 0,  1],
     *     });
     *     val dataset = table.toTabularDataset("target", extraNames = ["id"]);
     * }
     */
    @Pure
    @PythonName("to_tabular_dataset")
    fun toTabularDataset(
        @PythonName("target_name") targetName: String,
        @PythonName("extra_names") extraNames: List<String> = []
    ) -> dataset: TabularDataset
}
