package safeds.data.tabular.plotting

from safeds.data.image.containers import Image
from safeds.data.tabular.containers import Table

/**
 * A class that contains plotting methods for a table.
 *
 * @param table The table to plot.
 *
 * @example
 * pipeline example {
 *     val table = Table({"test": [1, 2, 3]});
 *     val plotter = table.plot;
 * }
 */
class TablePlotter(
    table: Table
) {
    /**
     * Plot a boxplot for every numerical column.
     *
     * @result plot The plot as an image.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a":[1, 2], "b": [3, 42]});
     *     val image = table.plot.boxPlots();
     * }
     */
    @Pure
    @PythonName("box_plots")
    fun boxPlots() -> plot: Image

    /**
     * Plot a correlation heatmap for all numerical columns of this `Table`.
     *
     * @result plot The plot as an image.
     *
     * @example
     * pipeline example {
     *     val table = Table({"temperature": [10, 15, 20, 25, 30], "sales": [54, 74, 90, 206, 210]});
     *     val image = table.plot.correlationHeatmap();
     * }
     */
    @Pure
    @PythonName("correlation_heatmap")
    fun correlationHeatmap() -> plot: Image

    /**
     * Plot a histogram for every column.
     *
     * @param maxBinCount The maximum number of bins to use in the histogram. Default is 10.
     *
     * @result plot The plot as an image.
     *
     * @example
     * pipeline example {
     *     val table = Table({"a": [2, 3, 5, 1], "b": [54, 74, 90, 2014]});
     *     val image = table.plot.histograms();
     * }
     */
    @Pure
    fun histograms(
        @PythonName("max_bin_count") const maxBinCount: Int = 10
    ) -> plot: Image where {
        maxBinCount > 0
    }

    /**
     * Create a line plot for two columns in the table.
     *
     * @param xName The name of the column to be plotted on the x-axis.
     * @param yName The name of the column to be plotted on the y-axis.
     *
     * @result plot The plot as an image.
     *
     * @example
     * pipeline example {
     *     val table = Table(
     *         {
     *             "a": [1, 2, 3, 4, 5],
     *             "b": [2, 3, 4, 5, 6],
     *         }
     *     );
     *     val image = table.plot.linePlot("a", "b");
     * }
     */
    @Pure
    @PythonName("line_plot")
    fun linePlot(
        @PythonName("x_name") xName: String,
        @PythonName("y_name") yName: String
    ) -> plot: Image

    /**
     * Create a scatter plot for two columns in the table.
     *
     * @param xName The name of the column to be plotted on the x-axis.
     * @param yName The name of the column to be plotted on the y-axis.
     *
     * @result plot The plot as an image.
     *
     * @example
     * pipeline example {
     *     val table = Table(
     *         {
     *             "a": [1, 2, 3, 4, 5],
     *             "b": [2, 3, 4, 5, 6],
     *         }
     *     );
     *     val image = table.plot.scatterPlot("a", "b");
     * }
     */
    @Pure
    @PythonName("scatter_plot")
    fun scatterPlot(
        @PythonName("x_name") xName: String,
        @PythonName("y_name") yName: String
    ) -> plot: Image
}
