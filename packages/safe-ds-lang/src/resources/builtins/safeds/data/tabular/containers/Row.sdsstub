package safeds.data.tabular.containers

from safeds.data.tabular.typing import DataType
from safeds.data.tabular.typing import Schema

/**
 * A one-dimensional collection of named, heterogeneous values.
 *
 * This class cannot be instantiated directly. It is only used for arguments of callbacks.
 */
class Row {
    /**
     * The names of the columns in the row.
     */
    @PythonName("column_names") attr columnNames: List<String>
    /**
     * The number of columns in the row.
     */
    @PythonName("column_count") attr columnCount: Int
    /**
     * The schema of the row.
     */
    attr ^schema: Schema

    /**
     * Get the value of the specified column. This WILL LATER BE equivalent to using the `[]` operator (indexed access).
     *
     * @param name The name of the column.
     *
     * @result value The value of the column.
     *
     * @example
     * pipeline example {
     *     val table = Table({"col1": [1, 2], "col2": [3, 4]});
     *     val result = table.removeRows((row) -> row.getValue("col1").eq(1));
     *     // Table({"col1": [2], "col2": [4]})
     * }
     */
    @Pure
    @PythonName("get_value")
    fun getValue(
        name: String
    ) -> value: Cell<Any>

    /**
     * Get the type of the specified column.
     *
     * @param name The name of the column.
     *
     * @result type The type of the column.
     */
    @Pure
    @PythonName("get_column_type")
    fun getColumnType(
        name: String
    ) -> type: DataType

    /**
     * Check if the row has a column with the specified name.
     *
     * @param name The name of the column.
     *
     * @result hasColumn Whether the row has a column with the specified name.
     */
    @Pure
    @PythonName("has_column")
    fun hasColumn(
        name: String
    ) -> hasColumn: Boolean
}
