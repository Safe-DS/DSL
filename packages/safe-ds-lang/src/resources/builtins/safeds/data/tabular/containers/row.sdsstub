package safeds.data.tabular.containers

from safeds.data.tabular.typing import ColumnType, Schema

/**
 * A row is a collection of named values.
 *
 * @param data The data. If None, an empty row is created.
 *
 * @example
 * pipeline example {
 *     val row = Row({"a": 1, "b": 2});
 * }
 */
class Row(
    data: Map<String, Any>? = null // TODO: update default value to empty map
) {
    /**
     * Return a list of all column names in the row.
     *
     * @example
     * pipeline example {
     *     val row = Row({"a": 1, "b": 2});
     *     val columnNames = row.columnNames; // ["a", "b"]
     * }
     */
    @PythonName("column_names") attr columnNames: List<String>
    /**
     * Return the number of columns in this row.
     *
     * @example
     * pipeline example {
     *     val row = Row({"a": 1, "b": 2});
     *     val numberOfColumns = row.numberOfColumns; // 2
     * }
     */
    @PythonName("number_of_column") attr numberOfColumns: Int
    /**
     * Return the schema of the row.
     *
     * @example
     * pipeline example {
     *     val row = Row({"a": 1, "b": 2});
     *     val `schema` = row.`schema`;
     * }
     */
    attr `schema`: Schema

    /**
     * Create a row from a dictionary that maps column names to column values.
     *
     * @param data The data.
     *
     * @result row The created row.
     *
     * @example
     * pipeline example {
     *     val row = Row.fromDict({"a": 1, "b": 2});
     * }
     */
    @Pure
    @PythonName("from_dict")
    static fun fromDict(
        data: Map<String, Any>
    ) -> row: Row

    /**
     * Return the value of a specified column.
     *
     * @param columnName The column name.
     *
     * @result value The column value.
     *
     * @example
     * pipeline example {
     *     val row = Row({"a": 1, "b": 2});
     *     val value = row.getValue("a"); // 1
     * }
     */
    @Pure
    @PythonName("get_value")
    fun getValue(
        @PythonName("column_name") columnName: String
    ) -> value: Any

    /**
     * Check whether the row contains a given column.
     *
     * @param columnName The column name.
     *
     * @result hasColumn True, if the row contains the column, False otherwise.
     *
     * @example
     * pipeline example {
     *     val row = Row({"a": 1, "b": 2});
     *     val hasColumn = row.hasColumn("a"); // True
     * }
     */
    @Pure
    @PythonName("has_column")
    fun hasColumn(
        @PythonName("column_name") columnName: String
    ) -> hasColumn: Boolean

    /**
     * Return the type of the specified column.
     *
     * @param columnName The column name.
     *
     * @result type The type of the column.
     *
     * @example
     * pipeline example {
     *     val row = Row({"a": 1, "b": 2});
     *     val type = row.getColumnType("a"); // Integer
     * }
     */
    @Pure
    @PythonName("get_column_type")
    fun getColumnType(
        @PythonName("column_name") columnName: String
    ) -> type: ColumnType

    // // TODO Safe-DS does not support tuple types.
    // /**
    //  * Sort the columns of a `Row` with the given comparator and return a new `Row`.
    //  *
    //  * The original row is not modified. The comparator is a function that takes two tuples of (ColumnName,
    //  * Value) `col1` and `col2` and returns an integer:
    //  *
    //  * * If `col1` should be ordered before `col2`, the function should return a negative number.
    //  * * If `col1` should be ordered after `col2`, the function should return a positive number.
    //  * * If the original order of `col1` and `col2` should be kept, the function should return 0.
    //  *
    //  * If no comparator is given, the columns will be sorted alphabetically by their name.
    //  *
    //  * @param comparator The function used to compare two tuples of (ColumnName, Value).
    //  *
    //  * @result sortedRow A new row with sorted columns.
    //  *
    //  * @example
    //  * pipeline example {
    //  *     // TODO
    //  * }
    //  */
    // @Pure
    // @PythonName("sort_columns")
    // fun sortColumns(
    //     comparator: (param1: Tuple<Any>, param2: Tuple<Any>) -> param3: Int
    // ) -> sortedRow: Row

    /**
     * Return a map of column names to column values.
     *
     * @result map Map representation of the row.
     *
     * @example
     * pipeline example {
     *     val row = Row({"a": 1, "b": 2});
     *     val map = row.toMap(); // {"a": 1, "b": 2}
     * }
     */
    @Pure
    @PythonName("to_dict")
    fun toMap() -> map: Map<String, Any>

    /**
     * Return an HTML representation of the row.
     *
     * @result html The generated HTML.
     *
     * @example
     * pipeline example {
     *     val row = Row({"a": 1, "b": 2});
     *     val html = row.toHtml();
     * }
     */
    @Pure
    @PythonName("to_html")
    fun toHtml() -> html: String
}
