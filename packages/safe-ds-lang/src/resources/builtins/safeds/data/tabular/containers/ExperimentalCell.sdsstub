package safeds.data.tabular.containers

/**
 * A single value in a table.
 *
 * This class cannot be instantiated directly. It is only used for arguments of callbacks.
 */
@Experimental
class ExperimentalCell<T = Any?> {
    /**
     * Negate a boolean. This is equivalent to the `~` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [True, False])
     *     // column.transform(lambda cell: cell.not_())
     * }
     */
    @Pure
    @PythonName("not_")
    fun ^not() -> result: ExperimentalCell<Boolean>

    /**
     * Perform a boolean AND operation. This is equivalent to the `&` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [True, False])
     *     // column.transform(lambda cell: cell.and_(False))
     * }
     */
    @Pure
    @PythonName("and_")
    fun ^and(
        other: union<Boolean, ExperimentalCell<Boolean>>
    ) -> result: ExperimentalCell<Boolean>

    /**
     * Perform a boolean OR operation. This is equivalent to the `|` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [True, False])
     *     // column.transform(lambda cell: cell.or_(True))
     * }
     */
    @Pure
    @PythonName("or_")
    fun ^or(
        other: union<Boolean, ExperimentalCell<Boolean>>
    ) -> result: ExperimentalCell<Boolean>

    /**
     * Perform a boolean XOR operation. This is equivalent to the `^` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [True, False])
     *     // column.transform(lambda cell: cell.xor(True))
     * }
     */
    @Pure
    fun xor(
        other: union<Boolean, ExperimentalCell<Boolean>>
    ) -> result: ExperimentalCell<Boolean>

    /**
     * Get the absolute value.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [1, -2])
     *     // column.transform(lambda cell: cell.abs())
     * }
     */
    @Pure
    fun abs() -> result: ExperimentalCell

    /**
     * Round up to the nearest integer.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [1.1, 2.9])
     *     // column.transform(lambda cell: cell.ceil())
     * }
     */
    @Pure
    fun ceil() -> result: ExperimentalCell

    /**
     * Round down to the nearest integer.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [1.1, 2.9])
     *     // column.transform(lambda cell: cell.floor())
     * }
     */
    @Pure
    fun floor() -> result: ExperimentalCell

    /**
     * Negate the value.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [1, -2])
     *     // column.transform(lambda cell: cell.neg())
     * }
     */
    @Pure
    fun neg() -> result: ExperimentalCell

    /**
     * Add a value. This is equivalent to the `+` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [1, 2])
     *     // column.transform(lambda cell: cell.add(3))
     * }
     */
    @Pure
    fun add(
        other: Any
    ) -> result: ExperimentalCell

    /**
     * Perform a modulo operation. This is equivalent to the `%` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [5, 6])
     *     // column.transform(lambda cell: cell.mod(3))
     * }
     */
    @Pure
    fun mod(
        other: Any
    ) -> result: ExperimentalCell

    /**
     * Multiply by a value. This is equivalent to the `*` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [2, 3])
     *     // column.transform(lambda cell: cell.mul(4))
     * }
     */
    @Pure
    fun mul(
        other: Any
    ) -> result: ExperimentalCell

    /**
     * Raise to a power. This is equivalent to the `**` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [2, 3])
     *     // column.transform(lambda cell: cell.pow(3))
     * }
     */
    @Pure
    fun pow(
        other: union<ExperimentalCell, Float>
    ) -> result: ExperimentalCell

    /**
     * Subtract a value. This is equivalent to the `-` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [5, 6])
     *     // column.transform(lambda cell: cell.sub(3))
     * }
     */
    @Pure
    fun ^sub(
        other: Any
    ) -> result: ExperimentalCell

    /**
     * Divide by a value. This is equivalent to the `/` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [6, 8])
     *     // column.transform(lambda cell: cell.div(2))
     * }
     */
    @Pure
    fun div(
        other: Any
    ) -> result: ExperimentalCell

    /**
     * Check if equal to a value. This is equivalent to the `==` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [1, 2])
     *     // column.transform(lambda cell: cell.eq(2))
     * }
     */
    @Pure
    fun eq(
        other: Any
    ) -> result: ExperimentalCell<Boolean>

    /**
     * Check if greater than or equal to a value. This is equivalent to the `>=` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [1, 2])
     *     // column.transform(lambda cell: cell.ge(2))
     * }
     */
    @Pure
    fun ge(
        other: Any
    ) -> result: ExperimentalCell<Boolean>

    /**
     * Check if greater than a value. This is equivalent to the `>` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [1, 2])
     *     // column.transform(lambda cell: cell.gt(2))
     * }
     */
    @Pure
    fun gt(
        other: Any
    ) -> result: ExperimentalCell<Boolean>

    /**
     * Check if less than or equal to a value. This is equivalent to the `<=` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [1, 2])
     *     // column.transform(lambda cell: cell.le(2))
     * }
     */
    @Pure
    fun le(
        other: Any
    ) -> result: ExperimentalCell<Boolean>

    /**
     * Check if less than a value. This is equivalent to the `<` operator.
     *
     * @example
     * pipeline example {
     *     // from safeds.data.tabular.containers import ExperimentalColumn
     *     // column = ExperimentalColumn("example", [1, 2])
     *     // column.transform(lambda cell: cell.lt(2))
     * }
     */
    @Pure
    fun lt(
        other: Any
    ) -> result: ExperimentalCell<Boolean>
}
