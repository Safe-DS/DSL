package safeds.data.tabular.containers

from safeds.data.tabular.containers import Table
from safeds.data.tabular.plotting import ColumnPlotter
from safeds.data.tabular.typing import DataType

/**
 * A named, one-dimensional collection of homogeneous values.
 *
 * @param name The name of the column.
 * @param data The data of the column.
 *
 * @example
 * pipeline example {
 *     val column = Column("test", [1, 2, 3]);
 * }
 */
@Category(DataScienceCategory.BasicElement)
class Column<out T = Any?>(
    name: String,
    data: List<T>,
) {
    /**
     * Whether the column is numeric.
     */
    @PythonName("is_numeric") attr isNumeric: Boolean
    /**
     * Whether the column is temporal.
     */
    @PythonName("is_temporal") attr isTemporal: Boolean
    /**
     * The name of the column.
     */
    attr name: String
    /**
     * The number of rows in the column.
     */
    @PythonName("row_count") attr rowCount: Int
    /**
     * The plotter for the column.
     */
    attr plot: ColumnPlotter
    /**
     * The type of the column.
     */
    attr type: DataType

    /**
     * Return the distinct values in the column.
     *
     * @param ignoreMissingValues Whether to ignore missing values.
     *
     * @result distinctValues The distinct values in the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3, 2]);
     *     val result = column.getDistinctValues();
     *     // [1, 2, 3]
     * }
     */
    @Pure
    @PythonName("get_distinct_values")
    fun getDistinctValues(
        @PythonName("ignore_missing_values") ignoreMissingValues: Boolean = true,
    ) -> distinctValues: List<T?>

    /**
     * Return the column value at specified index. This is equivalent to the `[]` operator (indexed access).
     *
     * Nonnegative indices are counted from the beginning (starting at 0), negative indices from the end (starting at
     * -1).
     *
     * @param index Index of requested value.
     *
     * @result value Value at index.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.getValue(1); // 2
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column[1]; // 2
     * }
     */
    @Pure
    @PythonName("get_value")
    fun getValue(
        index: Int
    ) -> value: T

    /**
     * Return whether all values in the column satisfy the predicate.
     *
     * The predicate can return one of three values:
     *
     * - true, if the value satisfies the predicate.
     * - false, if the value does not satisfy the predicate.
     * - null, if the truthiness of the predicate is unknown, e.g. due to missing values.
     *
     * By default, cases where the truthiness of the predicate is unknown are ignored and this method returns:
     *
     * - true, if the predicate always returns true or null.
     * - false, if the predicate returns false at least once.
     *
     * You can instead enable Kleene logic by setting `ignoreUnknown = false`. In this case, this method returns:
     *
     * - true, if the predicate always returns true.
     * - false, if the predicate returns false at least once.
     * - null, if the predicate never returns false, but at least once null.
     *
     * @param predicate The predicate to apply to each value.
     * @param ignoreUnknown Whether to ignore cases where the truthiness of the predicate is unknown.
     *
     * @result allSatisfyPredicate Whether all values in the column satisfy the predicate.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.all((cell) -> cell > 0); // true
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.all((cell) -> cell < 3); // false
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataExplorationQGeneral)
    fun all(
        predicate: (cell: Cell<T>) -> satisfiesPredicate: Cell<Boolean?>,
        @PythonName("ignore_unknown") ignoreUnknown: Boolean = true,
    ) -> allSatisfyPredicate: Boolean?

    /**
     * Return whether any value in the column satisfies the predicate.
     *
     * The predicate can return one of three values:
     *
     * - true, if the value satisfies the predicate.
     * - false, if the value does not satisfy the predicate.
     * - null, if the truthiness of the predicate is unknown, e.g. due to missing values.
     *
     * By default, cases where the truthiness of the predicate is unknown are ignored and this method returns:
     *
     * - true, if the predicate returns true at least once.
     * - false, if the predicate always returns false or null.
     *
     * You can instead enable Kleene logic by setting `ignoreUnknown = false`. In this case, this method returns:
     *
     * - true, if the predicate returns true at least once.
     * - false, if the predicate always returns false.
     * - null, if the predicate never returns true, but at least once null.
     *
     * @param predicate The predicate to apply to each value.
     * @param ignoreUnknown Whether to ignore cases where the truthiness of the predicate is unknown.
     *
     * @result anySatisfyPredicate Whether any value in the column satisfies the predicate.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.any((cell) -> cell > 2); // true
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.any((cell) -> cell < 0); // false
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataExplorationQGeneral)
    fun any(
        predicate: (cell: Cell<T>) -> satisfiesPredicate: Cell<Boolean?>,
        @PythonName("ignore_unknown") ignoreUnknown: Boolean = true,
    ) -> anySatisfyPredicate: Boolean?

    /**
     * Return how many values in the column satisfy the predicate.
     *
     * The predicate can return one of three results:
     *
     * - true, if the value satisfies the predicate.
     * - false, if the value does not satisfy the predicate.
     * - null, if the truthiness of the predicate is unknown, e.g. due to missing values.
     *
     * By default, cases where the truthiness of the predicate is unknown are ignored and this method returns how
     * often the predicate returns true.
     *
     * You can instead enable Kleene logic by setting `ignore_unknown = False`. In this case, this method returns null
     * if the predicate returns null at least once. Otherwise, it still returns how often the predicate returns true.
     *
     * @param predicate The predicate to apply to each value.
     * @param ignoreUnknown Whether to ignore cases where the truthiness of the predicate is unknown.
     *
     * @result count The number of values in the column that satisfy the predicate.
     *
     * @example
     * pipeline example {
     *    val column = Column("test", [1, 2, 3]);
     *    val result = column.countIf((cell) -> cell > 1); // 2
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.countIf((cell) -> cell < 0); // 0
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataExplorationQGeneral)
    fun countIf(
        predicate: (cell: Cell<T>) -> satisfiesPredicate: Cell<Boolean?>,
        @PythonName("ignore_unknown") ignoreUnknown: Boolean = true,
    ) -> count: Int?

    /**
     * Return whether no value in the column satisfies the predicate.
     *
     * The predicate can return one of three values:
     *
     * - true, if the value satisfies the predicate.
     * - false, if the value does not satisfy the predicate.
     * - null, if the truthiness of the predicate is unknown, e.g. due to missing values.
     *
     * By default, cases where the truthiness of the predicate is unknown are ignored and this method returns:
     *
     * - true, if the predicate always returns false or null.
     * - false, if the predicate returns true at least once.
     *
     * You can instead enable Kleene logic by setting `ignoreUnknown = false`. In this case, this method returns:
     *
     * - true, if the predicate always returns false.
     * - false, if the predicate returns true at least once.
     * - null, if the predicate never returns true, but at least once null.
     *
     * @param predicate The predicate to apply to each value.
     * @param ignoreUnknown Whether to ignore cases where the truthiness of the predicate is unknown.
     *
     * @result noneSatisfyPredicate Whether no value in the column satisfies the predicate.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.none((cell) -> cell < 0); // true
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.none((cell) -> cell > 2); // false
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataExplorationQGeneral)
    fun none(
        predicate: (cell: Cell<T>) -> satisfiesPredicate: Cell<Boolean?>,
        @PythonName("ignore_unknown") ignoreUnknown: Boolean = true,
    ) -> noneSatisfyPredicate: Int?

    /**
     * Return a new column with a new name.
     *
     * **Note:** The original column is not modified.
     *
     * @param newName The new name of the column.
     *
     * @result renamedColumn A new column with the new name.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.rename("new_name");
     *     // Column("new_name", [1, 2, 3])
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataProcessingQColumn)
    fun rename(
        @PythonName("new_name") newName: String
    ) -> renamedColumn: Column<T>

    /**
     * Return a new column with values transformed by the transformer.
     *
     * **Note:** The original column is not modified.
     *
     * @param transformer The transformer to apply to each value.
     *
     * @result transformedColumn A new column with transformed values.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.transform((cell) -> cell * 2);
     *     // Column("test", [2, 4, 6])
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataProcessingQColumn)
    fun transform<R>(
        transformer: (cell: Cell<T>) -> transformedCell: Cell<R>
    ) -> transformedColumn: Column<R>

    /**
     * Return a table with important statistics about the column.
     *
     * @result statistics The table with statistics.
     *
     * @example
     * pipeline example {
     *     val column = Column("a", [1, 3]);
     *     val result = column.summarizeStatistics();
     * }
     */
    @Pure
    @PythonName("summarize_statistics")
    fun summarizeStatistics() -> statistics: Table

    /**
     * Calculate the Pearson correlation between this column and another column.
     *
     * The Pearson correlation is a value between -1 and 1 that indicates how much the two columns are linearly
     * related:
     *
     * - A correlation of -1 indicates a perfect negative linear relationship.
     * - A correlation of 0 indicates no linear relationship.
     * - A correlation of 1 indicates a perfect positive linear relationship.
     *
     * @param other The other column to calculate the correlation with.
     *
     * @result correlation The Pearson correlation between the two columns.
     *
     * @example
     * pipeline example {
     *     val column1 = Column("test", [1, 2, 3]);
     *     val column2 = Column("test", [2, 4, 6]);
     *     val result = column1.correlationWith(column2);
     * }
     *
     * @example
     * pipeline example {
     *     val column1 = Column("test", [1, 2, 3]);
     *     val column2 = Column("test", [3, 2, 1]);
     *     val result = column1.correlationWith(column2);
     * }
     */
    @Pure
    @PythonName("correlation_with")
    @Category(DataScienceCategory.DataExplorationQMetric)
    fun correlationWith(
        other: Column<Any>
    ) -> correlation: Float

    /**
     * Return the number of distinct values in the column.
     *
     * @param ignoreMissingValues Whether to ignore missing values when counting distinct values.
     *
     * @result distinctValueCount The number of distinct values in the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3, 2]);
     *     val result = column.distinctValueCount(); // 3
     * }
     */
    @Pure
    @PythonName("distinct_value_count")
    @Category(DataScienceCategory.DataExplorationQMetric)
    fun distinctValueCount(
        @PythonName("ignore_missing_values") ignoreMissingValues: Boolean = true
    ) -> distinctValueCount: Int

    /**
     * Calculate the idness of this column.
     *
     * We define the idness as the number of distinct values (including missing values) divided by the number of rows.
     * If the column is empty, the idness is 1.0.
     *
     * A high idness indicates that the column most values in the column are unique. In this case, you must be careful
     * when using the column for analysis, as a model may learn a mapping from this column to the target.
     *
     * @result idness The idness of the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.idness(); // 1.0
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3, 2]);
     *     val result = column.idness(); // 0.75
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataExplorationQMetric)
    fun idness() -> idness: Float

    /**
     * Return the maximum value in the column.
     *
     * @result max The maximum value in the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.max(); // 3
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataExplorationQMetric)
    fun max() -> max: T?

    /**
     * Return the mean of the values in the column.
     *
     * The mean is the sum of the values divided by the number of values.
     *
     * @result mean The mean of the values in the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.mean(); // 2.0
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataExplorationQMetric)
    fun mean() -> mean: T

    /**
     * Return the median of the values in the column.
     *
     * The median is the value in the middle of the sorted list of values. If the number of values is even, the median
     * is the mean of the two middle values.
     *
     * @result median The median of the values in the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.median(); // 2.0
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataExplorationQMetric)
    fun median() -> median: T

    /**
     * Return the minimum value in the column.
     *
     * @result min The minimum value in the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.min(); // 1
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataExplorationQMetric)
    fun min() -> min: T?

    /**
     * Return the number of missing values in the column.
     *
     * @result missingValueCount The number of missing values in the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, null, 3]);
     *     val result = column.missingValueCount(); // 1
     * }
     */
    @Pure
    @PythonName("missing_value_count")
    @Category(DataScienceCategory.DataExplorationQMetric)
    fun missingValueCount() -> missingValueCount: Int

    /**
     * Return the missing value ratio.
     *
     * We define the missing value ratio as the number of missing values in the column divided by the number of rows.
     * If the column is empty, the missing value ratio is 1.0.
     *
     * A high missing value ratio indicates that the column is dominated by missing values. In this case, the column
     * may not be useful for analysis.
     *
     * @result missingValueRatio The ratio of missing values in the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, null, 3, null]);
     *     val result = column.missingValueRatio(); // 0.5
     * }
     */
    @Pure
    @PythonName("missing_value_ratio")
    @Category(DataScienceCategory.DataExplorationQMetric)
    fun missingValueRatio() -> missingValueRatio: Float

    /**
     * Return the mode of the values in the column.
     *
     * The mode is the value that appears most frequently in the column. If multiple values occur equally often, all
     * of them are returned. The values are sorted in ascending order.
     *
     * @param ignoreMissingValues Whether to ignore missing values.
     *
     * @result mode The mode of the values in the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [3, 1, 2, 1, 3]);
     *     val result = column.mode(); // [1, 3]
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataExplorationQMetric)
    fun mode(
        @PythonName("ignore_missing_values") ignoreMissingValues: Boolean = true,
    ) -> mode: List<T?>

    /**
     * Return the stability of the column.
     *
     * We define the stability as the number of occurrences of the most common non-missing value divided by the total
     * number of non-missing values. If the column is empty or all values are missing, the stability is 1.0.
     *
     * A high stability indicates that the column is dominated by a single value. In this case, the column may not be
     * useful for analysis.
     *
     * @result stability The stability of the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 1, 2, 3, null]);
     *     val result = column.stability(); // 0.5
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataExplorationQMetric)
    fun stability() -> stability: Float

    /**
     * Return the standard deviation of the values in the column.
     *
     * The standard deviation is the square root of the variance.
     *
     * @result standardDeviation The standard deviation of the values in the column. If no standard deviation can be calculated due to the
     * type of the column, null is returned.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.standardDeviation(); // 1.0
     * }
     */
    @Pure
    @PythonName("standard_deviation")
    @Category(DataScienceCategory.DataExplorationQMetric)
    fun standardDeviation() -> standardDeviation: Float

    /**
     * Return the variance of the values in the column.
     *
     * The variance is the average of the squared differences from the mean.
     *
     * @result variance The variance of the values in the column. If no variance can be calculated due to the type of the column,
     * null is returned.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.variance(); // 1.0
     * }
     */
    @Pure
    @Category(DataScienceCategory.DataExplorationQMetric)
    fun variance() -> variance: Float

    /**
     * Return the values of the column in a list.
     *
     * @result values The values of the column in a list.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.toList(); // [1, 2, 3]
     * }
     */
    @Pure
    @PythonName("to_list")
    @Category(DataScienceCategory.UtilitiesQConversion)
    fun toList() -> values: List<T>

    /**
     * Create a table that contains only this column.
     *
     * @result table The table with this column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val result = column.toTable();
     *     // Table({"test": [1, 2, 3]})
     * }
     */
    @Pure
    @PythonName("to_table")
    @Category(DataScienceCategory.UtilitiesQConversion)
    fun toTable() -> table: Table
}
