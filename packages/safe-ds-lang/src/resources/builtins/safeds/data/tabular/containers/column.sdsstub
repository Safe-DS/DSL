package safeds.data.tabular.containers

from safeds.data.image.containers import Image
from safeds.data.tabular.typing import ColumnType

/**
 * A column is a named collection of values.
 *
 * @param name The name of the column.
 * @param data The data.
 *
 * @example
 * pipeline example {
 *     val column = Column("test", [1, 2, 3]);
 * }
 */
class Column<out T = Any?>(
    name: String,
    data: List<T> = []
) {
    /**
     * Return the name of the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val name = column.name; // "test"
     * }
     */
    attr name: String
    /**
     * Return the number of elements in the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val numberOfRows = column.numberOfRows; // 3
     * }
     */
    @PythonName("number_of_rows") attr numberOfRows: Int
    /**
     * Return the type of the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val type = column.type; // Integer
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", ["a", "b", "c"]);
     *     val type = column.type; // String
     * }
     */
    attr type: ColumnType

    /**
     * Return a list of all unique values in the column.
     *
     * @result result1 List of unique values in the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3, 2, 4, 3]);
     *     val uniqueValues = column.getUniqueValues(); // [1, 2, 3, 4]
     * }
     */
    @Pure
    @PythonName("get_unique_values")
    fun getUniqueValues() -> result1: List<T>

    /**
     * Return column value at specified index, starting at 0.
     *
     * @param index Index of requested element.
     *
     * @result result1 Value at index in column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val value = column.getValue(1); // 2
     * }
     */
    @Pure
    @PythonName("get_value")
    fun getValue(
        index: Int
    ) -> result1: T

    /**
     * Check if all values have a given property.
     *
     * @param predicate Callable that is used to find matches.
     *
     * @result allMatch True if all match.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val allMatch = column.all((value) -> value < 4); // true
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val allMatch = column.all((value) -> value < 2); // false
     * }
     */
    @Pure
    fun all(
        predicate: (value: T) -> matches: Boolean
    ) -> allMatch: Boolean

    /**
     * Check if any value has a given property.
     *
     * @param predicate Callable that is used to find matches.
     *
     * @result anyMatch True if any match.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val anyMatch = column.any((value) -> value < 2); // true
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val anyMatch = column.any((value) -> value < 1); // false
     * }
     */
    @Pure
    fun any(
        predicate: (value: T) -> matches: Boolean
    ) -> anyMatch: Boolean

    /**
     * Check if no values has a given property.
     *
     * @param predicate Callable that is used to find matches.
     *
     * @result noneMatch True if none match.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val noneMatch = column.none((value) -> value < 1); // true
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val noneMatch = column.none((value) -> value > 1); // false
     * }
     */
    @Pure
    fun none(
        predicate: (value: T) -> matches: Boolean
    ) -> noneMatch: Boolean

    /**
     * Return whether the column has missing values.
     *
     * @result hasMissingValues True if missing values exist.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3, null]);
     *     val hasMissingValues = column.hasMissingValues(); // true
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val hasMissingValues = column.hasMissingValues(); // false
     * }
     */
    @Pure
    @PythonName("has_missing_values")
    fun hasMissingValues() -> hasMissingValues: Boolean

    /**
     * Return a new column with a new name.
     *
     * The original column is not modified.
     *
     * @param newName The new name of the column.
     *
     * @result renamedColumn A new column with the new name.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val renamedColumn = column.rename("new_name");
     * }
     */
    @Pure
    fun rename(
        @PythonName("new_name") newName: String
    ) -> renamedColumn: Column

    /**
     * Apply a transform method to every data point.
     *
     * The original column is not modified.
     *
     * @param transformer Function that will be applied to all data points.
     *
     * @result transformedColumn The transformed column.
     *
     * @example
     * pipeline example {
     *     val price = Column("price", [4.99, 5.99, 2.49]);
     *     val discountedPrice = price.transform((value) -> value * 0.75);
     * }
     */
    @Pure
    fun transform<R>(
        transformer: (value: T) -> transformedValue: R
    ) -> transformedColumn: Column<R>

    /**
     * Calculate Pearson correlation between this and another column. Both columns have to be numerical.
     *
     * @result correlation Correlation between the two columns.
     *
     * @example
     * pipeline example {
     *     val column1 = Column("test1", [1, 2, 3]);
     *     val column2 = Column("test2", [2, 4, 6]);
     *     val correlation = column1.correlationWith(column2); // 1.0
     * }
     *
     * @example
     * pipeline example {
     *     val column1 = Column("test1", [1, 2, 3]);
     *     val column2 = Column("test2", [3, 2, 1]);
     *     val correlation = column1.correlationWith(column2); // -1.0
     * }
     */
    @Pure
    @PythonName("correlation_with")
    fun correlationWith(
        @PythonName("other_column") otherColumn: Column
    ) -> correlation: Float

    /**
     * Calculate the idness of this column.
     *
     * We define the idness as follows:
     *
     * $$
     * \frac{\text{number of different values}}{\text{number of rows}}
     * $$
     *
     * @result idness The idness of the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val idness = column.idness(); // 1.0
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 2, 3]);
     *     val idness = column.idness(); // 0.75
     * }
     */
    @Pure
    fun idness() -> idness: Float

    /**
     * Return the maximum value of the column. The column has to be numerical.
     *
     * @result maximum The maximum value.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val maximum = column.maximum(); // 3
     * }
     */
    @Pure
    fun maximum() -> maximum: Float

    /**
     * Return the mean value of the column. The column has to be numerical.
     *
     * @result mean The mean value.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val mean = column.mean(); // 2.0
     * }
     */
    @Pure
    fun mean() -> mean: Float

    /**
     * Return the median value of the column. The column has to be numerical.
     *
     * @result median The median value.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val median = column.median(); // 2.0
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3, 4]);
     *     val median = column.median(); // 2.5
     * }
     */
    @Pure
    fun median() -> median: Float

    /**
     * Return the minimum value of the column. The column has to be numerical.
     *
     * @result minimum The minimum value.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val minimum = column.minimum(); // 1
     * }
     */
    @Pure
    fun minimum() -> minimum: Float

    /**
     * Return the number of missing values in the column.
     *
     * @result count The number of missing values.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3, 4]);
     *     val missingValueCount = column.missingValueCount(); // 0
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3, null]);
     *     val missingValueCount = column.missingValueCount(); // 1
     * }
     */
    @Pure
    @PythonName("missing_value_count")
    fun missingValueCount() -> count: Int

    /**
     * Return the ratio of missing values to the total number of elements in the column.
     *
     * @result missinValueRatio The ratio of missing values to the total number of elements in the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3, 4]);
     *     val missingValueRatio = column.missingValueRatio(); // 0.0
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3, null]);
     *     val missingValueRatio = column.missingValueRatio(); // 0.25
     * }
     */
    @Pure
    @PythonName("missing_value_ratio")
    fun missingValueRatio() -> missinValueRatio: Float

    /**
     * Return the mode of the column.
     *
     * @result mode Returns a list with the most common values.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 2, 3]);
     *     val mode = column.mode(); // [2]
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 2, 3, 3]);
     *     val mode = column.mode(); // [2, 3]
     * }
     */
    @Pure
    fun mode() -> mode: List<T>

    /**
     * Calculate the stability of this column.
     *
     * We define the stability as follows:
     *
     * $$
     * \frac{\text{number of occurrences of most common non-null value}}{\text{number of non-null values}}
     * $$
     *
     * The stability is not defined for a column with only null values.
     *
     * @result stability The stability of the column.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 2, 3]);
     *     val stability = column.stability(); // 0.5
     * }
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 2, 3, null]);
     *     val stability = column.stability(); // 0.5
     * }
     */
    @Pure
    fun stability() -> stability: Float

    /**
     * Return the standard deviation of the column. The column has to be numerical.
     *
     * @result standardDeviation The standard deviation of all values.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val standardDeviation = column.standardDeviation(); // 1.0
     * }
     */
    @Pure
    @PythonName("standard_deviation")
    fun standardDeviation() -> standardDeviation: Float

    /**
     * Return the sum of the column. The column has to be numerical.
     *
     * @result sum The sum of all values.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val sum = column.sum(); // 6
     * }
     */
    @Pure
    fun sum() -> sum: Float

    /**
     * Return the variance of the column. The column has to be numerical.
     *
     * @result variance The variance of all values.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val variance = column.variance(); // 1.0
     * }
     */
    @Pure
    fun variance() -> variance: Float

    /**
     * Plot this column in a boxplot. This function can only plot real numerical data.
     *
     * @result boxplot The plot as an image.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val plot = column.plotBoxplot();
     * }
     */
    @Pure
    @PythonName("plot_boxplot")
    fun plotBoxplot() -> boxplot: Image

    /**
     * Plot a column in a histogram.
     *
     * @result histogram The plot as an image.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val plot = column.plotHistogram();
     * }
     */
    @Pure
    @PythonName("plot_histogram")
    fun plotHistogram() -> histogram: Image

    /**
     * Return an HTML representation of the column.
     *
     * @result html The generated HTML.
     *
     * @example
     * pipeline example {
     *     val column = Column("test", [1, 2, 3]);
     *     val html = column.toHtml();
     * }
     */
    @Pure
    @PythonName("to_html")
    fun toHtml() -> html: String
}
