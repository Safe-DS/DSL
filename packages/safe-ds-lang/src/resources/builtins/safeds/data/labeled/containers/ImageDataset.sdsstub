package safeds.data.labeled.containers

from safeds.data.image.containers import ImageList
from safeds.data.image.typing import ImageSize
from safeds.data.labeled.containers import Dataset
from safeds.data.tabular.containers import Table

/**
 * A Dataset for ImageLists as input and ImageLists, Tables or Columns as output.
 *
 * @param inputData The input ImageList
 * @param outputData The output data
 * @param batchSize The batch size used for training
 * @param shuffle Whether the data should be shuffled after each epoch of training
 *
 * @example
 * pipeline example {
 *     val image = Image.fromFile("example.png");
 *     val imageList = ImageList.fromImages([image]);
 *     val labels = Column("label", ["example"]);
 *     val dataset = ImageDataset(imageList, labels);
 * }
 */
@Experimental
class ImageDataset<out O>(
    @PythonName("input_data") inputData: ImageList,
    @PythonName("output_data") outputData: O,
    @PythonName("batch_size") batchSize: Int = 1,
    shuffle: Boolean = false
) sub Dataset<ImageList, O> {
    /**
     * Get the input `ImageSize` of this dataset.
     */
    @PythonName("input_size") attr inputSize: ImageSize
    /**
     * Get the output size of this dataset.
     */
    @PythonName("output_size") attr outputSize: ImageSize

    /**
     * Get the input data of this dataset.
     *
     * @result input the input data of this dataset
     *
     * @example
     * pipeline example {
     *     val image = Image.fromFile("example.png");
     *     val imageList = ImageList.fromImages([image]);
     *     val labels = Column("label", ["example"]);
     *     val dataset = ImageDataset(imageList, labels);
     *     val input = dataset.getInput();
     * }
     */
    @Pure
    @PythonName("get_input")
    fun getInput() -> input: ImageList

    /**
     * Get the output data of this dataset.
     *
     * @result output the output data of this dataset
     *
     * @example
     * pipeline example {
     *     val image = Image.fromFile("example.png");
     *     val imageList = ImageList.fromImages([image]);
     *     val labels = Column("label", ["example"]);
     *     val dataset = ImageDataset(imageList, labels);
     *     val output = dataset.getOutput();
     * }
     */
    @Pure
    @PythonName("get_output")
    fun getOutput() -> output: O

    /**
     * Return a new `ImageDataset` with shuffled data.
     *
     * The original dataset is not modified.
     *
     * @result imageDataset the shuffled `ImageDataset`
     *
     * @example
     * pipeline example {
     *     val image = Image.fromFile("example.png");
     *     val imageList = ImageList.fromImages([image]);
     *     val labels = Column("label", ["example"]);
     *     val dataset = ImageDataset(imageList, labels);
     *     val shuffledDataset = dataset.shuffle();
     * }
     */
    @Pure
    fun shuffle() -> imageDataset: ImageDataset<O>

    /**
     * Create two image datasets by splitting the data of the current dataset.
     *
     * The first dataset contains a percentage of the data specified by `percentage_in_first`, and the second dataset
     * contains the remaining data. By default, the data is shuffled before splitting. You can disable this by setting
     * `shuffle` to False.
     *
     * The original dataset is not modified.
     *
     * @param percentageInFirst The percentage of data to include in the first dataset. Must be between 0 and 1.
     * @param shuffle Whether to shuffle the data before splitting.
     *
     * @result firstDataset The first dataset.
     * @result secondDataset The second dataset.
     */
    @Pure
    fun split(
        @PythonName("percentage_in_first") percentageInFirst: Float,
        shuffle: Boolean = true
    ) -> (firstDataset: ImageDataset<O>, secondDataset: ImageDataset<O>)
}
