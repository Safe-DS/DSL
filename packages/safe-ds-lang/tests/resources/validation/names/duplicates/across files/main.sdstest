package tests.validation.names.acrossFiles

// $TEST$ error "Multiple declarations in this package have the name 'DuplicateAnnotation'."
annotation »DuplicateAnnotation«
// $TEST$ error "Multiple declarations in this package have the name 'DuplicateClass'."
class »DuplicateClass«
// $TEST$ error "Multiple declarations in this package have the name 'DuplicateEnum'."
enum »DuplicateEnum«
// $TEST$ error "Multiple declarations in this package have the name 'duplicateFunction'."
fun »duplicateFunction«()
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
pipeline »duplicatePipeline« {}
// $TEST$ error "Multiple declarations in this package have the name 'DuplicateSchema'."
schema »DuplicateSchema« {}
// $TEST$ error "Multiple declarations in this package have the name 'duplicatePublicSegment'."
segment »duplicatePublicSegment«() {}
// $TEST$ error "Multiple declarations in this package have the name 'duplicateInternalSegment'."
internal segment »duplicateInternalSegment«() {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
private segment »duplicatePrivateSegment«() {}


// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
annotation »UniqueAnnotation«
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
class »UniqueClass«
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
enum »UniqueEnum«
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
fun »uniqueFunction«()
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
pipeline »uniquePipeline« {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
schema »UniqueSchema« {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
segment »uniquePublicSegment«() {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
internal segment »uniqueInternalSegment«() {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
private segment »uniquePrivateSegment«() {}


// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
annotation »MyAnnotation«
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
annotation »MyAnnotation«
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
class »MyClass«
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
class »MyClass«
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
enum »MyEnum«
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
enum »MyEnum«
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
fun »myFunction«()
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
fun »myFunction«()
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
pipeline »myPipeline« {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
pipeline »myPipeline« {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
schema »MySchema« {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
schema »MySchema« {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
segment »myPublicSegment«() {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
segment »myPublicSegment«() {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
internal segment »myInternalSegment«() {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
internal segment »myInternalSegment«() {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
private segment »myPrivateSegment«() {}
// $TEST$ no error r"Multiple declarations in this package have the name '\w*'\."
private segment »myPrivateSegment«() {}
