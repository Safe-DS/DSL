package tests.validation.other.types.unionTypes.context

// $TEST$ no error "Union types must only be used for parameters of annotations, classes, and functions."
typealias Alias = »union<Int>«

annotation MyAnnotation(
    // $TEST$ no error "Union types must only be used for parameters of annotations, classes, and functions."
    p1: »union<Int>«,
    // $TEST$ no error "Union types must only be used for parameters of annotations, classes, and functions."
    p2: »Alias«,
)

class MyClass<T>(
    // $TEST$ no error "Union types must only be used for parameters of annotations, classes, and functions."
    p1: »union<Int>«,
    // $TEST$ no error "Union types must only be used for parameters of annotations, classes, and functions."
    p2: »Alias«,
) {
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    attr a1: »union<Int>«
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    attr a2: »Alias«
}

enum MyEnum {
    MyEnumVariant(
        // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
        p1: »union<Int>«,
        // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
        p2: »Alias«,
    )
}

fun myFunction(
    // $TEST$ no error "Union types must only be used for parameters of annotations, classes, and functions."
    p1: »union<Int>«,
    // $TEST$ no error "Union types must only be used for parameters of annotations, classes, and functions."
    p2: »Alias«,
) -> (
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    r1: »union<Int>«,
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    r2: »Alias«,
)

segment mySegment1(
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    p1: »union<Int>«,
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    p2: »Alias«,
) -> (
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    r1: »union<Int>«,
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    r2: »Alias«,
) {}

segment mySegment2(
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    c1: (p: »union<Int>«) -> (r: »union<Int>«),
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    c2: (p: »Alias«) -> (r: »Alias«),
) {
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    (
        p1: »union<Int>«,
        p2: »Alias«,
    ) {};

    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    (
        p1: »union<Int>«,
        p2: »Alias«,
    ) -> 1;
}

segment mySegment3(
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    p1: MyClass<»union<Int>«>,
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    p2: MyClass<»Alias«>,
) {}

segment mySegment4(
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    p1: »union<Int>«.MyClass,
    // $TEST$ error "Union types must only be used for parameters of annotations, classes, and functions."
    p2: »Alias«.MyClass
) {}
