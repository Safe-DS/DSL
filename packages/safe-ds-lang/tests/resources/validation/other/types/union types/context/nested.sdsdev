package tests.validation.other.types.unionTypes.context

/*
 * We already show an error for the outer union type, if it's used in the wrong context.
 */

class MyClass1 {
    // $TEST$ no error "Union types must only be used for parameters of annotations, classes, and functions."
    attr a1: union<Int, »union<Int, String>«>
    // $TEST$ no error "Union types must only be used for parameters of annotations, classes, and functions."
    attr a2: union<Int, »Alias«>
}

class MyClass2 {
    // $TEST$ no error "Union types must only be used for parameters of annotations, classes, and functions."
    // $TEST$ no error "Union types must only be used for parameters of annotations, classes, and functions."
    attr a1: union<Int, (p: »union<Int, String>«) -> (r: »union<Int, String>«)>
    // $TEST$ no error "Union types must only be used for parameters of annotations, classes, and functions."
    // $TEST$ no error "Union types must only be used for parameters of annotations, classes, and functions."
    attr a2: union<Int, (p: »Alias«) -> (r: »Alias«)>
}
