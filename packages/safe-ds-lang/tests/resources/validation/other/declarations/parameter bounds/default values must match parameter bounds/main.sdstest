package tests.validation.other.declarations.parameterBounds.defaultValuesMustMatchParameterBounds

@Pure fun f1(
    // $TEST$ error "The value of 'notConst1' must be greater than 0 but was 0."
    notConst1: Int = »0«,
    // $TEST$ no error r"The value of '.*' must be .* but was .*\."
    notConst2: Int = »""«,
    // $TEST$ no error r"The value of '.*' must be .* but was .*\."
    notConst3: Int = »p«,
    // $TEST$ no error r"The value of '.*' must be .* but was .*\."
    notConst4: Int = »unresolved«,
) where {
    notConst1 > 0,
    notConst2 > 0,
    notConst3 > 0,
    notConst4 > 0,
}

@Pure fun f2(
    // $TEST$ no error r"The value of '.*' must be .* but was .*\."
    const unbounded1: Int = »1«,
    // $TEST$ no error r"The value of '.*' must be .* but was .*\."
    const unbounded2: Int = »""«,
    // $TEST$ no error r"The value of '.*' must be .* but was .*\."
    const unbounded3: Int = »p«,
    // $TEST$ no error r"The value of '.*' must be .* but was .*\."
    const unbounded4: Int = »unresolved«,
)

@Pure fun f3(
    // $TEST$ error "The value of 'bothBounds1' must be greater than 0 but was 0."
    const bothBounds1: Int = »0«,
    // $TEST$ no error r"The value of '.*' must be .* but was .*\."
    const bothBounds2: Int= »5«,
    // $TEST$ error "The value of 'bothBounds3' must be less than 10 but was 10."
    const bothBounds3: Int = »10«,
) where {
    bothBounds1 > 0,
    bothBounds1 < 10,

    bothBounds2 > 0,
    bothBounds2 < 10,

    bothBounds3 > 0,
    bothBounds3 < 10,
}

@Pure fun f4(
    // $TEST$ error "The value of 'lowerBound1' must be greater than or equal to 0 but was -1."
    const lowerBound1: Int = »-1«,
    // $TEST$ no error r"The value of '.*' must be .* but was .*\."
    const lowerBound2: Int = »0«,
    // $TEST$ error "Cannot verify whether the parameter bounds are always met."
    const indirectLowerBound: Int = »0«,
) where {
    lowerBound1 >= 0,
    lowerBound2 >= 0,
    indirectLowerBound >= lowerBound1,
}

@Pure fun f5(
    // $TEST$ error "The value of 'upperBound1' must be less than or equal to 0 but was 1."
    const upperBound1: Int = »1«,
    // $TEST$ no error r"The value of '.*' must be .* but was .*\."
    const upperBound2: Int = »0«,
    // $TEST$ error "Cannot verify whether the parameter bounds are always met."
    const indirectUpperBound: Int = »0«,
) where {
    upperBound1 <= 0,
    upperBound2 <= 0,
    indirectUpperBound <= upperBound1,
}
