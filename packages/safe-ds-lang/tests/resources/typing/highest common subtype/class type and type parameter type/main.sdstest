package tests.typing.highestCommonSubtype.classTypeAndTypeParameterType

class Contravariant<in T>

class C
class D sub C
class E

class Test<
    ToAnyOrNull,
    ToC sub C,
    ToD sub D,
    ToE sub E,
>(
    c: Contravariant<C>,
    cOrNull: Contravariant<C?>,

    toAnyOrNull: Contravariant<ToAnyOrNull>,
    toAnyOrNullExplicit: Contravariant<ToAnyOrNull?>,
    toC: Contravariant<ToC>,
    toD: Contravariant<ToD>,
    toDOrNullExplicit: Contravariant<ToD?>,
    toE: Contravariant<ToE>,

    // $TEST$ serialization List<Contravariant<Nothing>>
    a1: Any = »[c, toAnyOrNull]«,
    // $TEST$ serialization List<Contravariant<Nothing>>
    a2: Any = »[c, toAnyOrNullExplicit]«,
    // $TEST$ serialization List<Contravariant<ToC>>
    a3: Any = »[c, toC]«,
    // $TEST$ serialization List<Contravariant<ToD>>
    a4: Any = »[c, toD]«,
    // $TEST$ serialization List<Contravariant<ToD>>
    a5: Any = »[c, toDOrNullExplicit]«,
    // $TEST$ serialization List<Contravariant<Nothing>>
    a6: Any = »[c, toE]«,

    // $TEST$ serialization List<Contravariant<Nothing>>
    b1: Any = »[cOrNull, toAnyOrNull]«,
    // $TEST$ serialization List<Contravariant<Nothing?>>
    b2: Any = »[cOrNull, toAnyOrNullExplicit]«,
    // $TEST$ serialization List<Contravariant<ToC>>
    b3: Any = »[cOrNull, toC]«,
    // $TEST$ serialization List<Contravariant<ToD>>
    b4: Any = »[cOrNull, toD]«,
    // $TEST$ serialization List<Contravariant<ToD?>>
    b5: Any = »[cOrNull, toDOrNullExplicit]«,
    // $TEST$ serialization List<Contravariant<Nothing>>
    b6: Any = »[cOrNull, toE]«,
)
