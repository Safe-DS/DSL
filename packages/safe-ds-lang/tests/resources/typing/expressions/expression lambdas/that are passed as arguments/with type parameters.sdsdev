package tests.typing.expressions.expressionLambdas.thatArePassedAsArguments.withTypeParameters

class MySuperclass<T> {
    @Pure fun myInheritedMethod(callback: (p: T) -> ())
}

class MyClass<T>(param: T) sub MySuperclass<T> {
    @Pure fun myMethod(callback: (p: T) -> ())
}

@Pure fun myFunction<T>(p: T, id: (p: T) -> (r: T))

segment mySegment() {
    // $TEST$ serialization (p: literal<1>) -> (result: literal<1>)
    MyClass(1).myMethod(»(p) -> p«);

    // $TEST$ serialization (p: literal<1>) -> (result: literal<1>)
    MyClass(1).myInheritedMethod(»(p) -> p«);

    // $TEST$ serialization (p: literal<1>) -> (result: literal<1>)
    myFunction(1, »(p) -> p«);
}
