package tests.typing.expressions.expressionLambdas.thatArePassedAsArguments.withTypeParameters

class MySuperclass<T> {
    @Pure fun myInheritedMethod(callback: (p: T) -> ())
}

class MyClass<T>(param: T) sub MySuperclass<T> {
    @Pure fun myMethod(callback: (p: T) -> ())
}


@Pure fun myFunction1<T>(p: T, id: (p: T) -> (r: T))
@Pure fun myFunction2<T>(id: (p: T) -> (r: T))
@Pure fun myFunction3<T>(producer: () -> (r: T), consumer: (p: T) -> ())

segment mySegment() {
    // $TEST$ serialization () -> (result: literal<1>)
    // $TEST$ serialization (p: literal<1>) -> (result: literal<1>)
    myFunction3(
        »() -> 1«,
        »(p) -> 1«,
    );
}
