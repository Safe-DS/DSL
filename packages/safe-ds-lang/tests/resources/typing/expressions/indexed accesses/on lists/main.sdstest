package tests.typing.expressions.indexedAccesses.onLists

class IntList sub List<Int>

segment mySegment(param1: List<Int>, param2: List<Int>?, param3: IntList) {
    // $TEST$ serialization Int
    »param1[0]«;

    // $TEST$ serialization Int
    »param1[unresolved]«;

    // $TEST$ serialization Int
    »param2[0]«;

    // $TEST$ serialization Int
    »param2[unresolved]«;

    // $TEST$ serialization Int
    »param3[0]«;

    // $TEST$ serialization Int
    »param3[unresolved]«;


    // $TEST$ serialization Int
    »param1?[0]«;

    // $TEST$ serialization Int
    »param1?[unresolved]«;

    // $TEST$ serialization Int?
    »param2?[0]«;

    // $TEST$ serialization Int?
    »param2?[unresolved]«;

    // $TEST$ serialization Int
    »param3?[0]«;

    // $TEST$ serialization Int
    »param3?[unresolved]«;
}

class MyClass<MyList sub List<Int>, MyNullableList sub List<Int>?>(
    param1: MyList,
    param2: MyList?,
    param3: MyNullableList,

    // $TEST$ serialization Int
    p1: Any? = »param1[0]«,

    // $TEST$ serialization Int
    p2: Any? = »param1[unresolved]«,

    // $TEST$ serialization Int
    p3: Any? = »param2[0]«,

    // $TEST$ serialization Int
    p4: Any? = »param2[unresolved]«,

    // $TEST$ serialization Int
    p5: Any? = »param3[0]«,

    // $TEST$ serialization Int
    p6: Any? = »param3[unresolved]«,


    // $TEST$ serialization Int
    p7: Any? = »param1?[0]«,

    // $TEST$ serialization Int
    p8: Any? = »param1?[unresolved]«,

    // $TEST$ serialization Int?
    p9: Any? = »param2?[0]«,

    // $TEST$ serialization Int?
    p10: Any? = »param2?[unresolved]«,

    // $TEST$ serialization Int?
    p11: Any? = »param3?[0]«,

    // $TEST$ serialization Int?
    p12: Any? = »param3?[unresolved]«,
)
