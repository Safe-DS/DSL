package tests.typing.expressions.memberAccesses.toOther

class C() {
    // $TEST$ equivalence_class nonNullableMember
    attr »nonNullableMember«: Int

    // $TEST$ equivalence_class nullableMember
    attr »nullableMember«: Any?

    // $TEST$ equivalence_class method
    @Pure fun »method«() -> r: Int
}

fun nullableC() -> result: C?

pipeline myPipeline {
    // $TEST$ equivalence_class nonNullableMember
    »C().nonNullableMember«;
    // $TEST$ equivalence_class nullableMember
    »C().nullableMember«;
    // $TEST$ equivalence_class method
    »C().method«;

    // $TEST$ equivalence_class nonNullableMember
    »C()?.nonNullableMember«;
    // $TEST$ equivalence_class nullableMember
    »C()?.nullableMember«;
    // $TEST$ equivalence_class method
    »C()?.method«;


    // $TEST$ equivalence_class nonNullableMember
    »nullableC().nonNullableMember«;
    // $TEST$ equivalence_class nullableMember
    »nullableC().nullableMember«;
    // $TEST$ equivalence_class method
    »nullableC().method«;

    // $TEST$ serialization Int?
    »nullableC()?.nonNullableMember«;
    // $TEST$ equivalence_class nullableMember
    »nullableC()?.nullableMember«;
    // $TEST$ serialization union<() -> (r: Int), Nothing?>
    »nullableC()?.method«;
}
