package tests.typing.expressions.memberAccesses.onClassWithTypeParameters

class C<T> {
    attr nonNullableMember: T
    attr nullableMember: T?
    @Pure fun method() -> r: T
}

@Pure fun nullableC() -> result: C<Int>?

segment mySegment(p: C<Int>) {
    // $TEST$ serialization Int
    »p.nonNullableMember«;
    // $TEST$ serialization Int?
    »p.nullableMember«;
    // $TEST$ serialization () -> (r: Int)
    »p.method«;

    // $TEST$ serialization Int
    »p?.nonNullableMember«;
    // $TEST$ serialization Int?
    »p?.nullableMember«;
    // $TEST$ serialization () -> (r: Int)
    »p?.method«;


    // $TEST$ serialization Int
    »nullableC().nonNullableMember«;
    // $TEST$ serialization Int?
    »nullableC().nullableMember«;
    // $TEST$ serialization () -> (r: Int)
    »nullableC().method«;

    // $TEST$ serialization Int?
    »nullableC()?.nonNullableMember«;
    // $TEST$ serialization Int?
    »nullableC()?.nullableMember«;
    // $TEST$ serialization union<() -> (r: Int), literal<null>>
    »nullableC()?.method«;
}
