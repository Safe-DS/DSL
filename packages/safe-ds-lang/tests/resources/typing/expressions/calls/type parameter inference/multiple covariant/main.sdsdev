package tests.typing.expressions.calls.typeParameterInference.multipleCovariant

class Covariant<out T>
class CovariantNumber sub Covariant<Number>
class SomeCovariant<out T> sub Covariant<T>

class C1<T>(p1: T, p2: Covariant<T>, p3: () -> r1: T)
@Pure fun f1<T>(p1: T, p2: Covariant<T>, p3: () -> r1: T) -> r1: T

class SomeClass()

segment mySegment(
    a1: Int,
    a2: Number,
    a3: Any?,

    b1: Covariant<Number>,
    b2: CovariantNumber,
    b3: SomeCovariant<String?>,

    c: () -> r1: Number
) {
    // $TEST$ serialization C1<Number>
    »C1(a1, b1, c)«;
    // $TEST$ serialization C1<Number>
    »C1(a2, b1, c)«;
    // $TEST$ serialization C1<Any?>
    »C1(a3, b1, c)«;
    // $TEST$ serialization C1<Number>
    »C1(a1, b2, c)«;
    // $TEST$ serialization C1<Any?>
    »C1(a1, b3, c)«;
    // $TEST$ serialization C1<Any>
    »C1(a1, b1, () -> "")«;
    // $TEST$ serialization C1<Any>
    »C1(a1, b1, SomeClass)«;

    // $TEST$ serialization Number
    »f1(a1, b1, c)«;
    // $TEST$ serialization Number
    »f1(a2, b1, c)«;
    // $TEST$ serialization Any?
    »f1(a3, b1, c)«;
    // $TEST$ serialization Number
    »f1(a1, b2, c)«;
    // $TEST$ serialization Any?
    »f1(a1, b3, c)«;
    // $TEST$ serialization Any
    »f1(a1, b1, () -> "")«;
    // $TEST$ serialization Any
    »f1(a1, b1, SomeClass)«;
}
