package tests.typing.operations.arithmetic

fun anyInt() -> r: Int
fun anyFloat() -> r: Float

pipeline constantOperands {
    // $TEST$ serialization literal<2>
    val additionIntInt = »1 + 1«;
    // $TEST$ serialization literal<0>
    val subtractionIntInt = »1 - 1«;
    // $TEST$ serialization literal<1>
    val multiplicationIntInt = »1 * 1«;
    // $TEST$ serialization literal<1>
    val divisionIntInt = »1 / 1«;

    // $TEST$ serialization literal<2.5>
    val additionIntFloat = »1 + 1.5«;
    // $TEST$ serialization literal<-0.5>
    val subtractionIntFloat = »1 - 1.5«;
    // $TEST$ serialization literal<1.5>
    val multiplicationIntFloat = »1 * 1.5«;
    // $TEST$ serialization literal<1.6>
    val divisionIntFloat = »1 / 0.625«;

    // $TEST$ serialization literal<2.5>
    val additionFloatInt = »1.5 + 1«;
    // $TEST$ serialization literal<0.5>
    val subtractionFloatInt = »1.5 - 1«;
    // $TEST$ serialization literal<1.5>
    val multiplicationFloatInt = »1.5 * 1«;
    // $TEST$ serialization literal<1.5>
    val divisionFloatInt = »1.5 / 1«;

    // $TEST$ serialization literal<2.75>
    val additionFloatFloat = »1.5 + 1.25«;
    // $TEST$ serialization literal<0.25>
    val subtractionFloatFloat = »1.5 - 1.25«;
    // $TEST$ serialization literal<1.875>
    val multiplicationFloatFloat = »1.5 * 1.25«;
    // $TEST$ serialization literal<0.6>
    val divisionFloatFloat = »1.5 / 2.5«;

    // $TEST$ serialization literal<-1>
    val negationInt = »-1«;
    // $TEST$ serialization literal<-1.5>
    val negationFloat = »-1.5«;
}

pipeline invalidOperands {
    // $TEST$ serialization Float
    val additionInvalid = »true + true«;
    // $TEST$ serialization Float
    val subtractionInvalid  = »true - true«;
    // $TEST$ serialization Float
    val multiplicationInvalid  = »true * true«;
    // $TEST$ serialization Float
    val divisionInvalid  = »true / true«;

    // $TEST$ serialization Float
    val negationInvalid  = »-true«;
}

pipeline nonConstantOperands {
    // $TEST$ serialization Int
    val additionIntInt = »anyInt() + anyInt()«;
    // $TEST$ serialization Int
    val subtractionIntInt = »anyInt() - anyInt()«;
    // $TEST$ serialization Int
    val multiplicationIntInt = »anyInt() * anyInt()«;
    // $TEST$ serialization Int
    val divisionIntInt = »anyInt() / anyInt()«;

    // $TEST$ serialization Float
    val additionIntFloat = »anyInt() + anyFloat()«;
    // $TEST$ serialization Float
    val subtractionIntFloat = »anyInt() - anyFloat()«;
    // $TEST$ serialization Float
    val multiplicationIntFloat = »anyInt() * anyFloat()«;
    // $TEST$ serialization Float
    val divisionIntFloat = »anyInt() / anyFloat()«;

    // $TEST$ serialization Float
    val additionFloatInt = »anyFloat() + anyInt()«;
    // $TEST$ serialization Float
    val subtractionFloatInt = »anyFloat() - anyInt()«;
    // $TEST$ serialization Float
    val multiplicationFloatInt = »anyFloat() * anyInt()«;
    // $TEST$ serialization Float
    val divisionFloatInt = »anyFloat() / anyInt()«;

    // $TEST$ serialization Float
    val additionFloatFloat = »anyFloat() + anyFloat()«;
    // $TEST$ serialization Float
    val subtractionFloatFloat = »anyFloat() - anyFloat()«;
    // $TEST$ serialization Float
    val multiplicationFloatFloat = »anyFloat() * anyFloat()«;
    // $TEST$ serialization Float
    val divisionFloatFloat = »anyFloat() / anyFloat()«;

    // $TEST$ serialization Int
    val negationInt = »-anyInt()«;
    // $TEST$ serialization Float
    val negationFloat = »-anyFloat()«;
}

pipeline mixedOperands {
    // $TEST$ serialization Int
    val additionIntInt = »10 + anyInt()«;
    // $TEST$ serialization Int
    val subtractionIntInt = »10 - anyInt()«;
    // $TEST$ serialization Int
    val multiplicationIntInt = »10 * anyInt()«;
    // $TEST$ serialization Int
    val divisionIntInt = »10 / anyInt()«;

    // $TEST$ serialization Float
    val additionIntFloat = »10 + anyFloat()«;
    // $TEST$ serialization Float
    val subtractionIntFloat = »10 - anyFloat()«;
    // $TEST$ serialization Float
    val multiplicationIntFloat = »10 * anyFloat()«;
    // $TEST$ serialization Float
    val divisionIntFloat = »10 / anyFloat()«;

    // $TEST$ serialization Float
    val additionFloatInt = »1.5 + anyInt()«;
    // $TEST$ serialization Float
    val subtractionFloatInt = »1.5 - anyInt()«;
    // $TEST$ serialization Float
    val multiplicationFloatInt = »1.5 * anyInt()«;
    // $TEST$ serialization Float
    val divisionFloatInt = »1.5 / anyInt()«;

    // $TEST$ serialization Float
    val additionFloatFloat = »1.5 + anyFloat()«;
    // $TEST$ serialization Float
    val subtractionFloatFloat = »1.5 - anyFloat()«;
    // $TEST$ serialization Float
    val multiplicationFloatFloat = »1.5 * anyFloat()«;
    // $TEST$ serialization Float
    val divisionFloatFloat = »1.5 / anyFloat()«;
}
