package tests.typing.operations.arithmetic

@Pure fun anyInt() -> r: Int
@Pure fun anyFloat() -> r: Float

@Pure fun cell() -> r: Cell<Number>

pipeline constantOperands {
    // $TEST$ serialization literal<2>
    val additionIntInt = »1 + 1«;
    // $TEST$ serialization literal<0>
    val subtractionIntInt = »1 - 1«;
    // $TEST$ serialization literal<1>
    val multiplicationIntInt = »1 * 1«;
    // $TEST$ serialization literal<1>
    val divisionIntInt = »1 / 1«;
    // $TEST$ serialization literal<0>
    val moduloIntInt = »1 % 1«;

    // $TEST$ serialization literal<2.5>
    val additionIntFloat = »1 + 1.5«;
    // $TEST$ serialization literal<-0.5>
    val subtractionIntFloat = »1 - 1.5«;
    // $TEST$ serialization literal<1.5>
    val multiplicationIntFloat = »1 * 1.5«;
    // $TEST$ serialization literal<1.6>
    val divisionIntFloat = »1 / 0.625«;
    // $TEST$ serialization literal<0.375>
    val moduloIntFloat = »1 % 0.625«;

    // $TEST$ serialization literal<2.5>
    val additionFloatInt = »1.5 + 1«;
    // $TEST$ serialization literal<0.5>
    val subtractionFloatInt = »1.5 - 1«;
    // $TEST$ serialization literal<1.5>
    val multiplicationFloatInt = »1.5 * 1«;
    // $TEST$ serialization literal<1.5>
    val divisionFloatInt = »1.5 / 1«;
    // $TEST$ serialization literal<0.5>
    val moduloFloatInt = »1.5 % 1«;

    // $TEST$ serialization literal<2.75>
    val additionFloatFloat = »1.5 + 1.25«;
    // $TEST$ serialization literal<0.25>
    val subtractionFloatFloat = »1.5 - 1.25«;
    // $TEST$ serialization literal<1.875>
    val multiplicationFloatFloat = »1.5 * 1.25«;
    // $TEST$ serialization literal<0.6>
    val divisionFloatFloat = »1.5 / 2.5«;
    // $TEST$ serialization literal<1.5>
    val moduloFloatFloat = »1.5 % 2.5«;

    // $TEST$ serialization literal<-1>
    val negationInt = »-1«;
    // $TEST$ serialization literal<-1.5>
    val negationFloat = »-1.5«;
}

pipeline invalidOperands {
    // $TEST$ serialization Float
    val additionInvalid = »true + true«;
    // $TEST$ serialization Float
    val subtractionInvalid  = »true - true«;
    // $TEST$ serialization Float
    val multiplicationInvalid  = »true * true«;
    // $TEST$ serialization Float
    val divisionInvalid  = »true / true«;
    // $TEST$ serialization Float
    val moduloInvalid  = »true % true«;

    // $TEST$ serialization Float
    val negationInvalid  = »-true«;
}

pipeline nonConstantOperands {
    // $TEST$ serialization Int
    val additionIntInt = »anyInt() + anyInt()«;
    // $TEST$ serialization Int
    val subtractionIntInt = »anyInt() - anyInt()«;
    // $TEST$ serialization Int
    val multiplicationIntInt = »anyInt() * anyInt()«;
    // $TEST$ serialization Int
    val divisionIntInt = »anyInt() / anyInt()«;
    // $TEST$ serialization Int
    val moduloIntInt = »anyInt() % anyInt()«;

    // $TEST$ serialization Float
    val additionIntFloat = »anyInt() + anyFloat()«;
    // $TEST$ serialization Float
    val subtractionIntFloat = »anyInt() - anyFloat()«;
    // $TEST$ serialization Float
    val multiplicationIntFloat = »anyInt() * anyFloat()«;
    // $TEST$ serialization Float
    val divisionIntFloat = »anyInt() / anyFloat()«;
    // $TEST$ serialization Float
    val moduloIntFloat = »anyInt() % anyFloat()«;

    // $TEST$ serialization Float
    val additionFloatInt = »anyFloat() + anyInt()«;
    // $TEST$ serialization Float
    val subtractionFloatInt = »anyFloat() - anyInt()«;
    // $TEST$ serialization Float
    val multiplicationFloatInt = »anyFloat() * anyInt()«;
    // $TEST$ serialization Float
    val divisionFloatInt = »anyFloat() / anyInt()«;
    // $TEST$ serialization Float
    val moduloFloatInt = »anyFloat() % anyInt()«;

    // $TEST$ serialization Float
    val additionFloatFloat = »anyFloat() + anyFloat()«;
    // $TEST$ serialization Float
    val subtractionFloatFloat = »anyFloat() - anyFloat()«;
    // $TEST$ serialization Float
    val multiplicationFloatFloat = »anyFloat() * anyFloat()«;
    // $TEST$ serialization Float
    val divisionFloatFloat = »anyFloat() / anyFloat()«;
    // $TEST$ serialization Float
    val moduloFloatFloat = »anyFloat() % anyFloat()«;

    // $TEST$ serialization Int
    val negationInt = »-anyInt()«;
    // $TEST$ serialization Float
    val negationFloat = »-anyFloat()«;
}

pipeline mixedOperands {
    // $TEST$ serialization Int
    val additionIntInt = »10 + anyInt()«;
    // $TEST$ serialization Int
    val subtractionIntInt = »10 - anyInt()«;
    // $TEST$ serialization Int
    val multiplicationIntInt = »10 * anyInt()«;
    // $TEST$ serialization Int
    val divisionIntInt = »10 / anyInt()«;
    // $TEST$ serialization Int
    val moduloIntInt = »10 % anyInt()«;

    // $TEST$ serialization Float
    val additionIntFloat = »10 + anyFloat()«;
    // $TEST$ serialization Float
    val subtractionIntFloat = »10 - anyFloat()«;
    // $TEST$ serialization Float
    val multiplicationIntFloat = »10 * anyFloat()«;
    // $TEST$ serialization Float
    val divisionIntFloat = »10 / anyFloat()«;
    // $TEST$ serialization Float
    val moduloIntFloat = »10 % anyFloat()«;

    // $TEST$ serialization Float
    val additionFloatInt = »1.5 + anyInt()«;
    // $TEST$ serialization Float
    val subtractionFloatInt = »1.5 - anyInt()«;
    // $TEST$ serialization Float
    val multiplicationFloatInt = »1.5 * anyInt()«;
    // $TEST$ serialization Float
    val divisionFloatInt = »1.5 / anyInt()«;
    // $TEST$ serialization Float
    val moduloFloatInt = »1.5 % anyInt()«;

    // $TEST$ serialization Float
    val additionFloatFloat = »1.5 + anyFloat()«;
    // $TEST$ serialization Float
    val subtractionFloatFloat = »1.5 - anyFloat()«;
    // $TEST$ serialization Float
    val multiplicationFloatFloat = »1.5 * anyFloat()«;
    // $TEST$ serialization Float
    val divisionFloatFloat = »1.5 / anyFloat()«;
    // $TEST$ serialization Float
    val moduloFloatFloat = »1.5 % anyFloat()«;
}

pipeline cellOperands {
    // $TEST$ serialization Cell<Number>
    val additionIntCell = »10 + cell()«;
    // $TEST$ serialization Cell<Number>
    val subtractionIntCell = »10 - cell()«;
    // $TEST$ serialization Cell<Number>
    val multiplicationIntCell = »10 * cell()«;
    // $TEST$ serialization Cell<Number>
    val divisionIntCell = »10 / cell()«;
    // $TEST$ serialization Cell<Number>
    val moduloIntCell = »10 % cell()«;

    // $TEST$ serialization Cell<Number>
    val additionFloatCell = »1.5 + cell()«;
    // $TEST$ serialization Cell<Number>
    val subtractionFloatCell = »1.5 - cell()«;
    // $TEST$ serialization Cell<Number>
    val multiplicationFloatCell = »1.5 * cell()«;
    // $TEST$ serialization Cell<Number>
    val divisionFloatCell = »1.5 / cell()«;
    // $TEST$ serialization Cell<Number>
    val moduloFloatCell = »1.5 % cell()«;

    // $TEST$ serialization Cell<Number>
    val additionInvalidCell = »true + cell()«;
    // $TEST$ serialization Cell<Number>
    val subtractionInvalidCell = »true - cell()«;
    // $TEST$ serialization Cell<Number>
    val multiplicationInvalidCell = »true * cell()«;
    // $TEST$ serialization Cell<Number>
    val divisionInvalidCell = »true / cell()«;
    // $TEST$ serialization Cell<Number>
    val moduloInvalidCell = »true % cell()«;

    // $TEST$ serialization Cell<Number>
    val additionCellInt = »cell() + 10«;
    // $TEST$ serialization Cell<Number>
    val subtractionCellInt = »cell() - 10«;
    // $TEST$ serialization Cell<Number>
    val multiplicationCellInt = »cell() * 10«;
    // $TEST$ serialization Cell<Number>
    val divisionCellInt = »cell() / 10«;
    // $TEST$ serialization Cell<Number>
    val moduloCellInt = »cell() % 10«;

    // $TEST$ serialization Cell<Number>
    val additionCellFloat = »cell() + 1.5«;
    // $TEST$ serialization Cell<Number>
    val subtractionCellFloat = »cell() - 1.5«;
    // $TEST$ serialization Cell<Number>
    val multiplicationCellFloat = »cell() * 1.5«;
    // $TEST$ serialization Cell<Number>
    val divisionCellFloat = »cell() / 1.5«;
    // $TEST$ serialization Cell<Number>
    val moduloCellFloat = »cell() % 1.5«;

    // $TEST$ serialization Cell<Number>
    val additionCellInvalid = »cell() + true«;
    // $TEST$ serialization Cell<Number>
    val subtractionCellInvalid = »cell() - true«;
    // $TEST$ serialization Cell<Number>
    val multiplicationCellInvalid = »cell() * true«;
    // $TEST$ serialization Cell<Number>
    val divisionCellInvalid = »cell() / true«;
    // $TEST$ serialization Cell<Number>
    val moduloCellInvalid = »cell() % true«;

    // $TEST$ serialization Cell<Number>
    val additionCellCell = »cell() + cell()«;
    // $TEST$ serialization Cell<Number>
    val subtractionCellCell = »cell() - cell()«;
    // $TEST$ serialization Cell<Number>
    val multiplicationCellCell = »cell() * cell()«;
    // $TEST$ serialization Cell<Number>
    val divisionCellCell = »cell() / cell()«;
    // $TEST$ serialization Cell<Number>
    val moduloCellCell = »cell() % cell()«;

    // $TEST$ serialization Cell<Number>
    val negationCell = »-cell()«;
}

// Strict checking of type parameter types
class MyClass<T sub Any>(
    p1: T,

    // $TEST$ serialization Float
    p2: Any? = »p1 + 1«,
    // $TEST$ serialization Float
    p3: Any? = »1 + p1«,
    // $TEST$ serialization Float
    p4: Any? = »-p1«,
)
