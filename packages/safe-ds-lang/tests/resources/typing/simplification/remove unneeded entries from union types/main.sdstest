package tests.typing.simplification.removeUnneededEntriesFromUnionTypes

class C(
    // $TEST$ serialization Int
    p1: »union<Int, Int>«,

    // $TEST$ serialization union<Int, String>
    p2: »union<Int, String, Int>«,


    // $TEST$ serialization Number
    p3: »union<Int, Number>«,

    // $TEST$ serialization Number
    p4: »union<Number, Int>«,

    // $TEST$ serialization Number?
    p5: »union<Number, Int?>«,

    // $TEST$ serialization Any
    p6: »union<Int, Number, Any>«,

    // $TEST$ serialization Any
    p7: »union<Any, Number, Int>«,

    // $TEST$ serialization Any?
    p8: »union<Int, Number?, Any>«,


    // $TEST$ serialization union<Int, String>
    p9: »union<Int, String>«,

    // $TEST$ serialization union<Int, String?>
    p10: »union<Int, String?>«,

    // $TEST$ serialization union<Number, String>
    p11: »union<Int, Number, String>«,

    // $TEST$ serialization union<Number, String>
    p12: »union<Number, Int, String>«,

    // $TEST$ serialization Any
    p13: »union<Int, String, Any>«,

    // $TEST$ serialization Any?
    p14: »union<Int, String?, Any>«,

    // $TEST$ serialization Any
    p15: »union<Any, String, Int>«,

    // $TEST$ serialization Any?
    p16: »union<Any, String?, Int>«,
)

class TestsInvolvingNothing(
    // $TEST$ serialization Any
    p1: »union<Any, Nothing>«,

    // $TEST$ serialization Any?
    p2: »union<Any, Nothing?>«,

    // $TEST$ serialization literal<1>
    p3: »union<literal<1>, Nothing>«,

    // $TEST$ serialization literal<1, null>
    p4: »union<literal<1>, Nothing?>«,

    // $TEST$ serialization () -> ()
    p5: »union<() -> (), Nothing>«,

    // $TEST$ serialization union<() -> (), Nothing?>
    p6: »union<() -> (), Nothing?>«,
)

class TestsInvolvingTypeParameters<Unbounded, UpperBound, BothBounds>(
    // $TEST$ serialization Unbounded
    a1: »union<Unbounded, Nothing>«,
    // $TEST$ serialization Unbounded
    a2: »union<Nothing, Unbounded>«,

    // $TEST$ serialization Unbounded?
    a3: »union<Unbounded, Nothing?>«,
    // $TEST$ serialization Unbounded?
    a4: »union<Nothing?, Unbounded>«,

    // $TEST$ serialization Unbounded
    a5: »union<Unbounded, Any>«,
    // $TEST$ serialization Unbounded
    a6: »union<Any, Unbounded>«,

    // $TEST$ serialization Unbounded?
    a7: »union<Unbounded, Any?>«,
    // $TEST$ serialization Unbounded?
    a8: »union<Any?, Unbounded>«,


    // $TEST$ serialization UpperBound
    b1: »union<UpperBound, Nothing>«,
    // $TEST$ serialization UpperBound
    b2: »union<Nothing, UpperBound>«,

    // $TEST$ serialization UpperBound?
    b3: »union<UpperBound, Nothing?>«,
    // $TEST$ serialization UpperBound?
    b4: »union<Nothing?, UpperBound>«,

    // $TEST$ serialization UpperBound
    b5: »union<UpperBound, Int>«,
    // $TEST$ serialization UpperBound
    b6: »union<Int, UpperBound>«,

    // $TEST$ serialization UpperBound
    b7: »union<UpperBound, Number>«,
    // $TEST$ serialization UpperBound
    b8: »union<Number, UpperBound>«,

    // $TEST$ serialization UpperBound?
    b9: »union<UpperBound, Number?>«,
    // $TEST$ serialization UpperBound?
    b10: »union<Number?, UpperBound>«,

    // $TEST$ serialization Any?
    b11: »union<UpperBound, Any?>«,
    // $TEST$ serialization Any?
    b12: »union<Any?, UpperBound>«,


    // $TEST$ serialization union<BothBounds, Nothing>
    c1: »union<BothBounds, Nothing>«,
    // $TEST$ serialization union<Nothing, BothBounds>
    c2: »union<Nothing, BothBounds>«,

    // $TEST$ serialization union<BothBounds, String>
    c3: »union<BothBounds, String>«,
    // $TEST$ serialization union<String, BothBounds>
    c4: »union<String, BothBounds>«,

    // $TEST$ serialization BothBounds
    c5: »union<BothBounds, Int>«,
    // $TEST$ serialization BothBounds
    c6: »union<Int, BothBounds>«,

    // $TEST$ serialization BothBounds
    c7: »union<BothBounds, Number>«,
    // $TEST$ serialization BothBounds
    c8: »union<Number, BothBounds>«,

    // $TEST$ serialization BothBounds
    c9: »union<BothBounds, Any>«,
    // $TEST$ serialization BothBounds
    c10: »union<Any, BothBounds>«,

    // $TEST$ serialization BothBounds?
    c11: »union<BothBounds, Any?>«,
    // $TEST$ serialization BothBounds?
    c12: »union<Any?, BothBounds>«,
) where {
    UpperBound sub Number,
    BothBounds super Int,
    BothBounds sub Any,
}
