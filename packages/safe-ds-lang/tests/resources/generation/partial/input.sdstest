package tests.generator.partial

@Pure fun f(param: () -> r: Int) -> q: Int

@Impure([
    ImpurityReason.PotentiallyImpureParameterCall("param"),
])
fun fp(param: () -> r: Int) -> q: Int

@Pure fun g(h: Boolean, i: Float, j: Int, k: Any?, l: String) -> q: Int

@Pure fun g2(param: Map<String, String>) -> q: Int

@Pure fun g3(param: List<Int>) -> q: Int

@Pure fun noPartialEvalInt(param: Int) -> q: Int

@Pure fun g4(param: Any?) -> q: Int

@Impure([ImpurityReason.Other]) fun i1(param: Any?) -> q: Int

@Impure([ImpurityReason.FileReadFromConstantPath("a.txt")]) fun iFileRead() -> q: Int

@Impure([ImpurityReason.FileWriteToConstantPath("a.txt")]) fun iFileWrite() -> q: Int

pipeline testPipeline {
    val lFalse = false;
    val lTrue = true; // Should not be generated

    val lDouble = -1.0;
    val lDouble2 = 1.0; // Should not be generated

    val lInt = 1;
    val lInt2 = -1; // Should not be generated

    val lNull = null;
    val lNull2 = null; // Should not be generated

    val lStrMulti = "multi
line";
    val lStr = ""; // Should not be generated

    val boolean1 = not lFalse;
    val boolean2 = not lTrue; // Should not be generated

    val value1 = g(boolean1, lDouble, lInt, lNull, lStrMulti);
    val value2 = g(boolean2, lDouble2, lInt2, lNull2, lStr); // Should not be generated

    val o = f(() {
        val i = 1;
        val i2 = 3;
        val j = i + 5;
        val j2 = i2 + i;
        yield z = j + i;
    }) + f(() -> 2);

    // Should not be generated
    val o2 = f(() {
        val i = 1;
        val i2 = 3;
        val j = i + 5;
        val j2 = i2 + i;
        yield z = j + i;
    }) + f(() -> 2);

    1; // Should not be generated
    _ = 1; // Should not be generated

    val mapKey = "key";
    val mapValue = "value";
    val mapResult = g2({mapKey: mapValue});

    val mapKey2 = "key"; // Should not be generated
    val mapValue2 = "value"; // Should not be generated
    val mapResult2 = g2({mapKey2: mapValue2}); // Should not be generated

    val listV1 = 1;
    val listV2 = 2; // Should not be generated
    val listV3 = noPartialEvalInt(listV1);

    val list = [listV1];
    val list2 = [listV2]; // Should not be generated
    val list3 = [listV3];
    val listValue = list3[0];

    val listResult = g3(list);
    val listResult2 = g3(list2); // Should not be generated

    val impureFileRead = iFileRead(); // Should not be generated - cannot affect result
    val impureFileWrite = iFileWrite();
    val impureFileWrite2 = iFileWrite();
    val impureFileReadAgain = iFileRead();

    val pureValueForImpure2 = noPartialEvalInt(2);
    val pureValueForImpure3 = 3;

    fp(() {
        i1(1);
        yield r = 1;
    });
    i1(1);
    val impureA1 = i1(pureValueForImpure2);
    val impureA2 = i1(noPartialEvalInt(pureValueForImpure3));
    i1(4); // Should not be generated - impure can not have effects on future statements as they are pure

    val other = -o + 1 + value2; // Should not be generated
    // $TEST$ run_until
    val »result« = -o + 1 + value1 + mapResult * listResult / g4(listValue) - impureA2 + impureFileReadAgain;

    i1(4); // Should not be generated - impure cannot affect result after result is already calculated
    val someImpureValue = i1(4); // Should not be generated - impure cannot affect result after result is already calculated
    val lDouble3 = 1.0; // Should not be generated - pure cannot affect result after result is already calculated
}
