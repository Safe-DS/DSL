package tests.generator.partialImpureDependencyFileConstant

@Impure([ImpurityReason.FileReadFromConstantPath("a.txt")]) fun iFileReadA() -> q: Int

@Impure([ImpurityReason.FileWriteToConstantPath("a.txt")]) fun iFileWriteA() -> q: Int

@Impure([ImpurityReason.FileReadFromConstantPath("b.txt")]) fun iFileReadB() -> q: Int

@Impure([ImpurityReason.FileWriteToConstantPath("b.txt")]) fun iFileWriteB() -> q: Int

pipeline testPipeline {
    val impureFileRead = iFileReadA(); // Should not be generated - cannot affect result
    val impureFileWrite = iFileWriteA();
    val impureFileWrite2 = iFileWriteA();
    val impureFileReadAgain = iFileReadA();

    val impureFileReadB = iFileReadB(); // Should not be generated - cannot affect result, independent from previous file
    val impureFileWriteB = iFileWriteB();
    val impureFileWrite2B = iFileWriteB();
    val impureFileReadAgainB = iFileReadB();

    // $TEST$ run_until
    val »result« = impureFileReadAgain + impureFileReadAgainB;
}
