package tests.generator.memberAccessWithRunnerIntegration

@Impure([ImpurityReason.Other]) fun f(param: Any?)

@Pure fun g() -> result: Boolean

@Pure fun h() -> (result1: Boolean, result2: Boolean)

class C() {
    attr a: Int
    @PythonName("c") attr b: Int

    @Pure
    @PythonCall("$param.i($this)")
    fun i(param: Any?) -> result: Boolean

    @Pure
    fun j(param: Any?) -> result: Boolean

    @Pure
    @PythonName("k2") fun k(param: Any?) -> result: Boolean

    @Pure
    @PythonCall("$param.i()")
    static fun l(param: Any?) -> result: Boolean

    @Pure
    fun m(param: Int = 42) -> result: Boolean

    @Impure([ImpurityReason.FileReadFromParameterizedPath("name")])
    static fun from_csv_file(name: String) -> c: C
}

class Outer() {
    class Nested() {
        @Pure
        static fun f() -> result: Boolean

        @Pure
        fun g() -> result: Boolean
    }
}

@Pure fun factory() -> instance: C?

@Pure fun factoryNested() -> instance: Outer.Nested

pipeline test {
    f(g().result);
    f(h().result1);
    f(h().result2);
    f(C().a);
    f(C().b);
    f(factory()?.a);
    f(factory()?.b);
    f(C().i(1));
    val c1 = C();
    f(c1.i(1));
    f(C().j(123));
    f(C().k("abc"));
    f(C.l(2));
    f(C().m(213));
    f(c1.m(213));
    f(C.from_csv_file("abc.csv"));
    val a = Table.fromCsvFile("abc.csv");
    val a2 = Table.fromCsvFile("abc.csv").removeColumns(["u"]);
    val v = a.getColumn("b");
    val d = v.plotHistogram();
    val p = a.getColumn("b").plotHistogram();
    val r = a.getColumn("b").plotHistogram().flipVertically();
    val q = a.getColumn("b").plotHistogram().flipVertically().adjustContrast(1.2);
    f(d);
    f(p);
    f(r);
    f(q);
    f(Outer.Nested.f());
    val nestedInstance = factoryNested();
    val nestedResult = nestedInstance.g();
    f(nestedResult);
    val encoder = OneHotEncoder().fit(a, ["b"]);
    val transformedTable = encoder.transform(a);
}
