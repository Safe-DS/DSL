package tests.scoping.typeArguments.toTypeParameterInContainingNamedTypeDeclaration

// $TEST$ target outerClass
class MyClass<»T«>(
    // $TEST$ references outerClass
    p: MyClass<»T« = Int>,

// $TEST$ references outerClass
) sub MyClass<»T« = Int> {
    // $TEST$ references outerClass
    attr a: MyClass<»T« = Int>

    fun f<T>(
        // $TEST$ references outerClass
        p: MyClass<»T« = Int>,
    ) -> (
        // $TEST$ references outerClass
        r: MyClass<»T« = Int>,
    )

    enum MyEnum {
        MyEnumVariant(
            // $TEST$ references outerClass
            p: MyClass<»T« = Int>,
        )
    }

    // $TEST$ target innerClass
    class MyClass<»T«>(
        // $TEST$ references innerClass
        p: MyClass<»T« = Int>,

    // $TEST$ references innerClass
    ) sub MyClass<»T« = Int> {
        // $TEST$ references innerClass
        attr a: MyClass<»T« = Int>

        fun f<T>(
            // $TEST$ references innerClass
            p: MyClass<»T« = Int>,
        ) -> (
            // $TEST$ references innerClass
            r: MyClass<»T« = Int>,
        )
    }
}
