package tests.scoping.references.acrossFiles.toSegments

from safeds.scoping.references.acrossFiles.toSegments import mySegment as myOwnSegment
from tests.scoping.references.acrossFiles.toSegments.other import publicSegmentInAnotherPackage, publicSegmentInAnotherPackage2
from tests.scoping.references.acrossFiles.toSegments.other import internalSegmentInAnotherPackage
from tests.scoping.references.acrossFiles.toSegments.other import privateSegmentInAnotherPackage

// $TEST$ target own_myOwnSegment
segment »myOwnSegment«() {}

pipeline myPipeline {
    // $TEST$ references own_myOwnSegment
    »myOwnSegment«;


    // $TEST$ references same_publicSegmentInSamePackage
    »publicSegmentInSamePackage«;

    // $TEST$ references same_internalSegmentInSamePackage
    »internalSegmentInSamePackage«;

    // $TEST$ unresolved
    »privateSegmentInSamePackage«;


    // $TEST$ references safeds_publicSegmentInSafeDsPackage
    »publicSegmentInSafeDsPackage«;

    // $TEST$ unresolved
    »internalSegmentInSafeDsPackage«;

    // $TEST$ unresolved
    »privateSegmentInSafeDsPackage«;


    // $TEST$ references other_publicSegmentInAnotherPackage
    »publicSegmentInAnotherPackage«;

    // $TEST$ references other_publicSegmentInAnotherPackage2
    »publicSegmentInAnotherPackage2«;

    // $TEST$ unresolved
    »internalSegmentInAnotherPackage«;

    // $TEST$ unresolved
    »privateSegmentInAnotherPackage«;


    // $TEST$ unresolved
    »publicSegmentWithoutPackage«;

    // $TEST$ unresolved
    »internalSegmentWithoutPackage«;

    // $TEST$ unresolved
    »privateSegmentWithoutPackage«;
}
