package tests.scoping.references.acrossFiles.toSchemas

from tests.scoping.references.acrossFiles.toSchemas import MySchema as MySchemaInSamePackage
from safeds.scoping.references.acrossFiles.toSchemas import MySchema as MySchemaInSafeDsPackage
from tests.scoping.references.acrossFiles.toSchemas.other import MySchema as MySchemaInAnotherPackage

pipeline myPipeline {
    // $TEST$ references same_MySchema
    »MySchema«;


    // $TEST$ references same_PublicSchemaInSamePackage
    »PublicSchemaInSamePackage«;

    // $TEST$ references same_InternalSchemaInSamePackage
    »InternalSchemaInSamePackage«;

    // $TEST$ unresolved
    »PrivateSchemaInSamePackage«;


    // $TEST$ references safeds_PublicSchemaInSafeDsPackage
    »PublicSchemaInSafeDsPackage«;

    // $TEST$ unresolved
    »InternalSchemaInSafeDsPackage«;

    // $TEST$ unresolved
    »PrivateSchemaInSafeDsPackage«;


    // $TEST$ unresolved
    »PublicSchemaInAnotherPackage«;

    // $TEST$ unresolved
    »InternalSchemaInAnotherPackage«;

    // $TEST$ unresolved
    »PrivateSchemaInAnotherPackage«;


    // $TEST$ unresolved
    »PublicSchemaWithoutPackage«;

    // $TEST$ unresolved
    »InternalSchemaWithoutPackage«;

    // $TEST$ unresolved
    »PrivateSchemaWithoutPackage«;


    // $TEST$ references same_MySchema
    »MySchemaInSamePackage«;

    // $TEST$ references safeds_MySchema
    »MySchemaInSafeDsPackage«;

    // $TEST$ references other_MySchema
    »MySchemaInAnotherPackage«;
}
