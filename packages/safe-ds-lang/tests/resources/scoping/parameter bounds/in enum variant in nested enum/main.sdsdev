package tests.scoping.parameterBounds.inEnumVariantInNestedEnum

class MyClass(container: Int) {
    fun myFunction1(beforeEnum: Int)

    enum MyEnum {
        MyEnumVariant(
            // $TEST$ target own
            »own«: Int
        ) where {
            // $TEST$ references own
            // $TEST$ references own
            »own« < 0 else "{{ »own« }}",

            // $TEST$ unresolved
            // $TEST$ unresolved
            »container« < 0 else "{{ »container« }}",

            // $TEST$ unresolved
            // $TEST$ unresolved
            »beforeEnum« < 0 else "{{ »beforeEnum« }}",

            // $TEST$ unresolved
            // $TEST$ unresolved
            »afterEnum« < 0 else "{{ »afterEnum« }}",

            // $TEST$ unresolved
            // $TEST$ references notAParameter
            »notAParameter« < 0 else "{{ »notAParameter« }}",

            // $TEST$ unresolved
            // $TEST$ unresolved
            »unresolved« < 0 else "{{ »unresolved« }}"
        }
    }

    fun myFunction2(afterEnum: Int)
}

// $TEST$ target notAParameter
class »notAParameter«
