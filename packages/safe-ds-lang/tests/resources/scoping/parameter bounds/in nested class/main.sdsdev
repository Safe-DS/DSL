package tests.scoping.parameterBounds.inNestedClass

fun myFunction1(beforeGlobal: Int)

class MyClass1(container: Int, overridden: Int){
    fun myFunction2(beforeMember: Int)

    class MyClass2(
        // $TEST$ target own
        »own«: Int,

        // $TEST$ target overridden
        »overridden«: Int,
    ) where {
        // $TEST$ references own
        // $TEST$ references own
        »own« < 0 else `{ »own« }`,

        // $TEST$ references overridden
        // $TEST$ references overridden
        »overridden« < 0 else `{ »overridden« }`,

        // $TEST$ unresolved
        // $TEST$ unresolved
        »container« < 0 else `{ »container« }`,

        // $TEST$ unresolved
        // $TEST$ unresolved
        »beforeMember« < 0 else `{ »beforeMember« }`,

        // $TEST$ unresolved
        // $TEST$ unresolved
        »afterMember« < 0 else `{ »afterMember« }`,

        // $TEST$ unresolved
        // $TEST$ unresolved
        »beforeGlobal« < 0 else `{ »beforeGlobal« }`,

        // $TEST$ unresolved
        // $TEST$ unresolved
        »afterGlobal« < 0 else `{ »afterGlobal« }`,

        // $TEST$ unresolved
        // $TEST$ references notAParameter
        »notAParameter« < 0 else `{ »notAParameter« }`,

        // $TEST$ unresolved
        // $TEST$ unresolved
        »unresolved« < 0 else `{ »unresolved« }`
    }

    fun myFunction3(afterMember: Int)
}

fun myFunction4(afterGlobal: Int)

// $TEST$ target notAParameter
class »notAParameter«
