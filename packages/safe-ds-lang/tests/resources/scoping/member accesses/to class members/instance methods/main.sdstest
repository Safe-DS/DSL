package tests.scoping.memberAccesses.toClassMembers.instanceMethods

class MyClass {
    // $TEST$ target myInstanceMethod
    fun »myInstanceMethod«()


    // $TEST$ target redeclaredAsInstanceAttribute
    fun »redeclaredAsInstanceAttribute«()
    attr redeclaredAsInstanceAttribute: Int

    // $TEST$ target redeclaredAsStaticAttribute
    fun »redeclaredAsStaticAttribute«()
    static attr redeclaredAsStaticAttribute: Int

    // $TEST$ target redeclaredAsNestedClass
    fun »redeclaredAsNestedClass«()
    class redeclaredAsNestedClass

    // $TEST$ target redeclaredAsNestedEnum
    fun »redeclaredAsNestedEnum«()
    enum redeclaredAsNestedEnum

    // $TEST$ target redeclaredAsInstanceMethod
    fun »redeclaredAsInstanceMethod«()
    fun redeclaredAsInstanceMethod()

    // $TEST$ target redeclaredAsStaticMethod
    fun »redeclaredAsStaticMethod«()
    static fun redeclaredAsStaticMethod()


    // $TEST$ target declaredPreviouslyAsStaticAttribute
    static attr declaredPreviouslyAsStaticAttribute: Int
    fun »declaredPreviouslyAsStaticAttribute«()

    // $TEST$ target declaredPreviouslyAsNestedClass
    class declaredPreviouslyAsNestedClass
    fun »declaredPreviouslyAsNestedClass«()

    // $TEST$ target declaredPreviouslyAsNestedEnum
    class declaredPreviouslyAsNestedEnum
    fun »declaredPreviouslyAsNestedEnum«()

    // $TEST$ target declaredPreviouslyAsStaticMethod
    static fun declaredPreviouslyAsStaticMethod()
    fun »declaredPreviouslyAsStaticMethod«()
}

class AnotherClass

fun nullableMyClass() -> result: MyClass?

pipeline myPipeline {
    // $TEST$ references myInstanceMethod
    val myClass = MyClass();
    myClass.»myInstanceMethod«();


    // $TEST$ references redeclaredAsInstanceAttribute
    MyClass().»redeclaredAsInstanceAttribute«();

    // $TEST$ references redeclaredAsStaticAttribute
    MyClass().»redeclaredAsStaticAttribute«();

    // $TEST$ references redeclaredAsNestedClass
    MyClass().»redeclaredAsNestedClass«();

    // $TEST$ references redeclaredAsNestedEnum
    MyClass().»redeclaredAsNestedEnum«();

    // $TEST$ references redeclaredAsInstanceMethod
    MyClass().»redeclaredAsInstanceMethod«();

    // $TEST$ references redeclaredAsStaticMethod
    MyClass().»redeclaredAsStaticMethod«();

    // $TEST$ references declaredPreviouslyAsStaticAttribute
    MyClass().»declaredPreviouslyAsStaticAttribute«();

    // $TEST$ references declaredPreviouslyAsNestedClass
    MyClass().»declaredPreviouslyAsNestedClass«();

    // $TEST$ references declaredPreviouslyAsNestedEnum
    MyClass().»declaredPreviouslyAsNestedEnum«();

    // $TEST$ references declaredPreviouslyAsStaticMethod
    MyClass().»declaredPreviouslyAsStaticMethod«();

    // $TEST$ references myInstanceMethod
    nullableMyClass().»myInstanceMethod«;

    // $TEST$ references myInstanceMethod
    nullableMyClass()?.»myInstanceMethod«();


    // $TEST$ unresolved
    MyClass.»myInstanceMethod«;

    // $TEST$ unresolved
    AnotherClass().»myInstanceMethod«;

    // $TEST$ unresolved
    unresolved.»myInstanceMethod«;

    // $TEST$ unresolved
    MyClass.»unresolved«;
}
