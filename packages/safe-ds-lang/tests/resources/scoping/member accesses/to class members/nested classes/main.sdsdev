package tests.scoping.memberAccesses.toClassMembers.nestedClasses

class MyClass {
    // $TEST$ target myNestedClass
    class »MyNestedClass«


    // $TEST$ target redeclaredAsInstanceAttribute
    class »RedeclaredAsInstanceAttribute«
    attr RedeclaredAsInstanceAttribute: Int

    // $TEST$ target redeclaredAsStaticAttribute
    class »RedeclaredAsStaticAttribute«
    static attr RedeclaredAsStaticAttribute: Int

    // $TEST$ target redeclaredAsNestedClass
    class »RedeclaredAsNestedClass«
    class RedeclaredAsNestedClass

    // $TEST$ target redeclaredAsNestedEnum
    class »RedeclaredAsNestedEnum«
    enum RedeclaredAsNestedEnum

    // $TEST$ target redeclaredAsInstanceMethod
    class »RedeclaredAsInstanceMethod«
    fun RedeclaredAsInstanceMethod()

    // $TEST$ target redeclaredAsStaticMethod
    class »RedeclaredAsStaticMethod«
    static fun RedeclaredAsStaticMethod()


    // $TEST$ target declaredPreviouslyAsInstanceAttribute
    attr DeclaredPreviouslyAsInstanceAttribute: Int
    class »DeclaredPreviouslyAsInstanceAttribute«

    // $TEST$ target declaredPreviouslyAsInstanceMethod
    fun DeclaredPreviouslyAsInstanceMethod()
    class »DeclaredPreviouslyAsInstanceMethod«
}

class MyNestedClass
class AnotherClass

pipeline myPipeline {
    // $TEST$ references myNestedClass
    MyClass.»MyNestedClass«;


    // $TEST$ references redeclaredAsInstanceAttribute
    MyClass.»RedeclaredAsInstanceAttribute«;

    // $TEST$ references redeclaredAsStaticAttribute
    MyClass.»RedeclaredAsStaticAttribute«;

    // $TEST$ references redeclaredAsNestedClass
    MyClass.»RedeclaredAsNestedClass«;

    // $TEST$ references redeclaredAsNestedEnum
    MyClass.»RedeclaredAsNestedEnum«;

    // $TEST$ references redeclaredAsInstanceMethod
    MyClass.»RedeclaredAsInstanceMethod«;

    // $TEST$ references redeclaredAsStaticMethod
    MyClass.»RedeclaredAsStaticMethod«;

    // $TEST$ references declaredPreviouslyAsInstanceAttribute
    MyClass.»DeclaredPreviouslyAsInstanceAttribute«;

    // $TEST$ references declaredPreviouslyAsInstanceMethod
    MyClass.»DeclaredPreviouslyAsInstanceMethod«;


    // $TEST$ unresolved
    MyClass().»MyNestedClass«;

    // $TEST$ unresolved
    MyClass.»AnotherClass«;

    // $TEST$ unresolved
    AnotherClass.»MyNestedClass«;

    // $TEST$ unresolved
    unresolved.»MyNestedClass«;

    // $TEST$ unresolved
    MyClass.»unresolved«;
}
