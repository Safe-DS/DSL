package tests.validation.style.unnecessarySafeAccess

class MyClass {
    attr a: Int
}

fun nullableMyClass() -> result: MyClass?

pipeline test {
    // $TEST$ info "The receiver is never null, so the safe access is unnecessary."
    »1?.a«();

    // $TEST$ no info "The receiver is never null, so the safe access is unnecessary."
    »null?.a«();

    // $TEST$ no info "The receiver is never null, so the safe access is unnecessary."
    »nullableMyClass()?.a«();

    // $TEST$ no info "The receiver is never null, so the safe access is unnecessary."
    nullableMyClass()»?.a«(); // Langium currently computes the wrong range for a member access

    // $TEST$ no info "The receiver is never null, so the safe access is unnecessary."
    »unresolved?.a«();


    // $TEST$ no info "The receiver is never null, so the safe access is unnecessary."
    »1.a«();

    // $TEST$ no info "The receiver is never null, so the safe access is unnecessary."
    »null.a«();

    // $TEST$ no info "The receiver is never null, so the safe access is unnecessary."
    »nullableMyClass().a«();

    // $TEST$ no info "The receiver is never null, so the safe access is unnecessary."
    nullableMyClass()».a«(); // Langium currently computes the wrong range for a member access

    // $TEST$ no info "The receiver is never null, so the safe access is unnecessary."
    »unresolved.a«();
}
