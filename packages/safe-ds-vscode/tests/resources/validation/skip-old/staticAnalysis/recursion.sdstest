package tests.staticAnalysis.recursion

// Positive examples -----------------------------------------------------------

annotation CallsShouldBeRecursive

// Direct recursion

@CallsShouldBeRecursive
step directRecursion(a: Any or directRecursion()) {
    directRecursion();
    1 + directRecursion();
    val a = directRecursion();
}

// Transitive recursion

@CallsShouldBeRecursive
step transitiveRecursion1() {
    transitiveRecursion2();
    val a = transitiveRecursion2();
}

@CallsShouldBeRecursive
step transitiveRecursion2() {
    transitiveRecursion3();
    val a = transitiveRecursion3();
}

@CallsShouldBeRecursive
step transitiveRecursion3() {
    transitiveRecursion2();
    val a = transitiveRecursion2();
}

// Deferred recursion in lambda

@CallsShouldBeRecursive
step deferredRecursionInLambda() {
    (() { directRecursion(); })();
    (() -> directRecursion())();
}

// Negative examples -----------------------------------------------------------

annotation CallsShouldNotBeRecursive

// Normal calls

@CallsShouldNotBeRecursive
step normalCall(f: () -> ()) {
    f();
    (() {})();
    (() -> null)();

    MyClass();
    MyEnum.Variant();
    myFun();
    myStep();
}

class MyClass()
enum MyEnum {
    Variant()
}
fun myFun()
step myStep() {}

// Uncalled lambda

@CallsShouldNotBeRecursive
step uncalledLambda() {
    () { uncalledLambda(); };
    () -> uncalledLambda();
}

// Lambda recursion (already handled by scoping)

@CallsShouldNotBeRecursive
step lambdaRecursion() {
    val a = () { a(); };
    val b = () -> b();
}

// Unresolved callable

@CallsShouldNotBeRecursive
step unresolvedCallable() {
    unresolved();
}
