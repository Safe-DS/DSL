package test.scoping.references.direct.toPlaceholders.ofContainingSegment

segment mySegment(shadowedParameter: Int) {
    // $TEST$ target before
    val »before« = 0;

    // $TEST$ target shadowedParameter
    val »shadowedParameter« = 0;

    // $TEST$ target redeclared
    val »redeclared« = 0;
    val redeclared = 0;

    // $TEST$ references before
    »before«;

    // $TEST$ references shadowedParameter
    »shadowedParameter«;

    // $TEST$ references redeclared
    »redeclared«;

    // $TEST$ unresolved
    »after«;

    val blockLambda = () {
        // $TEST$ references before
        »before«;

        // $TEST$ references shadowedParameter
        »shadowedParameter«;

        // $TEST$ references redeclared
        »redeclared«;

        // $TEST$ unresolved
        »blockLambda«;

        // $TEST$ unresolved
        »after«;

        () {
            // $TEST$ references before
            »before«;

            // $TEST$ references shadowedParameter
            »shadowedParameter«;

            // $TEST$ references redeclared
            »redeclared«;

            // $TEST$ unresolved
            »blockLambda«;

            // $TEST$ unresolved
            »after«;
        };
    };

    val expressionLambda = () -> 
        // $TEST$ references before
        »before« +

        // $TEST$ references shadowedParameter
        »shadowedParameter« +

        // $TEST$ references redeclared
        »redeclared« +

        // $TEST$ unresolved
        »expressionLambda« +

        // $TEST$ unresolved
        »after«;

    val after = 1;
}
