package test.scoping.references.direct.toPlaceholders.ofContainingBlockLambda

segment mySegment(mySegmentParameter: Int) {
    val mySegmentPlaceholder = 0;

    (myOuterBlockLambdaParameter) {
        // $TEST$ target outer_mySegmentParameter
        val »mySegmentParameter« = 0;

        // $TEST$ target outer_mySegmentPlaceholder
        val »mySegmentPlaceholder« = 0;

        // $TEST$ target outer_myOuterBlockLambdaPlaceholderBefore
        val »myOuterBlockLambdaPlaceholderBefore« = 0;

        // $TEST$ target outer_redeclared
        val »redeclared« = 0;
        val redeclared = 0;


        // $TEST$ references outer_mySegmentParameter
        »mySegmentParameter«;
        
        // $TEST$ references outer_mySegmentPlaceholder
        »mySegmentPlaceholder«;

        // $TEST$ references outer_myOuterBlockLambdaPlaceholderBefore
        »myOuterBlockLambdaPlaceholderBefore«;

        // $TEST$ references outer_redeclared
        »redeclared«;

        // $TEST$ unresolved
        »myOuterBlockLambdaPlaceholderAfter«;

        val blockLambda = () {
            // $TEST$ target inner_mySegmentParameter
            val »mySegmentParameter« = 0;

            // $TEST$ target inner_mySegmentPlaceholder
            val »mySegmentPlaceholder« = 0;

            // $TEST$ target inner_myOuterBlockLambdaParameter
            val »myOuterBlockLambdaParameter« = 0;

            // $TEST$ target inner_myOuterBlockLambdaPlaceholderBefore
            val »myOuterBlockLambdaPlaceholderBefore« = 0;


            // $TEST$ references inner_mySegmentParameter
            »mySegmentParameter«;

            // $TEST$ references inner_mySegmentPlaceholder
            »mySegmentPlaceholder«;

            // $TEST$ references inner_myOuterBlockLambdaParameter
            »myOuterBlockLambdaParameter«;

            // $TEST$ references inner_myOuterBlockLambdaPlaceholderBefore
            »myOuterBlockLambdaPlaceholderBefore«;

            // $TEST$ references outer_redeclared
            »redeclared«;

            // $TEST$ unresolved
            »blockLambda«;

            // $TEST$ unresolved
            »myOuterBlockLambdaPlaceholderAfter«;

            val expressionLambda = () ->
                // $TEST$ references inner_mySegmentParameter
                »mySegmentParameter« +

                // $TEST$ references inner_mySegmentPlaceholder
                »mySegmentPlaceholder« +

                // $TEST$ references inner_myOuterBlockLambdaParameter
                »myOuterBlockLambdaParameter« +

                // $TEST$ references inner_myOuterBlockLambdaPlaceholderBefore
                »myOuterBlockLambdaPlaceholderBefore« +

                // $TEST$ references outer_redeclared
                »redeclared« +

                // $TEST$ unresolved
                »blockLambda« +

                // $TEST$ unresolved
                »expressionLambda« +

                // $TEST$ unresolved
                »myOuterBlockLambdaPlaceholderAfter«;
        };

        () -> () {
            // $TEST$ target blockLambdaInExpressionLambda_mySegmentParameter
            val »mySegmentParameter« = 0;

            // $TEST$ target blockLambdaInExpressionLambda_mySegmentPlaceholder
            val »mySegmentPlaceholder« = 0;

            // $TEST$ target blockLambdaInExpressionLambda_myOuterBlockLambdaParameter
            val »myOuterBlockLambdaParameter« = 0;

            // $TEST$ target blockLambdaInExpressionLambda_myOuterBlockLambdaPlaceholderBefore
            val »myOuterBlockLambdaPlaceholderBefore« = 0;


            // $TEST$ references blockLambdaInExpressionLambda_mySegmentParameter
            »mySegmentParameter«;

            // $TEST$ references blockLambdaInExpressionLambda_mySegmentPlaceholder
            »mySegmentPlaceholder«;

            // $TEST$ references blockLambdaInExpressionLambda_myOuterBlockLambdaPlaceholderBefore
            »myOuterBlockLambdaPlaceholderBefore«;

            // $TEST$ references outer_redeclared
            »redeclared«;

            // $TEST$ unresolved
            »myOuterBlockLambdaPlaceholderAfter«;
        };

        val myOuterBlockLambdaPlaceholderAfter = 0;
    };
}
