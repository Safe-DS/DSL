package tests.scoping.references.acrossFiles.toSegments

import tests.scoping.references.acrossFiles.toSegments.mySegment as mySegmentInSamePackage
import safeds.scoping.references.acrossFiles.toSegments.mySegment as mySegmentInSafeDsPackage
import tests.scoping.references.acrossFiles.toSegments.other.mySegment as mySegmentInAnotherPackage

pipeline myPipeline {
    // $TEST$ references same_mySegment
    »mySegment«;


    // $TEST$ references same_publicSegmentInSamePackage
    »publicSegmentInSamePackage«;

    // $TEST$ references same_internalSegmentInSamePackage
    »internalSegmentInSamePackage«;

    // $TEST$ unresolved
    »privateSegmentInSamePackage«;


    // $TEST$ references safeds_publicSegmentInSafeDsPackage
    »publicSegmentInSafeDsPackage«;

    // $TEST$ unresolved
    »internalSegmentInSafeDsPackage«;

    // $TEST$ unresolved
    »privateSegmentInSafeDsPackage«;


    // $TEST$ unresolved
    »publicSegmentInAnotherPackage«;

    // $TEST$ unresolved
    »internalSegmentInAnotherPackage«;

    // $TEST$ unresolved
    »privateSegmentInAnotherPackage«;


    // $TEST$ unresolved
    »publicSegmentWithoutPackage«;

    // $TEST$ unresolved
    »internalSegmentWithoutPackage«;

    // $TEST$ unresolved
    »privateSegmentWithoutPackage«;


    // $TEST$ references same_mySegment
    »mySegmentInSamePackage«;

    // $TEST$ references safeds_mySegment
    »mySegmentInSafeDsPackage«;

    // $TEST$ references other_mySegment
    »mySegmentInAnotherPackage«;
}
