package test.scoping.namedTypes.toTypeParameter.inMethod

fun myFunction1<BeforeGlobal>()

// $TEST$ target container
class MyClass1<»Container«, Overridden> {
    fun myFunction2<BeforeMember>()

    // $TEST$ target own
    // $TEST$ target overridden
    fun myFunction3<»Own«, »Overridden«>(
        // $TEST$ references own
        a: »Own«,

        // $TEST$ references overridden
        b: »Overridden«,

        // $TEST$ references container
        c: »Container«,

        // $TEST$ unresolved
        d: »BeforeMember«,

        // $TEST$ unresolved
        e: »AfterMember«,

        // $TEST$ unresolved
        g: »BeforeGlobal«,

        // $TEST$ unresolved
        h: »AfterGlobal«,

        // $TEST$ unresolved
        i: »Unresolved«,
    ) -> (
        // $TEST$ references own
        z: »Own«,

        // $TEST$ references overridden
        y: »Overridden«,

        // $TEST$ references container
        x: »Container«,

        // $TEST$ unresolved
        w: »BeforeMember«,

        // $TEST$ unresolved
        v: »AfterMember«,

        // $TEST$ unresolved
        u: »BeforeGlobal«,

        // $TEST$ unresolved
        t: »AfterGlobal«,

        // $TEST$ unresolved
        s: »Unresolved«,
    ) where {
        // $TEST$ references own
        Own sub »Own«,

        // $TEST$ references overridden
        Own sub »Overridden«,

        // $TEST$ references container
        Own sub »Container«,

        // $TEST$ unresolved
        Own sub »BeforeMember«,

        // $TEST$ unresolved
        Own sub »AfterMember«,

        // $TEST$ unresolved
        Own sub »BeforeGlobal«,

        // $TEST$ unresolved
        Own sub »AfterGlobal«,

        // $TEST$ unresolved
        Own sub »Unresolved«,
    }

    fun myFunction5<AfterMember>()
}

fun myFunction5<AfterGlobal>()
