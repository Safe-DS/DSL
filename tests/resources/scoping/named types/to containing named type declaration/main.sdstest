package test.scoping.namedTypes.toContainingNamedTypeDeclaration

// $TEST$ target outerClass
class »MyClass«(
    // $TEST$ references outerClass
    p: »MyClass«
) {
    // $TEST$ references outerClass
    attr a: »MyClass«

    // $TEST$ unresolved
    attr b: »MyEnum«

    fun f(
        // $TEST$ references outerClass
        p: »MyClass«
    ) -> (
        // $TEST$ references outerClass
        r: »MyClass«
    )

    // $TEST$ target enum
    enum »MyEnum« {
        // $TEST$ target variant
        »MyEnumVariant«(
            // $TEST$ references outerClass
            p1: »MyClass«,

            // $TEST$ references enum
            p2: »MyEnum«,

            // $TEST$ references variant
            p3: »MyEnumVariant«,
        )
    }

    // $TEST$ target innerClass
    class »MyClass«(
        // $TEST$ references innerClass
        p: »MyClass«
    ) {
        // $TEST$ references innerClass
        attr a: »MyClass«

        fun f(
            // $TEST$ references innerClass
            p: »MyClass«
        ) -> (
            // $TEST$ references innerClass
            r: »MyClass«
        )
    }
}
