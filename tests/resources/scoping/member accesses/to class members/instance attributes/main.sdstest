package tests.scoping.memberAccesses.toClassMembers.instanceAttributes

class MyClass {
    // $TEST$ target myInstanceAttribute
    attr »myInstanceAttribute«: Int


    // $TEST$ target redeclaredAsInstanceAttribute
    attr »redeclaredAsInstanceAttribute«: Int
    attr redeclaredAsInstanceAttribute: Int

    // $TEST$ target redeclaredAsStaticAttribute
    attr »redeclaredAsStaticAttribute«: Int
    static attr redeclaredAsStaticAttribute: Int

    // $TEST$ target redeclaredAsNestedClass
    attr »redeclaredAsNestedClass«: Int
    class redeclaredAsNestedClass

    // $TEST$ target redeclaredAsNestedEnum
    attr »redeclaredAsNestedEnum«: Int
    enum redeclaredAsNestedEnum

    // $TEST$ target redeclaredAsInstanceMethod
    attr »redeclaredAsInstanceMethod«: Int
    fun redeclaredAsInstanceMethod()

    // $TEST$ target redeclaredAsStaticMethod
    attr »redeclaredAsStaticMethod«: Int
    static fun redeclaredAsStaticMethod()


    // $TEST$ target declaredPreviouslyAsStaticAttribute
    static attr declaredPreviouslyAsStaticAttribute: Int
    attr »declaredPreviouslyAsStaticAttribute«: Int

    // $TEST$ target declaredPreviouslyAsNestedClass
    class declaredPreviouslyAsNestedClass
    attr »declaredPreviouslyAsNestedClass«: Int

    // $TEST$ target declaredPreviouslyAsNestedEnum
    class declaredPreviouslyAsNestedEnum
    attr »declaredPreviouslyAsNestedEnum«: Int

    // $TEST$ target declaredPreviouslyAsStaticMethod
    static fun declaredPreviouslyAsStaticMethod()
    attr »declaredPreviouslyAsStaticMethod«: Int
}

class AnotherClass

fun nullableMyClass() -> result: MyClass?

pipeline myPipeline {
    // $TEST$ references myInstanceAttribute
    val myClass = MyClass();
    myClass.»myInstanceAttribute«;


    // $TEST$ references redeclaredAsInstanceAttribute
    MyClass().»redeclaredAsInstanceAttribute«;

    // $TEST$ references redeclaredAsStaticAttribute
    MyClass().»redeclaredAsStaticAttribute«;

    // $TEST$ references redeclaredAsNestedClass
    MyClass().»redeclaredAsNestedClass«;

    // $TEST$ references redeclaredAsNestedEnum
    MyClass().»redeclaredAsNestedEnum«;

    // $TEST$ references redeclaredAsInstanceMethod
    MyClass().»redeclaredAsInstanceMethod«;

    // $TEST$ references redeclaredAsStaticMethod
    MyClass().»redeclaredAsStaticMethod«;

    // $TEST$ references declaredPreviouslyAsStaticAttribute
    MyClass().»declaredPreviouslyAsStaticAttribute«;

    // $TEST$ references declaredPreviouslyAsNestedClass
    MyClass().»declaredPreviouslyAsNestedClass«;

    // $TEST$ references declaredPreviouslyAsNestedEnum
    MyClass().»declaredPreviouslyAsNestedEnum«;

    // $TEST$ references declaredPreviouslyAsStaticMethod
    MyClass().»declaredPreviouslyAsStaticMethod«;

    // $TEST$ references myInstanceAttribute
    nullableMyClass()?.»myInstanceAttribute«;


    // $TEST$ unresolved
    MyClass.»myInstanceAttribute«;

    // $TEST$ unresolved
    AnotherClass().»myInstanceAttribute«;

    // $TEST$ unresolved
    nullableMyClass().»myInstanceAttribute«;

    // $TEST$ unresolved
    unresolved.»myInstanceAttribute«;

    // $TEST$ unresolved
    MyClass.»unresolved«;
}
