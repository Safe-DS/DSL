package tests.scoping.typeParameterConstraints.inEnumVariantInGlobalEnum

fun myFunction1<BeforeEnum>()

enum MyEnum {
    MyEnumVariant1<BeforeEnumVariant>

    // $TEST$ target own
    MyEnumVariant2<»Own«> where {
        // $TEST$ references own
        »Own« sub Int,

        // $TEST$ unresolved
        »BeforeEnumVariant« sub Int,

        // $TEST$ unresolved
        »AfterEnumVariant« sub Int,

        // $TEST$ unresolved
        »BeforeEnum« sub Int,

        // $TEST$ unresolved
        »AfterEnum« sub Int,

        // $TEST$ unresolved
        »NotATypeParameter« sub Int,

        // $TEST$ unresolved
        »Unresolved« sub Int
    }

    MyEnumVariant3<AfterEnumVariant>
}

fun myFunction2<AfterEnum>()

class NotATypeParameter
